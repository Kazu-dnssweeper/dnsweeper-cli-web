name: Auto Issue Creation

on:
  schedule:
    # 毎日午前10時（JST）に実行
    - cron: '0 1 * * *'
  push:
    branches: [master]
    paths:
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

jobs:
  create-issues:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run code analysis
      run: |
        # TypeScript エラーチェック
        npx tsc --noEmit > ts_errors.txt 2>&1 || true
        
        # ESLint チェック
        npx eslint src --format json > eslint_errors.json 2>&1 || true
        
        # テスト実行
        npm test > test_results.txt 2>&1 || true
        
    - name: Create Issue for TypeScript Errors
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // TypeScript エラーを読み込み
          let tsErrors = '';
          try {
            tsErrors = fs.readFileSync('ts_errors.txt', 'utf8');
          } catch (e) {
            tsErrors = 'No TypeScript errors found';
          }
          
          // エラーがある場合のみIssue作成
          if (tsErrors.includes('error TS')) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 TypeScript Errors Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## TypeScript Errors Found\n\n\`\`\`\n${tsErrors}\n\`\`\`\n\n**Auto-generated by GitHub Actions**\n\nPlease review and fix these TypeScript errors.`,
              labels: ['bug', 'typescript', 'auto-generated']
            });
          }
          
    - name: Create Issue for ESLint Errors
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // ESLint エラーを読み込み
          let eslintErrors = '';
          try {
            const eslintData = fs.readFileSync('eslint_errors.json', 'utf8');
            const eslintResults = JSON.parse(eslintData);
            
            if (eslintResults.length > 0) {
              eslintErrors = eslintResults.map(result => 
                `**${result.filePath}**\n${result.messages.map(msg => 
                  `- Line ${msg.line}: ${msg.message}`
                ).join('\n')}`
              ).join('\n\n');
            }
          } catch (e) {
            eslintErrors = 'No ESLint errors found';
          }
          
          // エラーがある場合のみIssue作成
          if (eslintErrors !== 'No ESLint errors found' && eslintErrors.length > 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔧 ESLint Issues Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## ESLint Issues Found\n\n${eslintErrors}\n\n**Auto-generated by GitHub Actions**\n\nPlease review and fix these linting issues.`,
              labels: ['code-quality', 'eslint', 'auto-generated']
            });
          }
          
    - name: Create Issue for Failed Tests
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // テスト結果を読み込み
          let testResults = '';
          try {
            testResults = fs.readFileSync('test_results.txt', 'utf8');
          } catch (e) {
            testResults = 'No test results found';
          }
          
          // テストが失敗している場合のみIssue作成
          if (testResults.includes('FAIL') || testResults.includes('failing')) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Test Failures Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `## Test Failures Found\n\n\`\`\`\n${testResults}\n\`\`\`\n\n**Auto-generated by GitHub Actions**\n\nPlease review and fix these failing tests.`,
              labels: ['bug', 'tests', 'auto-generated']
            });
          }