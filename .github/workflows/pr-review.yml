name: PR Auto Review with Claude API

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  auto-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt || pip install anthropic

    - name: Get PR diff
      id: pr_diff
      run: |
        git fetch origin ${{ github.base_ref }}
        git diff origin/${{ github.base_ref }}...HEAD > pr_diff.patch
        # Limit diff size to 50KB to avoid API limits
        head -c 51200 pr_diff.patch > pr_diff_limited.patch
        echo "diff_size=$(stat -c%s pr_diff.patch)" >> $GITHUB_OUTPUT

    - name: Get changed files
      id: changed_files
      run: |
        git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        echo "file_count=$(wc -l < changed_files.txt)" >> $GITHUB_OUTPUT

    - name: Analyze PR with Claude
      id: analyze_pr
      run: |
        python scripts/pr_reviewer.py \
          --diff pr_diff_limited.patch \
          --files changed_files.txt \
          --pr-title "${{ github.event.pull_request.title }}" \
          --pr-body "${{ github.event.pull_request.body }}" \
          --output review.json
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Post review comment
      if: steps.analyze_pr.outcome == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const review = JSON.parse(fs.readFileSync('review.json', 'utf8'));
          
          // メインレビューコメント
          let body = `## 🤖 Claude AI Code Review\n\n`;
          body += `### Overall Assessment: ${review.overall_assessment}\n\n`;
          
          if (review.summary) {
            body += `**Summary:** ${review.summary}\n\n`;
          }
          
          // 問題点
          if (review.issues && review.issues.length > 0) {
            body += `### 🚨 Issues Found (${review.issues.length})\n\n`;
            review.issues.forEach((issue, index) => {
              body += `${index + 1}. **${issue.severity}**: ${issue.description}\n`;
              if (issue.file && issue.line) {
                body += `   - File: \`${issue.file}:${issue.line}\`\n`;
              }
              if (issue.suggestion) {
                body += `   - Suggestion: ${issue.suggestion}\n`;
              }
              body += '\n';
            });
          }
          
          // 改善提案
          if (review.suggestions && review.suggestions.length > 0) {
            body += `### 💡 Suggestions\n\n`;
            review.suggestions.forEach((suggestion, index) => {
              body += `${index + 1}. ${suggestion}\n`;
            });
            body += '\n';
          }
          
          // パフォーマンス分析
          if (review.performance_analysis) {
            body += `### ⚡ Performance Analysis\n\n`;
            body += review.performance_analysis + '\n\n';
          }
          
          // セキュリティ分析
          if (review.security_analysis) {
            body += `### 🔒 Security Analysis\n\n`;
            body += review.security_analysis + '\n\n';
          }
          
          // コスト情報
          body += `---\n`;
          body += `*Review generated by Claude API (Model: ${review.model_used || 'claude-3-haiku'})*\n`;
          body += `*Tokens used: ${review.tokens_used || 'N/A'}*`;
          
          // PRコメントを投稿
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });
          
          // インラインコメント（重要な問題のみ）
          if (review.inline_comments && review.inline_comments.length > 0) {
            const comments = review.inline_comments.slice(0, 5); // 最大5件
            for (const comment of comments) {
              try {
                await github.rest.pulls.createReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  body: `🤖 **${comment.severity}**: ${comment.message}`,
                  commit_id: context.sha,
                  path: comment.path,
                  line: comment.line || comment.position
                });
              } catch (e) {
                console.log(`Failed to post inline comment: ${e.message}`);
              }
            }
          }

    - name: Add labels based on review
      if: steps.analyze_pr.outcome == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const review = JSON.parse(fs.readFileSync('review.json', 'utf8'));
          
          const labels = [];
          
          // 重要度に基づくラベル
          if (review.has_critical_issues) {
            labels.push('needs-fix');
          }
          if (review.has_security_issues) {
            labels.push('security');
          }
          if (review.has_performance_issues) {
            labels.push('performance');
          }
          if (review.approved) {
            labels.push('approved-by-ai');
          }
          
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }

    - name: Update cost tracking
      if: always()
      run: |
        python scripts/cost_optimizer.py update-usage \
          --tokens-used ${{ steps.analyze_pr.outputs.tokens_used || 0 }} \
          --model ${{ steps.analyze_pr.outputs.model_used || 'claude-3-haiku-20240307' }} \
          --action "pr-review"
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}