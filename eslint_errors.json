
> dnsweeper@1.0.0 lint
> eslint src --ext .ts --format json

[{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/add.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/analyze-refactored.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AnalysisResult' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3507,3510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3507,3510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":230,"column":28,"nodeType":null,"messageId":"insert","endLine":230,"endColumn":28,"fix":{"range":[5819,5819],"text":","}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6627,6630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6627,6630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":265,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6696,6699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6696,6699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":344,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":344,"endColumn":37}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * analyzeコマンド - ドメインリストの詳細分析（リファクタリング版）\n */\n\nimport { CSVProcessor } from '../lib/csv-processor.js';\nimport { DNSResolver } from '../lib/dns-resolver.js';\nimport { RiskCalculator } from '../lib/risk-calculator.js';\nimport { validateDNSServer } from '../lib/validators.js';\n\nimport { BaseCommand } from './base-command.js';\n\nimport type {\n  IDNSRecord,\n  OutputFormat,\n  AnalysisResult,\n} from '../types/index.js';\n\ninterface AnalyzeOptions {\n  format?: string;\n  output?: string;\n  timeout?: string;\n  nameserver?: string;\n  parallel?: string;\n  verbose?: boolean;\n  quiet?: boolean;\n  json?: boolean;\n  colors?: boolean;\n}\n\ninterface DomainAnalysis {\n  domain: string;\n  status: 'active' | 'inactive' | 'error';\n  records: {\n    A: IDNSRecord[];\n    AAAA: IDNSRecord[];\n    MX: IDNSRecord[];\n    TXT: IDNSRecord[];\n    NS: IDNSRecord[];\n    CNAME: IDNSRecord[];\n  };\n  riskScore: number;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  factors: string[];\n  error?: string;\n}\n\nexport class AnalyzeCommand extends BaseCommand {\n  private csvProcessor!: CSVProcessor;\n  private resolver!: DNSResolver;\n  private riskCalculator!: RiskCalculator;\n\n  constructor() {\n    super('analyze', 'ドメインリストを読み込んで詳細分析');\n    this.setupCommand();\n  }\n\n  private setupCommand(): void {\n    this.command\n      .argument('<file>', 'CSVファイルのパス')\n      .option('-f, --format <format>', '出力形式 (table, json, csv)', 'table')\n      .option('--timeout <ms>', 'タイムアウト (ミリ秒)', '5000')\n      .option('-n, --nameserver <server>', 'カスタムネームサーバー')\n      .option('-p, --parallel <count>', '並列処理数', '10');\n\n    // 出力オプションを追加\n    this.addOutputOptions();\n\n    // アクションを設定\n    this.setAction(this.execute.bind(this));\n  }\n\n  async execute(file: string, options: AnalyzeOptions): Promise<void> {\n    // Loggerを初期化\n    this.initLogger(options);\n\n    // ファイルの検証\n    const filePath = this.validateFileExists(file);\n\n    // オプションの検証\n    const timeout = this.validateTimeout(options.timeout);\n    const parallel = this.validateParallel(options.parallel);\n    const format = this.validateOutputFormat(\n      options.json ? 'json' : options.format,\n      ['table', 'json', 'csv']\n    );\n\n    // カスタムネームサーバーの検証\n    if (options.nameserver) {\n      validateDNSServer(options.nameserver);\n    }\n\n    // コンポーネントの初期化\n    this.csvProcessor = new CSVProcessor();\n    this.resolver = new DNSResolver({\n      timeout,\n      servers: options.nameserver ? [options.nameserver] : undefined,\n    });\n    this.riskCalculator = new RiskCalculator({});\n\n    // CSVファイルの読み込み\n    const domains = await this.executeWithSpinner(\n      'CSVファイルを読み込み中...',\n      async () => {\n        const parseResult = await this.csvProcessor.parseAuto(filePath);\n        const records = parseResult.records;\n        return this.extractDomains(records);\n      },\n      `ドメインの読み込み完了`,\n      'ファイルの読み込みに失敗しました'\n    );\n\n    this.logger.info(`${domains.length} 件のドメインを分析します`);\n\n    // ドメインの分析\n    const results = await this.analyzeDomains(domains, parallel);\n\n    // サマリーの生成\n    const summary = this.generateSummary(results);\n\n    // 結果の出力\n    const output = {\n      summary,\n      domains: results,\n      metadata: {\n        analyzedAt: new Date().toISOString(),\n        totalDomains: domains.length,\n        activeCount: summary.activeCount,\n        inactiveCount: summary.inactiveCount,\n        errorCount: summary.errorCount,\n      },\n    };\n\n    await this.outputResults(output, format as OutputFormat, options);\n  }\n\n  /**\n   * ドメインの抽出\n   */\n  private extractDomains(records: any[]): string[] {\n    const domains = new Set<string>();\n\n    for (const record of records) {\n      // 'domain', 'name', 'ドメイン名' などのカラムを探す\n      const domain =\n        record.domain || record.name || record['ドメイン名'] || record.Domain;\n      if (domain && typeof domain === 'string') {\n        domains.add(domain.trim().toLowerCase());\n      }\n    }\n\n    if (domains.size === 0) {\n      throw new Error('CSVファイルからドメインを抽出できませんでした');\n    }\n\n    return Array.from(domains);\n  }\n\n  /**\n   * ドメインの分析\n   */\n  private async analyzeDomains(\n    domains: string[],\n    parallel: number\n  ): Promise<DomainAnalysis[]> {\n    const results: DomainAnalysis[] = [];\n    const total = domains.length;\n    let completed = 0;\n\n    // バッチ処理\n    for (let i = 0; i < domains.length; i += parallel) {\n      const batch = domains.slice(i, i + parallel);\n\n      const batchResults = await Promise.all(\n        batch.map(domain => this.analyzeSingleDomain(domain))\n      );\n\n      results.push(...batchResults);\n      completed += batch.length;\n\n      // 進捗表示\n      if (completed % 50 === 0) {\n        this.logger.info(\n          `進捗: ${completed}/${total} (${Math.round((completed / total) * 100)}%)`\n        );\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * 単一ドメインの分析\n   */\n  private async analyzeSingleDomain(domain: string): Promise<DomainAnalysis> {\n    try {\n      // 基本的なドメイン検証\n      this.validateDomain(domain);\n\n      // 各レコードタイプの解決\n      const [a, aaaa, mx, txt, ns, cname] = await Promise.all([\n        this.resolveRecords(domain, 'A'),\n        this.resolveRecords(domain, 'AAAA'),\n        this.resolveRecords(domain, 'MX'),\n        this.resolveRecords(domain, 'TXT'),\n        this.resolveRecords(domain, 'NS'),\n        this.resolveRecords(domain, 'CNAME'),\n      ]);\n\n      const records = {\n        A: a,\n        AAAA: aaaa,\n        MX: mx,\n        TXT: txt,\n        NS: ns,\n        CNAME: cname,\n      };\n      const allRecords = [...a, ...aaaa, ...mx, ...txt, ...ns, ...cname];\n\n      // ステータスの判定\n      const status = allRecords.length > 0 ? 'active' : 'inactive';\n\n      // リスク分析（最初のレコードで代表してリスク計算）\n      const primaryRecord = allRecords[0] || {\n        id: domain,\n        name: domain,\n        type: 'A' as const,\n        value: 'unknown',\n        ttl: 3600,\n        created: new Date(),\n        updated: new Date()\n      };\n      const riskScore = this.riskCalculator.calculateRisk(primaryRecord);\n      const factors = riskScore.recommendations;\n\n      return {\n        domain,\n        status,\n        records,\n        riskScore: riskScore.total,\n        riskLevel: riskScore.level,\n        factors,\n      };\n    } catch (error) {\n      return {\n        domain,\n        status: 'error',\n        records: { A: [], AAAA: [], MX: [], TXT: [], NS: [], CNAME: [] },\n        riskScore: 0,\n        riskLevel: 'low',\n        factors: [],\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * レコードの解決\n   */\n  private async resolveRecords(\n    domain: string,\n    type: string\n  ): Promise<IDNSRecord[]> {\n    try {\n      const result = await this.resolver.resolve(domain, type as any);\n      return this.convertToIDNSRecords(result, domain, type as any);\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * 並列処理数の検証\n   */\n  private validateParallel(value: string | undefined): number {\n    const parallel = parseInt(value || '10', 10);\n    if (isNaN(parallel) || parallel < 1 || parallel > 100) {\n      throw new Error('並列処理数は1-100の範囲で指定してください');\n    }\n    return parallel;\n  }\n\n  /**\n   * リスクレベルの判定\n   */\n  private getRiskLevel(score: number): 'low' | 'medium' | 'high' | 'critical' {\n    if (score <= 20) return 'low';\n    if (score <= 50) return 'medium';\n    if (score <= 80) return 'high';\n    return 'critical';\n  }\n\n  /**\n   * サマリーの生成\n   */\n  private generateSummary(results: DomainAnalysis[]): {\n    activeCount: number;\n    inactiveCount: number;\n    errorCount: number;\n    riskDistribution: Record<string, number>;\n    topRiskFactors: Array<{ factor: string; count: number }>;\n  } {\n    const activeCount = results.filter(r => r.status === 'active').length;\n    const inactiveCount = results.filter(r => r.status === 'inactive').length;\n    const errorCount = results.filter(r => r.status === 'error').length;\n\n    // リスク分布\n    const riskDistribution: Record<string, number> = {\n      low: 0,\n      medium: 0,\n      high: 0,\n      critical: 0,\n    };\n\n    results.forEach(r => {\n      riskDistribution[r.riskLevel]++;\n    });\n\n    // リスク要因の集計\n    const factorCounts = new Map<string, number>();\n    results.forEach(r => {\n      r.factors.forEach(factor => {\n        factorCounts.set(factor, (factorCounts.get(factor) || 0) + 1);\n      });\n    });\n\n    const topRiskFactors = Array.from(factorCounts.entries())\n      .map(([factor, count]) => ({ factor, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10);\n\n    return {\n      activeCount,\n      inactiveCount,\n      errorCount,\n      riskDistribution,\n      topRiskFactors,\n    };\n  }\n}\n\n/**\n * analyzeコマンドを作成（後方互換性のため）\n */\nexport function createAnalyzeCommand() {\n  const command = new AnalyzeCommand();\n  return command.getCommand();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/analyze.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/base-command.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4366,4369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4366,4369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":207,"column":21,"nodeType":null,"messageId":"insert","endLine":207,"endColumn":21,"fix":{"range":[4687,4687],"text":","}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6223,6226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6223,6226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `format·as·any` with `(format·as·any)`","line":276,"column":44,"nodeType":null,"messageId":"replace","endLine":276,"endColumn":57,"fix":{"range":[6412,6425],"text":"(format as any)"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6422,6425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6422,6425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6886,6889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6886,6889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7225,7228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7225,7228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * ベースコマンドクラス\n *\n * すべてのCLIコマンドの共通機能を提供\n * - 共通オプションの管理\n * - エラーハンドリング\n * - ログ出力\n * - バリデーション\n * - 結果出力\n */\n\nimport { existsSync } from 'fs';\nimport { resolve } from 'path';\n\nimport { Command } from 'commander';\n\nimport { Logger } from '../lib/logger.js';\nimport { createFormatter } from '../lib/output-formatter.js';\n\nimport type {\n  DNSRecordType,\n  IDNSRecord,\n  OutputFormat,\n} from '../types/index.js';\n\nexport interface BaseCommandOptions {\n  verbose?: boolean;\n  quiet?: boolean;\n  json?: boolean;\n  output?: string;\n  colors?: boolean;\n}\n\nexport abstract class BaseCommand {\n  protected logger!: Logger;\n  protected command: Command;\n\n  constructor(name: string, description: string) {\n    this.command = new Command(name).description(description);\n    this.addCommonOptions();\n  }\n\n  /**\n   * 共通オプションの追加\n   */\n  protected addCommonOptions(): void {\n    this.command\n      .option('-v, --verbose', '詳細出力を有効化')\n      .option('-q, --quiet', 'エラー以外の出力を抑制')\n      .option('--no-colors', '色付き出力を無効化');\n  }\n\n  /**\n   * 出力関連オプションの追加\n   */\n  protected addOutputOptions(): void {\n    this.command\n      .option('-j, --json', 'JSON形式で出力')\n      .option('-o, --output <file>', '結果をファイルに出力');\n  }\n\n  /**\n   * Logger初期化\n   */\n  protected initLogger(options: BaseCommandOptions): void {\n    this.logger = new Logger({\n      verbose: options.verbose,\n      quiet: options.quiet,\n    });\n  }\n\n  /**\n   * エラーハンドリング付き実行\n   */\n  protected async executeWithErrorHandling(\n    fn: () => Promise<void>,\n    errorMessage?: string\n  ): Promise<void> {\n    try {\n      await fn();\n    } catch (error) {\n      if (this.logger?.stopSpinner) {\n        this.logger.stopSpinner(false, errorMessage || 'エラーが発生しました');\n      }\n\n      if (this.logger) {\n        this.logger.error(\n          error instanceof Error ? error.message : 'Unknown error occurred'\n        );\n      } else {\n        console.error(error);\n      }\n\n      process.exit(1);\n    }\n  }\n\n  /**\n   * スピナー付き実行\n   */\n  protected async executeWithSpinner<T>(\n    message: string,\n    fn: () => Promise<T>,\n    successMessage?: string,\n    errorMessage?: string\n  ): Promise<T> {\n    this.logger.startSpinner(message);\n\n    try {\n      const result = await fn();\n      this.logger.stopSpinner(true, successMessage);\n      return result;\n    } catch (error) {\n      this.logger.stopSpinner(false, errorMessage || 'エラーが発生しました');\n      throw error;\n    }\n  }\n\n  /**\n   * ドメイン名の検証\n   */\n  protected validateDomain(domain: string): void {\n    if (!domain || typeof domain !== 'string') {\n      throw new Error('ドメイン名が指定されていません');\n    }\n\n    const domainRegex =\n      /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n    if (!domainRegex.test(domain)) {\n      throw new Error(`無効なドメイン名: ${domain}`);\n    }\n\n    if (domain.length > 253) {\n      throw new Error('ドメイン名が長すぎます（253文字以下）');\n    }\n\n    const labels = domain.split('.');\n    for (const label of labels) {\n      if (label.length > 63) {\n        throw new Error('各ラベルは63文字以下である必要があります');\n      }\n    }\n  }\n\n  /**\n   * ファイル存在チェック\n   */\n  protected validateFileExists(filePath: string): string {\n    const resolvedPath = resolve(filePath);\n    if (!existsSync(resolvedPath)) {\n      throw new Error(`ファイルが見つかりません: ${resolvedPath}`);\n    }\n    return resolvedPath;\n  }\n\n  /**\n   * タイムアウト値の検証\n   */\n  protected validateTimeout(\n    timeout: string | undefined,\n    defaultValue = '5000'\n  ): number {\n    const value = parseInt(timeout || defaultValue, 10);\n    if (isNaN(value) || value <= 0 || value > 60000) {\n      throw new Error('タイムアウトは1-60000msの範囲で指定してください');\n    }\n    return value;\n  }\n\n  /**\n   * 出力形式の検証\n   */\n  protected validateOutputFormat(\n    format: string | undefined,\n    allowedFormats: string[]\n  ): OutputFormat {\n    const normalizedFormat = format?.toLowerCase() || 'table';\n    if (!allowedFormats.includes(normalizedFormat)) {\n      throw new Error(\n        `無効な出力形式: ${format}. 利用可能: ${allowedFormats.join(', ')}`\n      );\n    }\n    return normalizedFormat as OutputFormat;\n  }\n\n  /**\n   * DNS解決結果の変換（共通処理）\n   */\n  protected convertToIDNSRecords(\n    lookupResult: { records?: unknown[] },\n    domain: string,\n    recordType: DNSRecordType\n  ): IDNSRecord[] {\n    if (!lookupResult.records || !Array.isArray(lookupResult.records)) {\n      return [];\n    }\n\n    return lookupResult.records.map((record: any) => {\n      const now = new Date();\n      const baseRecord: IDNSRecord = {\n        id: `${domain}-${recordType}-${record.value || record.data}`,\n        name: domain,\n        type: recordType,\n        value: record.value || record.data || '',\n        ttl: record.ttl || 300,\n        created: now,\n        updated: now\n      };\n\n      switch (recordType) {\n        case 'A':\n        case 'AAAA':\n          return {\n            ...baseRecord,\n            data: record.address || record.value || '',\n          };\n        case 'CNAME':\n        case 'NS':\n        case 'PTR':\n          return {\n            ...baseRecord,\n            data: record.value || '',\n          };\n        case 'MX':\n          return {\n            ...baseRecord,\n            data: record.exchange || '',\n            priority: record.priority || 0,\n          };\n        case 'TXT':\n          return {\n            ...baseRecord,\n            data: Array.isArray(record.entries)\n              ? record.entries.join('')\n              : record.value || '',\n          };\n        case 'SOA':\n          return {\n            ...baseRecord,\n            data: [\n              record.nsname || '',\n              record.hostmaster || '',\n              record.serial || 0,\n              record.refresh || 0,\n              record.retry || 0,\n              record.expire || 0,\n              record.minttl || 0,\n            ].join(' '),\n          };\n        case 'SRV':\n          return {\n            ...baseRecord,\n            data: record.target || '',\n            priority: record.priority || 0,\n            weight: record.weight || 0,\n            port: record.port || 0,\n          };\n        default:\n          return {\n            ...baseRecord,\n            data: JSON.stringify(record),\n          };\n      }\n    });\n  }\n\n  /**\n   * 結果の出力（共通処理）\n   */\n  protected async outputResults(\n    result: any,\n    format: OutputFormat,\n    options: BaseCommandOptions & { output?: string }\n  ): Promise<void> {\n    const formatter = createFormatter({\n      format: format === 'yaml' ? 'json' : format as any,\n      colors: options.colors !== false,\n      verbose: options.verbose || false,\n      compact: format === 'json' && !options.verbose,\n    });\n\n    if (options.output) {\n      await formatter.writeToFile(result, options.output);\n      this.logger.success(`結果を ${options.output} に保存しました`);\n    } else {\n      const output = formatter.format(result);\n      this.logger.info(output);\n    }\n  }\n\n  /**\n   * コマンドのアクション設定\n   */\n  public setAction(action: (...args: any[]) => Promise<void>): void {\n    this.command.action(async (...args) => {\n      await this.executeWithErrorHandling(async () => {\n        await action(...args);\n      });\n    });\n  }\n\n  /**\n   * コマンドを取得\n   */\n  public getCommand(): Command {\n    return this.command;\n  }\n\n  /**\n   * 抽象メソッド - サブクラスで実装\n   */\n  abstract execute(...args: any[]): Promise<void>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/command-factory.ts","messages":[{"ruleId":"import/order","severity":2,"message":"There should be no empty line within import group","line":9,"column":1,"nodeType":"ImportDeclaration","endLine":9,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BaseCommand' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * コマンドファクトリー\n *\n * すべてのコマンドインスタンスを生成する中央管理クラス\n */\n\nimport { createAddCommand } from './add.js';\nimport { createAnalyzeCommand } from './analyze.js';\nimport { BaseCommand } from './base-command.js';\n\n// 既存のコマンドインポート（段階的に置き換え）\nimport { createDeleteCommand } from './delete.js';\nimport { createImportCommand } from './import.js';\nimport { createListCommand } from './list.js';\nimport { createLookupCommand } from './lookup-refactored.js';\nimport { createLookupCommand as createLookupCommandOld } from './lookup.js';\nimport { createOptimizeCommand } from './optimize.js';\nimport { performanceCommand } from './performance.js';\nimport { createSecurityCommand } from './security.js';\nimport { createSweepCommand } from './sweep.js';\nimport { createSyncCommand } from './sync.js';\nimport { createValidateCommand } from './validate.js';\n\nimport type { Command } from 'commander';\n\n// リファクタリングされたコマンド\n\nexport interface CommandConfig {\n  useRefactored?: boolean; // リファクタリング版を使用するかどうか\n}\n\nexport class CommandFactory {\n  private config: CommandConfig;\n\n  constructor(config: CommandConfig = {}) {\n    this.config = {\n      useRefactored: false, // デフォルトは既存版を使用\n      ...config,\n    };\n  }\n\n  /**\n   * すべてのコマンドを作成\n   */\n  createAllCommands(): Command[] {\n    return [\n      this.createAddCommand(),\n      this.createAnalyzeCommand(),\n      this.createDeleteCommand(),\n      this.createImportCommand(),\n      this.createListCommand(),\n      this.createLookupCommand(),\n      this.createPerformanceCommand(),\n      this.createSweepCommand(),\n      this.createSyncCommand(),\n      this.createValidateCommand(),\n      this.createOptimizeCommand(),\n      this.createSecurityCommand(),\n    ];\n  }\n\n  /**\n   * 個別コマンドの作成メソッド\n   */\n  createAddCommand(): Command {\n    return createAddCommand();\n  }\n\n  createAnalyzeCommand(): Command {\n    return createAnalyzeCommand();\n  }\n\n  createDeleteCommand(): Command {\n    return createDeleteCommand();\n  }\n\n  createImportCommand(): Command {\n    return createImportCommand();\n  }\n\n  createListCommand(): Command {\n    return createListCommand();\n  }\n\n  createLookupCommand(): Command {\n    if (this.config.useRefactored) {\n      return createLookupCommand();\n    }\n    return createLookupCommandOld();\n  }\n\n  createPerformanceCommand(): Command {\n    return performanceCommand;\n  }\n\n  createSweepCommand(): Command {\n    return createSweepCommand();\n  }\n\n  createSyncCommand(): Command {\n    return createSyncCommand();\n  }\n\n  createValidateCommand(): Command {\n    return createValidateCommand();\n  }\n\n  createOptimizeCommand(): Command {\n    return createOptimizeCommand();\n  }\n\n  createSecurityCommand(): Command {\n    return createSecurityCommand();\n  }\n\n  /**\n   * 設定の更新\n   */\n  updateConfig(config: Partial<CommandConfig>): void {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * リファクタリング進捗の取得\n   */\n  getRefactoringProgress(): {\n    total: number;\n    refactored: number;\n    percentage: number;\n    commands: Array<{ name: string; refactored: boolean }>;\n  } {\n    const commands = [\n      { name: 'add', refactored: false },\n      { name: 'analyze', refactored: false },\n      { name: 'delete', refactored: false },\n      { name: 'import', refactored: false },\n      { name: 'list', refactored: false },\n      { name: 'lookup', refactored: true },\n      { name: 'performance', refactored: false },\n      { name: 'sweep', refactored: false },\n      { name: 'sync', refactored: false },\n      { name: 'validate', refactored: false },\n      { name: 'optimize', refactored: false },\n      { name: 'security', refactored: false },\n    ];\n\n    const refactored = commands.filter(c => c.refactored).length;\n\n    return {\n      total: commands.length,\n      refactored,\n      percentage: Math.round((refactored / commands.length) * 100),\n      commands,\n    };\n  }\n}\n\n// デフォルトのファクトリーインスタンス\nexport const commandFactory = new CommandFactory();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/delete.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/edge.ts","messages":[{"ruleId":"import/order","severity":2,"message":"`../types/index.js` type import should occur before type import of `@lib/edge-computing-dns-manager.js`","line":8,"column":1,"nodeType":"ImportDeclaration","endLine":8,"endColumn":57,"fix":{"range":[240,369],"text":"import type { AnalysisResult } from '../types/index.js';\nimport type { EdgeDNSQuery } from '@lib/edge-computing-dns-manager.js';\n"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1280,1329],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1338,1378],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1387,1453],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":41,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":41,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1462,1569],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1578,1688],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":47,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":47,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1697,1794],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1803,1817],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":53,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":53,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1833,1876],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1883,1923],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":76,"column":30,"nodeType":null,"messageId":"insert","endLine":76,"endColumn":30,"fix":{"range":[2638,2638],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":83,"column":24,"nodeType":null,"messageId":"insert","endLine":83,"endColumn":24,"fix":{"range":[2830,2830],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":84,"column":12,"nodeType":null,"messageId":"insert","endLine":84,"endColumn":12,"fix":{"range":[2842,2842],"text":","}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":86,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":86,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2858,2904],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5207,5250],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5257,5297],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5354,5418],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":174,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":174,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5427,5472],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":175,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":175,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5481,5569],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5578,5664],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5673,5737],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5746,5797],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":183,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":183,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5806,5903],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5912,6024],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6071,6188],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6208,6237],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6293,6410],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6823,6860],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":215,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":215,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6869,6909],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6918,6969],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6978,7039],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7048,7098],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7107,7157],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7398,7433],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":231,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":231,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7518,7574],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'globalMetrics' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":234,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":234,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":237,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":237,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7711,7750],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":238,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":238,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7759,7799],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":239,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":239,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7808,7907],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":242,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":242,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7916,8011],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8020,8085],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8094,8184],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8193,8302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":366,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":366,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11794,11812],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":380,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":380,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12340,12381],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12388,12428],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12435,12486],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12493,12548],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12555,12615],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12622,12677],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":386,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":386,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12684,12769],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":389,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":389,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12776,12834],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12841,12899],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":391,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":391,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12906,13029],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":404,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":404,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13281,13327],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13334,13374],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13557,13628],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14074,14114],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":429,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":429,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14121,14161],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14206,14333],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":451,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":451,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14666,14717],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":452,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":452,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14724,14764],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":457,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":457,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14883,14920],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":458,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":458,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14927,15020],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":461,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":461,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15027,15118],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15125,15232],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":468,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":468,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15240,15279],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":469,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":469,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15286,15352],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":470,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":470,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15359,15462],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":473,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":473,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15469,15575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":476,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":476,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15582,15688],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":66,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import EdgeComputingDNSManager from '@lib/edge-computing-dns-manager.js';\nimport { Logger } from '@lib/logger.js';\nimport { OutputFormatter } from '@lib/output-formatter.js';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport type { EdgeDNSQuery } from '@lib/edge-computing-dns-manager.js';\nimport type { AnalysisResult } from '../types/index.js';\n\nconst logger = new Logger();\n\nexport const edgeCommand = new Command('edge')\n  .description('エッジコンピューティングDNS管理')\n  .option('-v, --verbose', '詳細な出力を有効にする', false)\n  .option('-f, --format <type>', '出力形式 (json/table/text)', 'table')\n  .option('--location <id>', '特定のエッジロケーションを使用', '')\n  .option('--disable-ai', 'AI予測機能を無効にする', false)\n  .option('--disable-prefetch', 'プリフェッチを無効にする', false);\n\n// エッジロケーション一覧表示\nedgeCommand\n  .command('locations')\n  .description('利用可能なエッジロケーションを表示')\n  .option('-s, --stats', '統計情報を含める', false)\n  .action(async options => {\n    try {\n      const manager = new EdgeComputingDNSManager();\n\n      logger.info('エッジロケーション情報を取得中...');\n\n      const locations = manager.getEdgeLocationStats();\n      const formatter = new OutputFormatter();\n\n      if (options.stats) {\n        const globalMetrics = manager.getGlobalMetrics();\n        const aiStats = manager.getAIPredictionStats();\n\n        console.log(chalk.bold('\\n🌐 グローバルエッジネットワーク統計'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(`総クエリ数: ${chalk.yellow(globalMetrics.totalQueries)}`);\n        console.log(\n          `平均応答時間: ${chalk.yellow(globalMetrics.averageResponseTime.toFixed(2))}ms`\n        );\n        console.log(\n          `エッジ利用率: ${chalk.yellow((globalMetrics.edgeUtilization * 100).toFixed(1))}%`\n        );\n        console.log(\n          `AI予測精度: ${chalk.yellow((aiStats.accuracy * 100).toFixed(1))}%`\n        );\n        console.log();\n      }\n\n      console.log(chalk.bold('🗺️ エッジロケーション一覧'));\n      console.log(chalk.gray('─'.repeat(50)));\n\n      const tableData = locations.map(location => ({\n        ID: location.id,\n        地域: location.region,\n        都市: `${location.city}, ${location.country}`,\n        容量: location.capacity,\n        負荷: location.load,\n        利用率: `${(location.utilization * 100).toFixed(1)}%`,\n        遅延: `${location.latency}ms`,\n        状態: location.isActive\n          ? chalk.green('✓ アクティブ')\n          : chalk.red('✗ 非アクティブ'),\n        最終確認: location.lastHealthCheck.toLocaleString('ja-JP'),\n      }));\n\n      const analysisResult: AnalysisResult = {\n        summary: {\n          totalRecords: tableData.length,\n          highRiskCount: 0,\n          mediumRiskCount: 0,\n          lowRiskCount: 0,\n          averageRiskScore: 0\n        },\n        records: tableData.map(data => ({\n          domain: data.ID,\n          riskScore: 0,\n          riskLevel: 'low' as const,\n          riskFactors: [],\n          details: data\n        }))\n      };\n      console.log(formatter.format(analysisResult));\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error(\n        'エッジロケーション情報の取得に失敗しました',\n        error as Error\n      );\n      process.exit(1);\n    }\n  });\n\n// DNS解決実行\nedgeCommand\n  .command('resolve <domain>')\n  .description('エッジコンピューティングを使用してDNS解決を実行')\n  .option('-t, --type <type>', 'DNSレコードタイプ', 'A')\n  .option('-c, --client-ip <ip>', 'クライアントIP', '203.0.113.1')\n  .option(\n    '-l, --location <location>',\n    'クライアントロケーション',\n    'Tokyo,Japan'\n  )\n  .option('-p, --priority <priority>', 'クエリ優先度', 'medium')\n  .option('-r, --repeat <count>', '実行回数', '1')\n  .option('-s, --stats', '統計情報を表示', false)\n  .action(async (domain, options) => {\n    try {\n      const manager = new EdgeComputingDNSManager({\n        aiPredictor: {\n          modelType: 'neural-network',\n          trainingData: {\n            queryPatterns: [],\n            responsePatterns: [],\n          },\n          predictionAccuracy: 0.85,\n          lastTrainingTime: new Date(),\n          isActive: !options.disableAi,\n        },\n        cachePolicy: {\n          ttl: 300,\n          maxSize: 1000000,\n          evictionPolicy: 'ai-optimized',\n          compressionEnabled: true,\n          prefetchEnabled: !options.disablePrefetch,\n          predictiveInvalidation: true,\n        },\n      });\n\n      const [city, country] = options.location.split(',');\n      const repeatCount = parseInt(options.repeat) || 1;\n\n      logger.info(`エッジDNS解決を実行中: ${domain} (${repeatCount}回)`);\n\n      const queries: EdgeDNSQuery[] = Array.from(\n        { length: repeatCount },\n        (_, i) => ({\n          id: `edge-resolve-${Date.now()}-${i}`,\n          domain,\n          type: options.type.toUpperCase(),\n          clientIP: options.clientIp,\n          clientLocation: {\n            country: country?.trim() || 'Japan',\n            city: city?.trim() || 'Tokyo',\n            coordinates: {\n              latitude: 35.6762,\n              longitude: 139.6503,\n            },\n          },\n          timestamp: new Date(),\n          priority: options.priority,\n          context: {\n            requestSource: 'cli-command',\n            expectedResponseTime: 100,\n          },\n        })\n      );\n\n      const responses = await Promise.all(\n        queries.map(query => manager.processEdgeDNSQuery(query))\n      );\n\n      // 結果の表示\n      console.log(chalk.bold('\\n🚀 エッジDNS解決結果'));\n      console.log(chalk.gray('─'.repeat(50)));\n\n      responses.forEach((response, index) => {\n        console.log(chalk.bold(`\\n📋 クエリ ${index + 1}/${repeatCount}`));\n        console.log(`ドメイン: ${chalk.yellow(domain)}`);\n        console.log(\n          `レコードタイプ: ${chalk.yellow(options.type.toUpperCase())}`\n        );\n        console.log(\n          `エッジロケーション: ${chalk.green(response.edgeLocationId)}`\n        );\n        console.log(`処理時間: ${chalk.yellow(response.processingTime)}ms`);\n        console.log(`ソース: ${chalk.blue(response.source)}`);\n        console.log(\n          `ネットワーク遅延: ${chalk.yellow(response.metadata.networkLatency)}ms`\n        );\n        console.log(\n          `圧縮率: ${chalk.yellow((response.metadata.compressionRatio * 100).toFixed(1))}%`\n        );\n\n        if (response.prediction) {\n          console.log(\n            `AI予測信頼度: ${chalk.magenta((response.prediction.confidence * 100).toFixed(1))}%`\n          );\n        }\n\n        console.log('\\n📝 DNSレコード:');\n        response.records.forEach(record => {\n          console.log(\n            `  ${record.name} ${record.ttl} ${record.class} ${record.type} ${record.value}`\n          );\n        });\n      });\n\n      // 統計情報の表示\n      if (options.stats || repeatCount > 1) {\n        const totalTime = responses.reduce(\n          (sum, r) => sum + r.processingTime,\n          0\n        );\n        const avgTime = totalTime / responses.length;\n        const minTime = Math.min(...responses.map(r => r.processingTime));\n        const maxTime = Math.max(...responses.map(r => r.processingTime));\n\n        console.log(chalk.bold('\\n📊 統計情報'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(`総実行時間: ${chalk.yellow(totalTime)}ms`);\n        console.log(`平均応答時間: ${chalk.yellow(avgTime.toFixed(2))}ms`);\n        console.log(`最小応答時間: ${chalk.yellow(minTime)}ms`);\n        console.log(`最大応答時間: ${chalk.yellow(maxTime)}ms`);\n\n        const locationCounts = responses.reduce(\n          (acc, r) => {\n            acc[r.edgeLocationId] = (acc[r.edgeLocationId] || 0) + 1;\n            return acc;\n          },\n          {} as Record<string, number>\n        );\n\n        console.log('\\n🌍 エッジロケーション使用状況:');\n        Object.entries(locationCounts).forEach(([locationId, count]) => {\n          console.log(`  ${locationId}: ${chalk.yellow(count)}回`);\n        });\n\n        const globalMetrics = manager.getGlobalMetrics();\n        const aiStats = manager.getAIPredictionStats();\n\n        console.log(chalk.bold('\\n🤖 AI予測統計'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(\n          `AI予測有効: ${aiStats.isActive ? chalk.green('✓') : chalk.red('✗')}`\n        );\n        console.log(\n          `予測精度: ${chalk.yellow((aiStats.accuracy * 100).toFixed(1))}%`\n        );\n        console.log(`予測クエリ数: ${chalk.yellow(aiStats.predictedQueries)}`);\n        console.log(\n          `成功した予測: ${chalk.yellow(aiStats.successfulPredictions)}`\n        );\n        console.log(\n          `予測成功率: ${chalk.yellow((aiStats.predictionSuccessRate * 100).toFixed(1))}%`\n        );\n      }\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('エッジDNS解決に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// パフォーマンステスト\nedgeCommand\n  .command('benchmark')\n  .description('エッジコンピューティングDNSのパフォーマンステストを実行')\n  .option(\n    '-d, --domains <domains>',\n    'テスト対象ドメイン（カンマ区切り）',\n    'example.com,google.com,github.com'\n  )\n  .option('-c, --concurrent <count>', '並行実行数', '10')\n  .option('-r, --requests <count>', '総リクエスト数', '100')\n  .option('-t, --timeout <ms>', 'タイムアウト時間', '5000')\n  .action(async options => {\n    try {\n      const manager = new EdgeComputingDNSManager();\n\n      const domains = options.domains.split(',').map((d: string) => d.trim());\n      const concurrentCount = parseInt(options.concurrent) || 10;\n      const totalRequests = parseInt(options.requests) || 100;\n      const timeout = parseInt(options.timeout) || 5000;\n\n      logger.info(\n        `エッジDNSベンチマークを開始: ${totalRequests}リクエスト, ${concurrentCount}並行`\n      );\n\n      const startTime = Date.now();\n      const results: Array<{\n        success: boolean;\n        time: number;\n        domain: string;\n        edgeLocation: string;\n      }> = [];\n\n      // バッチ処理でリクエストを実行\n      const batches = Math.ceil(totalRequests / concurrentCount);\n\n      for (let batch = 0; batch < batches; batch++) {\n        const batchStart = batch * concurrentCount;\n        const batchEnd = Math.min(batchStart + concurrentCount, totalRequests);\n        const batchSize = batchEnd - batchStart;\n\n        const batchPromises = Array.from(\n          { length: batchSize },\n          async (_, i) => {\n            const domain = domains[(batchStart + i) % domains.length];\n            const queryStartTime = Date.now();\n\n            try {\n              const query: EdgeDNSQuery = {\n                id: `benchmark-${batch}-${i}`,\n                domain,\n                type: 'A',\n                clientIP: '203.0.113.1',\n                clientLocation: {\n                  country: 'Japan',\n                  city: 'Tokyo',\n                  coordinates: { latitude: 35.6762, longitude: 139.6503 },\n                },\n                timestamp: new Date(),\n                priority: 'medium',\n                context: {\n                  requestSource: 'benchmark',\n                  expectedResponseTime: 100,\n                },\n              };\n\n              const response = await Promise.race([\n                manager.processEdgeDNSQuery(query),\n                new Promise<never>((_, reject) =>\n                  setTimeout(() => reject(new Error('Timeout')), timeout)\n                ),\n              ]);\n\n              const queryTime = Date.now() - queryStartTime;\n\n              return {\n                success: true,\n                time: queryTime,\n                domain,\n                edgeLocation: response.edgeLocationId,\n              };\n            } catch (error) {\n              return {\n                success: false,\n                time: Date.now() - queryStartTime,\n                domain,\n                edgeLocation: 'none',\n              };\n            }\n          }\n        );\n\n        const batchResults = await Promise.all(batchPromises);\n        results.push(...batchResults);\n\n        // 進捗表示\n        const progress = (((batch + 1) / batches) * 100).toFixed(1);\n        process.stdout.write(\n          `\\r進捗: ${progress}% (${batchEnd}/${totalRequests})`\n        );\n      }\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      console.log('\\n');\n\n      // 結果の分析\n      const successfulResults = results.filter(r => r.success);\n      const failedResults = results.filter(r => !r.success);\n\n      const successRate = (successfulResults.length / results.length) * 100;\n      const avgResponseTime =\n        successfulResults.reduce((sum, r) => sum + r.time, 0) /\n        successfulResults.length;\n      const minResponseTime = Math.min(...successfulResults.map(r => r.time));\n      const maxResponseTime = Math.max(...successfulResults.map(r => r.time));\n\n      // 結果の表示\n      console.log(chalk.bold('\\n🏆 ベンチマーク結果'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(`総実行時間: ${chalk.yellow(totalTime)}ms`);\n      console.log(`総リクエスト数: ${chalk.yellow(totalRequests)}`);\n      console.log(`成功率: ${chalk.green(successRate.toFixed(2))}%`);\n      console.log(`失敗数: ${chalk.red(failedResults.length)}`);\n      console.log(\n        `平均応答時間: ${chalk.yellow(avgResponseTime.toFixed(2))}ms`\n      );\n      console.log(`最小応答時間: ${chalk.yellow(minResponseTime)}ms`);\n      console.log(`最大応答時間: ${chalk.yellow(maxResponseTime)}ms`);\n      console.log(\n        `スループット: ${chalk.yellow((successfulResults.length / (totalTime / 1000)).toFixed(2))} req/sec`\n      );\n\n      // エッジロケーション使用状況\n      const locationCounts = successfulResults.reduce(\n        (acc, r) => {\n          acc[r.edgeLocation] = (acc[r.edgeLocation] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      );\n\n      console.log(chalk.bold('\\n🌍 エッジロケーション使用状況'));\n      console.log(chalk.gray('─'.repeat(50)));\n      Object.entries(locationCounts).forEach(([locationId, count]) => {\n        const percentage = ((count / successfulResults.length) * 100).toFixed(\n          1\n        );\n        console.log(`${locationId}: ${chalk.yellow(count)}回 (${percentage}%)`);\n      });\n\n      // ドメイン別統計\n      const domainStats = domains.map(domain => {\n        const domainResults = successfulResults.filter(\n          r => r.domain === domain\n        );\n        const domainAvgTime =\n          domainResults.reduce((sum, r) => sum + r.time, 0) /\n          domainResults.length;\n        return {\n          domain,\n          count: domainResults.length,\n          avgTime: domainAvgTime || 0,\n        };\n      });\n\n      console.log(chalk.bold('\\n📊 ドメイン別統計'));\n      console.log(chalk.gray('─'.repeat(50)));\n      domainStats.forEach(stat => {\n        console.log(\n          `${stat.domain}: ${chalk.yellow(stat.count)}回, 平均 ${chalk.yellow(stat.avgTime.toFixed(2))}ms`\n        );\n      });\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('ベンチマークの実行に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// 設定表示\nedgeCommand\n  .command('config')\n  .description('エッジコンピューティングDNSの設定を表示')\n  .action(async () => {\n    try {\n      const manager = new EdgeComputingDNSManager();\n\n      console.log(chalk.bold('\\n⚙️  エッジコンピューティングDNS設定'));\n      console.log(chalk.gray('─'.repeat(50)));\n\n      const aiStats = manager.getAIPredictionStats();\n      const globalMetrics = manager.getGlobalMetrics();\n\n      console.log(chalk.bold('🤖 AI予測設定'));\n      console.log(\n        `状態: ${aiStats.isActive ? chalk.green('有効') : chalk.red('無効')}`\n      );\n      console.log(\n        `予測精度: ${chalk.yellow((aiStats.accuracy * 100).toFixed(1))}%`\n      );\n      console.log(\n        `最終トレーニング: ${chalk.yellow(aiStats.lastTrainingTime.toLocaleString('ja-JP'))}`\n      );\n\n      console.log(chalk.bold('\\n📊 システム統計'));\n      console.log(`総クエリ数: ${chalk.yellow(globalMetrics.totalQueries)}`);\n      console.log(\n        `平均応答時間: ${chalk.yellow(globalMetrics.averageResponseTime.toFixed(2))}ms`\n      );\n      console.log(\n        `キャッシュヒット率: ${chalk.yellow((globalMetrics.cacheHitRate * 100).toFixed(1))}%`\n      );\n      console.log(\n        `エッジ利用率: ${chalk.yellow((globalMetrics.edgeUtilization * 100).toFixed(1))}%`\n      );\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('設定の表示に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\nexport default edgeCommand;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/import.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/list.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/lookup-refactored.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DNSRecordType' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":149,"column":26,"nodeType":null,"messageId":"insert","endLine":149,"endColumn":26,"fix":{"range":[3695,3695],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎·········`","line":157,"column":23,"nodeType":null,"messageId":"insert","endLine":157,"endColumn":23,"fix":{"range":[3913,3913],"text":"\n         "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":160,"column":42,"nodeType":null,"messageId":"insert","endLine":160,"endColumn":42,"fix":{"range":[4145,4145],"text":","}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎········`","line":162,"column":17,"nodeType":null,"messageId":"insert","endLine":162,"endColumn":17,"fix":{"range":[4171,4171],"text":"\n        "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `········` with `··········`","line":163,"column":1,"nodeType":null,"messageId":"replace","endLine":163,"endColumn":9,"fix":{"range":[4173,4181],"text":"          "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":164,"column":1,"nodeType":null,"messageId":"insert","endLine":164,"endColumn":1,"fix":{"range":[4189,4189],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `··`","line":165,"column":9,"nodeType":null,"messageId":"insert","endLine":165,"endColumn":9,"fix":{"range":[4233,4233],"text":"  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `········` with `··········`","line":166,"column":1,"nodeType":null,"messageId":"replace","endLine":166,"endColumn":9,"fix":{"range":[4261,4269],"text":"          "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `details:·{·records·}` with `··details:·{·records·},`","line":167,"column":9,"nodeType":null,"messageId":"replace","endLine":167,"endColumn":29,"fix":{"range":[4299,4319],"text":"  details: { records },"}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `······}]` with `········},⏎······],`","line":168,"column":1,"nodeType":null,"messageId":"replace","endLine":168,"endColumn":9,"fix":{"range":[4320,4328],"text":"        },\n      ],"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":215,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":215,"endColumn":36}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":10,"fixableWarningCount":0,"source":"/**\n * lookupコマンド - DNS解決を実行して結果を表示（リファクタリング版）\n */\n\nimport { DNSResolver } from '../lib/dns-resolver.js';\nimport { RiskCalculator } from '../lib/risk-calculator.js';\nimport { validateRecordType, validateDNSServer } from '../lib/validators.js';\n\nimport { BaseCommand } from './base-command.js';\n\nimport type {\n  DNSRecordType,\n  IDNSRecord,\n  OutputFormat,\n  AnalysisResult,\n} from '../types/index.js';\n\ninterface LookupOptions {\n  type?: string;\n  format?: string;\n  output?: string;\n  timeout?: string;\n  nameserver?: string;\n  verbose?: boolean;\n  json?: boolean;\n  quiet?: boolean;\n  colors?: boolean;\n  analyze?: boolean;\n}\n\nexport class LookupCommand extends BaseCommand {\n  private resolver!: DNSResolver;\n  private riskCalculator!: RiskCalculator;\n\n  constructor() {\n    super('lookup', 'DNS解決を実行して結果を表示');\n    this.setupCommand();\n  }\n\n  private setupCommand(): void {\n    this.command\n      .alias('resolve')\n      .argument('<domain>', '解決するドメイン名')\n      .option(\n        '-t, --type <type>',\n        'レコードタイプ (A, AAAA, CNAME, MX, TXT, NS, SOA, SRV, PTR)',\n        'A'\n      )\n      .option(\n        '-f, --format <format>',\n        '出力形式 (table, json, csv, text)',\n        'table'\n      )\n      .option('--timeout <ms>', 'タイムアウト (ミリ秒)', '5000')\n      .option('-n, --nameserver <server>', 'カスタムネームサーバー')\n      .option('-a, --analyze', 'リスク分析を実行');\n\n    // 出力オプションを追加\n    this.addOutputOptions();\n\n    // アクションを設定\n    this.setAction(this.execute.bind(this));\n  }\n\n  async execute(domain: string, options: LookupOptions): Promise<void> {\n    // Loggerを初期化\n    this.initLogger(options);\n\n    // バリデーション\n    this.validateDomain(domain);\n    const recordType = validateRecordType(options.type || 'A');\n    const timeout = this.validateTimeout(options.timeout);\n    const format = this.validateOutputFormat(\n      options.json ? 'json' : options.format,\n      ['table', 'json', 'csv', 'text']\n    );\n\n    // カスタムネームサーバーの検証\n    if (options.nameserver) {\n      validateDNSServer(options.nameserver);\n    }\n\n    // リゾルバーの初期化\n    this.resolver = new DNSResolver({\n      timeout,\n      servers: options.nameserver ? [options.nameserver] : undefined,\n    });\n\n    if (options.analyze) {\n      this.riskCalculator = new RiskCalculator({});\n    }\n\n    // DNS解決の実行\n    const result = await this.executeWithSpinner(\n      `${domain} の ${recordType} レコードを解決中...`,\n      async () => {\n        const lookupResult = await this.resolver.resolve(domain, recordType);\n        const records = this.convertToIDNSRecords(\n          lookupResult,\n          domain,\n          recordType\n        );\n\n        // リスク分析の実行（オプション）\n        let analysisResult: AnalysisResult | undefined;\n        if (options.analyze && this.riskCalculator) {\n          analysisResult = await this.analyzeRecords(domain, records);\n        }\n\n        return {\n          domain,\n          recordType,\n          records,\n          metadata: {\n            resolverUsed: options.nameserver || 'System Default',\n            queryTime: new Date().toISOString(),\n            recordCount: records.length,\n          },\n          analysis: analysisResult,\n        };\n      },\n      '解決完了',\n      '解決に失敗しました'\n    );\n\n    // 結果の表示\n    this.logger.success(\n      `${result.records.length} 件の ${recordType} レコードが見つかりました`\n    );\n\n    // 結果の出力\n    await this.outputResults(result, format as OutputFormat, options);\n  }\n\n  /**\n   * リスク分析の実行\n   */\n  private async analyzeRecords(\n    domain: string,\n    records: IDNSRecord[]\n  ): Promise<AnalysisResult> {\n    const primaryRecord = records[0] || {\n      id: domain,\n      name: domain,\n      type: 'A' as const,\n      value: 'unknown',\n      ttl: 3600,\n      created: new Date(),\n      updated: new Date()\n    };\n    const riskScore = this.riskCalculator.calculateRisk(primaryRecord);\n    const factors = riskScore.recommendations;\n\n    return {\n      summary: {\n        totalRecords: records.length,\n        highRiskCount: riskScore.level === 'high' || riskScore.level === 'critical' ? 1 : 0,\n        mediumRiskCount: riskScore.level === 'medium' ? 1 : 0,\n        lowRiskCount: riskScore.level === 'low' ? 1 : 0,\n        averageRiskScore: riskScore.total\n      },\n      records: [{\n        domain,\n        riskScore: riskScore.total,\n        riskLevel: riskScore.level,\n        riskFactors: factors,\n        details: { records }\n      }]\n    };\n  }\n\n  /**\n   * リスクレベルの判定\n   */\n  private getRiskLevel(score: number): 'low' | 'medium' | 'high' | 'critical' {\n    if (score <= 20) return 'low';\n    if (score <= 50) return 'medium';\n    if (score <= 80) return 'high';\n    return 'critical';\n  }\n\n  /**\n   * 推奨事項の生成\n   */\n  private generateRecommendations(factors: string[]): string[] {\n    const recommendations: string[] = [];\n\n    if (factors.includes('No SPF record')) {\n      recommendations.push(\n        'SPFレコードを設定してメールのなりすましを防ぎましょう'\n      );\n    }\n    if (factors.includes('No DMARC record')) {\n      recommendations.push('DMARCレコードを設定してメール認証を強化しましょう');\n    }\n    if (factors.includes('No DNSSEC')) {\n      recommendations.push('DNSSECを有効化してDNS応答の改ざんを防ぎましょう');\n    }\n    if (factors.includes('Short TTL')) {\n      recommendations.push(\n        'TTLを適切な値に設定してDNSクエリの負荷を軽減しましょう'\n      );\n    }\n    if (factors.includes('Multiple MX with same priority')) {\n      recommendations.push('MXレコードの優先度を適切に設定しましょう');\n    }\n\n    return recommendations;\n  }\n}\n\n/**\n * lookupコマンドを作成（後方互換性のため）\n */\nexport function createLookupCommand() {\n  const command = new LookupCommand();\n  return command.getCommand();\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/lookup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/optimize.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'❌·AI最適化分析でエラーが発生しました:',·` with `⏎··········'❌·AI最適化分析でエラーが発生しました:',`","line":74,"column":22,"nodeType":null,"messageId":"replace","endLine":74,"endColumn":47,"fix":{"range":[2419,2444],"text":"\n          '❌ AI最適化分析でエラーが発生しました:',"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎········`","line":75,"column":68,"nodeType":null,"messageId":"insert","endLine":75,"endColumn":68,"fix":{"range":[2512,2512],"text":"\n        "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2672,2675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2672,2675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·m.metadata?.domain·===·domain·||·` with `⏎········m.metadata?.domain·===·domain·||`","line":98,"column":11,"nodeType":null,"messageId":"replace","endLine":98,"endColumn":45,"fix":{"range":[2918,2952],"text":"\n        m.metadata?.domain === domain ||"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎·········`","line":99,"column":51,"nodeType":null,"messageId":"insert","endLine":99,"endColumn":51,"fix":{"range":[3003,3003],"text":"\n         "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":122,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":122,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3449,3452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3449,3452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'DNS解決に失敗しました',·` with `⏎········'DNS解決に失敗しました',`","line":150,"column":20,"nodeType":null,"messageId":"replace","endLine":150,"endColumn":36,"fix":{"range":[4188,4204],"text":"\n        'DNS解決に失敗しました',"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎······`","line":152,"column":19,"nodeType":null,"messageId":"insert","endLine":152,"endColumn":19,"fix":{"range":[4290,4290],"text":"\n      "}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":161,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":161,"endColumn":35},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'トラフィックパターンファイルの読み込みエラー:',·` with `⏎······'トラフィックパターンファイルの読み込みエラー:',`","line":177,"column":18,"nodeType":null,"messageId":"replace","endLine":177,"endColumn":45,"fix":{"range":[4783,4810],"text":"\n      'トラフィックパターンファイルの読み込みエラー:',"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎····`","line":178,"column":64,"nodeType":null,"messageId":"insert","endLine":178,"endColumn":64,"fix":{"range":[4874,4874],"text":"\n    "}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4963,4966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4963,4966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":196,"column":70,"nodeType":null,"messageId":"insert","endLine":196,"endColumn":70,"fix":{"range":[5376,5376],"text":","}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":216,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":216,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5727,5730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5727,5730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5743,5746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5743,5746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":235,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":235,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6098,6101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6098,6101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6114,6117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6114,6117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":245,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":245,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6476,6500],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":255,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":255,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":255,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6675,6678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6675,6678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":255,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":255,"endColumn":56},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6738,6787],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":261,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":261,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6807,6861],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7031,7105],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7110,7225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":273,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":273,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7230,7283],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":274,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":274,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7288,7429],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7434,7582],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7587,7647],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7652,7820],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7825,7841],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":297,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":297,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":297,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7915,7918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7915,7918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":297,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":297,"endColumn":59},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7978,8027],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8047,8105],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8275,8366],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8371,8419],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8424,8520],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":316,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":316,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8525,8575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8580,8637],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":319,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":319,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8643,8683],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8688,8774],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8779,8849],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":324,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":324,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8854,8924],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8929,8992],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":327,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":327,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8998,9039],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9044,9130],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9135,9225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9231,9264],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9346,9395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9465,9505],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9580,9621],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":347,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":347,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9643,9684],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9752,9793],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":352,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":352,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9807,9847],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9904,9995],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10062,10180],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":366,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":366,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10192,10236],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":373,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":373,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":373,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10302,10305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10302,10305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":373,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":373,"endColumn":51},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10370,10415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10418,10473],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":390,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":390,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10780,10853],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":402,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":402,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11041,11076],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":405,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":405,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11174,11230],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":419,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":419,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11593,11634],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":420,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":420,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11637,11705],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":421,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":421,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11708,11772],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":422,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":422,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11775,11839],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":423,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":423,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11842,11953],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":433,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":433,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":451,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":451,"endColumn":21}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":55,"fixableErrorCount":9,"fixableWarningCount":0,"source":"/**\n * AI駆動DNS最適化コマンド\n */\n\nimport { readFileSync, existsSync } from 'fs';\n\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport { AIDNSOptimizer } from '../lib/ai-dns-optimizer.js';\nimport { CSVProcessor } from '../lib/csv-processor.js';\nimport { DNSResolver } from '../lib/dns-resolver.js';\nimport { Logger } from '../lib/logger.js';\nimport { OutputFormatter } from '../lib/output-formatter.js';\nimport { globalPerformanceMonitor } from '../lib/performance-monitor.js';\n\nimport type {\n  OptimizationContext,\n  BusinessContext,\n} from '../lib/ai-dns-optimizer.js';\n\nexport function createOptimizeCommand(): Command {\n  const command = new Command('optimize');\n\n  command\n    .description('AI駆動DNS最適化分析と提案生成')\n    .argument('<domain>', 'アナライズするドメイン')\n    .option('-f, --file <file>', 'DNS レコードファイル（CSV形式）')\n    .option('-t, --traffic-file <file>', 'トラフィックパターンファイル')\n    .option(\n      '-b, --business-context <file>',\n      'ビジネスコンテキストファイル（JSON）'\n    )\n    .option('-o, --output <file>', '結果出力ファイル')\n    .option('--format <format>', '出力形式', 'table')\n    .option('--priority <priority>', '優先度フィルタ', 'all')\n    .option('--type <type>', '提案タイプフィルタ', 'all')\n    .option('--industry <industry>', '業界指定', 'technology')\n    .option('--scale <scale>', '企業規模', 'medium')\n    .option('--budget <budget>', '予算規模', 'medium')\n    .option(\n      '--priorities <priorities>',\n      'ビジネス優先度（カンマ区切り）',\n      'performance,security,reliability,cost'\n    )\n    .option('--parallel <number>', '並列処理数', '10')\n    .option('--timeout <ms>', 'タイムアウト（ミリ秒）', '5000')\n    .option('--verbose', '詳細ログ出力')\n    .option('--dry-run', 'ドライラン（実際の変更は行わない）')\n    .action(async (domain, options) => {\n      const logger = new Logger({ verbose: options.verbose });\n\n      try {\n        logger.info('🤖 AI駆動DNS最適化分析を開始します...', { domain });\n\n        // 最適化コンテキストの構築\n        const context = await buildOptimizationContext(domain, options, logger);\n\n        // AI最適化分析の実行\n        const optimizer = new AIDNSOptimizer(logger);\n        const suggestions = await optimizer.analyzeAndOptimize(context);\n\n        // 結果のフィルタリング\n        const filteredSuggestions = filterSuggestions(suggestions, options);\n\n        // 結果の出力\n        await outputResults(filteredSuggestions, options, logger);\n\n        // サマリーの表示\n        displaySummary(filteredSuggestions, logger);\n\n        logger.info('✅ AI最適化分析が完了しました');\n      } catch (error) {\n        logger.error('❌ AI最適化分析でエラーが発生しました:', \n          error instanceof Error ? error : new Error(String(error)));\n        process.exit(1);\n      }\n    });\n\n  return command;\n}\n\n/**\n * 最適化コンテキストの構築\n */\nasync function buildOptimizationContext(\n  domain: string,\n  options: any,\n  logger: Logger\n): Promise<OptimizationContext> {\n  // DNSレコードの取得\n  const records = await getDNSRecords(domain, options, logger);\n\n  // パフォーマンスメトリクスの取得\n  const performance = globalPerformanceMonitor\n    .getMetrics()\n    .filter(\n      m => m.metadata?.domain === domain || \n        (typeof m.metadata?.domain === 'string' && m.metadata.domain.endsWith(domain))\n    );\n\n  // トラフィックパターンの取得\n  const trafficPatterns = options.trafficFile\n    ? await loadTrafficPatterns(options.trafficFile, logger)\n    : [];\n\n  // ビジネスコンテキストの構築\n  const businessContext = buildBusinessContext(options, logger);\n\n  return {\n    domain,\n    records,\n    performance,\n    trafficPatterns,\n    businessContext,\n  };\n}\n\n/**\n * DNSレコードの取得\n */\nasync function getDNSRecords(domain: string, options: any, logger: Logger) {\n  if (options.file) {\n    // CSVファイルからレコードを読み込み\n    logger.info('📄 CSVファイルからDNSレコードを読み込んでいます...', {\n      file: options.file,\n    });\n\n    const csvProcessor = new CSVProcessor({});\n    const csvData = await csvProcessor.parseAuto(options.file);\n\n    return csvData.records;\n  } else {\n    // ドメインからDNSレコードを解決\n    logger.info('🔍 DNSレコードを解決しています...', { domain });\n\n    const resolver = new DNSResolver({});\n    const measure = globalPerformanceMonitor.startMeasurement(\n      'dns',\n      'bulk_resolve'\n    );\n\n    try {\n      const result = await resolver.resolve(domain, 'A');\n      const records = result.records;\n      measure();\n      return records;\n    } catch (error) {\n      measure();\n      logger.error('DNS解決に失敗しました', \n        error instanceof Error ? error : new Error(String(error)),\n        { domain });\n      throw error;\n    }\n  }\n}\n\n/**\n * トラフィックパターンの読み込み\n */\nasync function loadTrafficPatterns(filePath: string, logger: Logger) {\n  if (!existsSync(filePath)) {\n    logger.warn('トラフィックパターンファイルが見つかりません:', filePath);\n    return [];\n  }\n\n  try {\n    const fileContent = readFileSync(filePath, 'utf-8');\n    const patterns = JSON.parse(fileContent);\n\n    logger.info('📊 トラフィックパターンを読み込みました', {\n      patterns: patterns.length,\n    });\n\n    return patterns;\n  } catch (error) {\n    logger.error('トラフィックパターンファイルの読み込みエラー:', \n      error instanceof Error ? error : new Error(String(error)));\n    return [];\n  }\n}\n\n/**\n * ビジネスコンテキストの構築\n */\nfunction buildBusinessContext(options: any, logger: Logger): BusinessContext {\n  if (options.businessContext) {\n    try {\n      const fileContent = readFileSync(options.businessContext, 'utf-8');\n      const context = JSON.parse(fileContent);\n\n      logger.info('📋 ビジネスコンテキストファイルを読み込みました');\n      return context;\n    } catch (error) {\n      logger.warn('ビジネスコンテキストファイルの読み込みエラー:', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // コマンドラインオプションからビジネスコンテキストを構築\n  const priorities = options.priorities.split(',').map((p: string) => p.trim());\n\n  return {\n    industry: options.industry,\n    scale: options.scale,\n    compliance: [], // デフォルトは空\n    budget: options.budget,\n    priorities,\n  };\n}\n\n/**\n * 提案のフィルタリング\n */\nfunction filterSuggestions(suggestions: any[], options: any) {\n  let filtered = suggestions;\n\n  // 優先度フィルタ\n  if (options.priority !== 'all') {\n    filtered = filtered.filter(s => s.priority === options.priority);\n  }\n\n  // タイプフィルタ\n  if (options.type !== 'all') {\n    filtered = filtered.filter(s => s.type === options.type);\n  }\n\n  return filtered;\n}\n\n/**\n * 結果の出力\n */\nasync function outputResults(suggestions: any[], options: any, logger: Logger) {\n  const formatter = new OutputFormatter({});\n\n  if (options.format === 'table') {\n    displayTableResults(suggestions, logger);\n  } else if (options.format === 'json') {\n    const jsonOutput = JSON.stringify(suggestions, null, 2);\n    if (options.output) {\n      await formatter.writeToFile(options.output, jsonOutput);\n    } else {\n      console.log(jsonOutput);\n    }\n  } else if (options.format === 'detailed') {\n    displayDetailedResults(suggestions, logger);\n  }\n}\n\n/**\n * テーブル形式での結果表示\n */\nfunction displayTableResults(suggestions: any[], logger: Logger) {\n  if (suggestions.length === 0) {\n    console.log(chalk.yellow('📋 最適化提案は見つかりませんでした'));\n    return;\n  }\n\n  console.log(chalk.blue.bold('\\\\n🤖 AI駆動DNS最適化提案\\\\n'));\n\n  suggestions.forEach((suggestion, index) => {\n    const priorityColor = getPriorityColor(suggestion.priority);\n    const typeIcon = getTypeIcon(suggestion.type);\n\n    console.log(chalk.white(`${index + 1}. ${typeIcon} ${suggestion.title}`));\n    console.log(\n      chalk.gray(\n        `   優先度: ${priorityColor(suggestion.priority.toUpperCase())}`\n      )\n    );\n    console.log(chalk.gray(`   分類: ${suggestion.type}`));\n    console.log(\n      chalk.gray(\n        `   影響: パフォーマンス+${suggestion.impact.performance}, セキュリティ+${suggestion.impact.security}`\n      )\n    );\n    console.log(\n      chalk.gray(\n        `   難易度: ${suggestion.implementation.difficulty} (${suggestion.implementation.estimatedTime})`\n      )\n    );\n    console.log(chalk.gray(`   説明: ${suggestion.description}`));\n    console.log(\n      chalk.gray(\n        `   対象: ${suggestion.affectedRecords.slice(0, 3).join(', ')}${suggestion.affectedRecords.length > 3 ? '...' : ''}`\n      )\n    );\n    console.log('');\n  });\n}\n\n/**\n * 詳細結果の表示\n */\nfunction displayDetailedResults(suggestions: any[], logger: Logger) {\n  if (suggestions.length === 0) {\n    console.log(chalk.yellow('📋 最適化提案は見つかりませんでした'));\n    return;\n  }\n\n  console.log(chalk.blue.bold('\\\\n🤖 AI駆動DNS最適化提案（詳細）\\\\n'));\n\n  suggestions.forEach((suggestion, index) => {\n    const priorityColor = getPriorityColor(suggestion.priority);\n    const typeIcon = getTypeIcon(suggestion.type);\n\n    console.log(\n      chalk.white.bold(`${index + 1}. ${typeIcon} ${suggestion.title}`)\n    );\n    console.log(chalk.gray(`ID: ${suggestion.id}`));\n    console.log(\n      chalk.gray(`優先度: ${priorityColor(suggestion.priority.toUpperCase())}`)\n    );\n    console.log(chalk.gray(`分類: ${suggestion.type}`));\n    console.log(chalk.gray(`説明: ${suggestion.description}`));\n\n    console.log(chalk.blue('\\\\n📊 影響度分析:'));\n    console.log(\n      chalk.gray(`  パフォーマンス: ${suggestion.impact.performance}/10`)\n    );\n    console.log(chalk.gray(`  セキュリティ: ${suggestion.impact.security}/10`));\n    console.log(chalk.gray(`  信頼性: ${suggestion.impact.reliability}/10`));\n    console.log(chalk.gray(`  コスト: ${suggestion.impact.cost}/10`));\n\n    console.log(chalk.green('\\\\n🔧 実装ガイド:'));\n    console.log(\n      chalk.gray(`  難易度: ${suggestion.implementation.difficulty}`)\n    );\n    console.log(\n      chalk.gray(`  予想時間: ${suggestion.implementation.estimatedTime}`)\n    );\n\n    console.log(chalk.gray('  手順:'));\n    suggestion.implementation.steps.forEach((step: string, i: number) => {\n      console.log(chalk.gray(`    ${i + 1}. ${step}`));\n    });\n\n    if (suggestion.implementation.risks.length > 0) {\n      console.log(chalk.yellow('  ⚠️  リスク:'));\n      suggestion.implementation.risks.forEach((risk: string) => {\n        console.log(chalk.gray(`    • ${risk}`));\n      });\n    }\n\n    console.log(chalk.cyan('\\\\n🎯 対象レコード:'));\n    suggestion.affectedRecords.forEach((record: string) => {\n      console.log(chalk.gray(`  • ${record}`));\n    });\n\n    console.log(chalk.magenta('\\\\n📋 根拠:'));\n    if (suggestion.evidence.metrics.length > 0) {\n      console.log(\n        chalk.gray(`  メトリクス: ${suggestion.evidence.metrics.length}件`)\n      );\n    }\n    if (suggestion.evidence.riskFactors.length > 0) {\n      console.log(\n        chalk.gray(\n          `  リスク要因: ${suggestion.evidence.riskFactors.join(', ')}`\n        )\n      );\n    }\n\n    console.log('\\\\n' + '='.repeat(80) + '\\\\n');\n  });\n}\n\n/**\n * サマリーの表示\n */\nfunction displaySummary(suggestions: any[], logger: Logger) {\n  if (suggestions.length === 0) return;\n\n  console.log(chalk.blue.bold('📈 最適化提案サマリー'));\n  console.log(chalk.gray(`総提案数: ${suggestions.length}`));\n\n  // 優先度別集計\n  const priorityCount = suggestions.reduce(\n    (acc, s) => {\n      acc[s.priority] = (acc[s.priority] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  Object.entries(priorityCount).forEach(([priority, count]) => {\n    const color = getPriorityColor(priority);\n    console.log(chalk.gray(`  ${color(priority.toUpperCase())}: ${count}件`));\n  });\n\n  // タイプ別集計\n  const typeCount = suggestions.reduce(\n    (acc, s) => {\n      acc[s.type] = (acc[s.type] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  console.log(chalk.gray('\\\\n分類別:'));\n  Object.entries(typeCount).forEach(([type, count]) => {\n    const icon = getTypeIcon(type);\n    console.log(chalk.gray(`  ${icon} ${type}: ${count}件`));\n  });\n\n  // 総合影響度\n  const totalImpact = suggestions.reduce(\n    (acc, s) => ({\n      performance: acc.performance + s.impact.performance,\n      security: acc.security + s.impact.security,\n      reliability: acc.reliability + s.impact.reliability,\n      cost: acc.cost + s.impact.cost,\n    }),\n    { performance: 0, security: 0, reliability: 0, cost: 0 }\n  );\n\n  console.log(chalk.gray('\\\\n期待される総合効果:'));\n  console.log(chalk.gray(`  パフォーマンス向上: +${totalImpact.performance}`));\n  console.log(chalk.gray(`  セキュリティ向上: +${totalImpact.security}`));\n  console.log(chalk.gray(`  信頼性向上: +${totalImpact.reliability}`));\n  console.log(\n    chalk.gray(\n      `  コスト効果: ${totalImpact.cost >= 0 ? '+' : ''}${totalImpact.cost}`\n    )\n  );\n}\n\n/**\n * 優先度の色を取得\n */\nfunction getPriorityColor(priority: string) {\n  switch (priority) {\n    case 'critical':\n      return chalk.red.bold;\n    case 'high':\n      return chalk.red;\n    case 'medium':\n      return chalk.yellow;\n    case 'low':\n      return chalk.green;\n    default:\n      return chalk.gray;\n  }\n}\n\n/**\n * タイプのアイコンを取得\n */\nfunction getTypeIcon(type: string) {\n  switch (type) {\n    case 'performance':\n      return '⚡';\n    case 'security':\n      return '🔒';\n    case 'reliability':\n      return '🛡️';\n    case 'cost':\n      return '💰';\n    case 'best_practice':\n      return '✨';\n    default:\n      return '📋';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/performance.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2683,2732],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4202,4248],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4251,4291],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4294,4353],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4356,4370],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":167,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":167,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4374,4408],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":168,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":168,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4411,4479],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":169,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":169,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4482,4557],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4560,4651],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":173,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":173,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4654,4740],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":176,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":176,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4743,4757],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4760,4800],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":178,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":178,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4803,4817],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":180,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":180,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4821,4859],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":181,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":181,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4862,4971],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4974,5083],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5086,5199],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":190,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":190,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5202,5216],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5240,5281],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":195,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":195,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5338,5412],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5417,5431],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":199,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":199,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5439,5479],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":200,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":200,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5482,5522],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":202,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":202,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5575,5660],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":205,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":205,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5663,5758],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5761,5881],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5884,5971],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5974,5988],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":217,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":217,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6012,6053],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":235,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":235,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6544,6558],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":236,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":236,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6561,6596],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":249,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":249,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6931,6945],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":250,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":250,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6948,6985],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6999,7013],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7016,7052],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":255,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":255,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7055,7095],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7159,7254],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7311,7358],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8076,8120],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":300,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":300,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8123,8163],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8186,8233],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8236,8250],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8253,8295],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8298,8332],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":307,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":307,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8335,8362],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8365,8393],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8396,8421],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8874,8913],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8916,8956],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8959,9065],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9068,9082],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9085,9185],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/security.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OutputFormatter' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3354,3357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3354,3357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":159,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":159,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4296,4299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4296,4299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":187,"column":72,"nodeType":null,"messageId":"insert","endLine":187,"endColumn":72,"fix":{"range":[5156,5156],"text":","}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":204,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":204,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5532,5535],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5532,5535],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":225,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":225,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[5999,6086],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":228,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":228,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6091,6147],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":229,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":229,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6152,6209],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6214,6230],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6463,6466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6463,6466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":266,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":266,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6883,6886],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6883,6886],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7235,7259],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":291,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":291,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":291,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":291,"endColumn":63},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":293,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":293,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7585,7629],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7649,7709],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7869,7940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7945,7997],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8002,8097],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8102,8159],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8164,8220],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":310,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":310,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8225,8320],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8325,8341],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":320,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":320,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":320,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":320,"endColumn":66},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8481,8525],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":326,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":326,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8545,8617],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":334,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":334,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8777,8853],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8858,8902],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":336,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":336,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8907,8956],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8961,9053],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9058,9112],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":341,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":341,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9117,9170],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9175,9267],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9273,9312],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9379,9415],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":350,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":350,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9491,9537],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":355,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":355,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9622,9658],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9735,9781],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":362,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":362,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9866,9907],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":364,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":364,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9984,10030],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10052,10092],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":369,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":369,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10097,10133],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":371,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":371,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10199,10242],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":374,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":374,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10256,10292],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":376,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":376,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10357,10400],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":379,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":379,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10414,10448],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10517,10561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10575,10615],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":385,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":385,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10620,10710],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":388,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":388,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10715,10842],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10847,10958],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":398,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":398,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10963,11080],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":404,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":404,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11086,11130],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":411,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":411,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":411,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":411,"endColumn":65},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11271,11315],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":417,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":417,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11335,11397],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11602,11639],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":431,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":431,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11755,11828],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":443,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":443,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12027,12066],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":446,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":446,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12170,12226],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":453,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":453,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12357,12424],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":460,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":460,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12537,12575],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":464,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":464,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12739,12875],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":475,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":475,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used. Allowed unused args must match /^_/u.","line":478,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":478,"endColumn":9},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":482,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":482,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13066,13111],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":483,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":483,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13114,13169],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":484,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":484,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13172,13223],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":485,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":485,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13226,13291],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":488,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":488,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13329,13368],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":492,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":492,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13562,13635],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":500,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":500,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":503,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":503,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13779,13782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13779,13782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":504,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13797,13800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13797,13800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":507,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":507,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13825,13881],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":508,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":508,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13884,13940],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":522,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":522,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14313,14433],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'監視中にエラーが発生しました:',·` with `⏎········'監視中にエラーが発生しました:',`","line":530,"column":20,"nodeType":null,"messageId":"replace","endLine":530,"endColumn":39,"fix":{"range":[14539,14558],"text":"\n        '監視中にエラーが発生しました:',"}},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `⏎······`","line":531,"column":66,"nodeType":null,"messageId":"insert","endLine":531,"endColumn":66,"fix":{"range":[14624,14624],"text":"\n      "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":537,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":537,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14734,14786],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":540,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":540,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14869,14909],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":551,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":551,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":553,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":553,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15091,15094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15091,15094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":577,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":577,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":595,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":595,"endColumn":27}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":74,"fixableErrorCount":3,"fixableWarningCount":0,"source":"/**\n * DNS セキュリティ分析コマンド\n */\n\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\n\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nimport { CSVProcessor } from '../lib/csv-processor.js';\nimport { DNSResolver } from '../lib/dns-resolver.js';\nimport { DNSSecurityAnalyzer } from '../lib/dns-security-analyzer.js';\nimport { Logger } from '../lib/logger.js';\nimport { OutputFormatter } from '../lib/output-formatter.js';\n\nimport type { SecurityThreat } from '../lib/dns-security-analyzer.js';\n\nexport function createSecurityCommand(): Command {\n  const command = new Command('security');\n\n  command\n    .description('DNS セキュリティ脅威検出・分析')\n    .argument('[domain]', 'アナライズするドメイン')\n    .option('-f, --file <file>', 'ドメインリストファイル（1行に1ドメイン）')\n    .option('-r, --records <file>', 'DNS レコードファイル（CSV形式）')\n    .option('-o, --output <file>', '結果出力ファイル')\n    .option('--format <format>', '出力形式', 'table')\n    .option('--severity <severity>', '重要度フィルタ', 'all')\n    .option('--type <type>', '脅威タイプフィルタ', 'all')\n    .option('--confidence <threshold>', '信頼度閾値', '70')\n    .option('--real-time', 'リアルタイム監視モード')\n    .option('--monitor-interval <ms>', '監視間隔（ミリ秒）', '60000')\n    .option('--export-threats', '脅威データをエクスポート')\n    .option('--verbose', '詳細ログ出力')\n    .option('--dry-run', 'ドライラン（実際の検出のみ）')\n    .action(async (domain, options) => {\n      const logger = new Logger({ verbose: options.verbose });\n\n      try {\n        logger.info('🛡️  DNS セキュリティ脅威検出を開始します...');\n\n        // 分析対象ドメインの準備\n        const domains = await prepareDomains(domain, options, logger);\n\n        // DNS レコードの取得\n        const records = await getDNSRecords(domains, options, logger);\n\n        // セキュリティ分析の実行\n        const analyzer = new DNSSecurityAnalyzer(logger, {\n          threatDetection: {\n            enabledAnalyzers: [\n              'malware',\n              'phishing',\n              'typosquatting',\n              'dga',\n              'fastflux',\n              'dns_hijacking',\n              'cache_poisoning',\n              'subdomain_takeover',\n            ],\n            confidenceThreshold: parseInt(options.confidence),\n            realTimeMonitoring: options.realTime,\n          },\n        });\n\n        // 脅威イベントリスナーの設定\n        setupThreatListeners(analyzer, logger, options);\n\n        // 脅威分析の実行\n        const threats = await analyzer.analyzeSecurityThreats(domains, records);\n\n        // 結果のフィルタリング\n        const filteredThreats = filterThreats(threats, options);\n\n        // 結果の出力\n        await outputResults(filteredThreats, options, logger);\n\n        // 統計情報の表示\n        displayStatistics(analyzer, filteredThreats, logger);\n\n        // リアルタイム監視モード\n        if (options.realTime) {\n          await startRealTimeMonitoring(\n            analyzer,\n            domains,\n            records,\n            options,\n            logger\n          );\n        }\n\n        // 脅威データのエクスポート\n        if (options.exportThreats) {\n          await exportThreatData(analyzer, options, logger);\n        }\n\n        logger.info('✅ DNS セキュリティ脅威検出が完了しました');\n      } catch (error) {\n        logger.error(\n          '❌ DNS セキュリティ脅威検出でエラーが発生しました:',\n          error instanceof Error ? error : new Error(String(error))\n        );\n        process.exit(1);\n      }\n    });\n\n  return command;\n}\n\n/**\n * 分析対象ドメインの準備\n */\nasync function prepareDomains(\n  domain: string | undefined,\n  options: any,\n  logger: Logger\n): Promise<string[]> {\n  const domains: string[] = [];\n\n  if (domain) {\n    domains.push(domain);\n  }\n\n  if (options.file) {\n    if (!existsSync(options.file)) {\n      throw new Error(\n        `ドメインリストファイルが見つかりません: ${options.file}`\n      );\n    }\n\n    const fileContent = readFileSync(options.file, 'utf-8');\n    const fileDomains = fileContent\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line && !line.startsWith('#'));\n\n    domains.push(...fileDomains);\n    logger.info(\n      `📄 ${fileDomains.length} 個のドメインをファイルから読み込みました`\n    );\n  }\n\n  if (domains.length === 0) {\n    throw new Error(\n      '分析するドメインが指定されていません。ドメインを直接指定するか、--file オプションを使用してください。'\n    );\n  }\n\n  // 重複排除\n  const uniqueDomains = [...new Set(domains)];\n  logger.info(`🎯 ${uniqueDomains.length} 個のドメインを分析対象とします`);\n\n  return uniqueDomains;\n}\n\n/**\n * DNS レコードの取得\n */\nasync function getDNSRecords(domains: string[], options: any, logger: Logger) {\n  if (options.records) {\n    // CSV ファイルからレコードを読み込み\n    logger.info('📄 CSVファイルからDNSレコードを読み込んでいます...', {\n      file: options.records,\n    });\n\n    const csvProcessor = new CSVProcessor({});\n    const csvData = await csvProcessor.parseAuto(options.records);\n\n    return csvData.records;\n  } else {\n    // ドメインからDNSレコードを解決\n    logger.info('🔍 DNSレコードを解決しています...', {\n      domainCount: domains.length,\n    });\n\n    const resolver = new DNSResolver({});\n    const allRecords = [];\n\n    // 並列処理で高速化\n    const resolvePromises = domains.map(async domain => {\n      try {\n        const result = await resolver.resolve(domain, 'A');\n        const records = result.records;\n        return records;\n      } catch (error) {\n        logger.warn(`⚠️  ${domain} のDNS解決に失敗しました:`, {\n          error: error instanceof Error ? error.message : String(error)\n        });\n        return [];\n      }\n    });\n\n    const results = await Promise.all(resolvePromises);\n    results.forEach(records => allRecords.push(...records));\n\n    logger.info(`📋 ${allRecords.length} 個のDNSレコードを取得しました`);\n    return allRecords;\n  }\n}\n\n/**\n * 脅威イベントリスナーの設定\n */\nfunction setupThreatListeners(\n  analyzer: DNSSecurityAnalyzer,\n  logger: Logger,\n  options: any\n) {\n  // 脅威検出イベント\n  analyzer.on('threat', (threat: SecurityThreat) => {\n    if (options.verbose) {\n      logger.info('🚨 脅威を検出しました:', {\n        id: threat.id,\n        type: threat.type,\n        severity: threat.severity,\n        domain: threat.domain,\n        confidence: threat.confidence,\n      });\n    }\n  });\n\n  // 高優先度脅威イベント\n  analyzer.on('high-priority-threat', (threat: SecurityThreat) => {\n    const severityColor = getSeverityColor(threat.severity);\n    console.log(\n      severityColor(`🚨 高優先度脅威: ${threat.domain} (${threat.type})`)\n    );\n    console.log(chalk.gray(`   説明: ${threat.description}`));\n    console.log(chalk.gray(`   信頼度: ${threat.confidence}%`));\n    console.log('');\n  });\n\n  // 監視サイクルイベント\n  analyzer.on('monitoring-cycle', () => {\n    if (options.verbose) {\n      logger.info('🔄 監視サイクルを実行しました');\n    }\n  });\n}\n\n/**\n * 脅威のフィルタリング\n */\nfunction filterThreats(\n  threats: SecurityThreat[],\n  options: any\n): SecurityThreat[] {\n  let filtered = threats;\n\n  // 重要度フィルタ\n  if (options.severity !== 'all') {\n    filtered = filtered.filter(threat => threat.severity === options.severity);\n  }\n\n  // 脅威タイプフィルタ\n  if (options.type !== 'all') {\n    filtered = filtered.filter(threat => threat.type === options.type);\n  }\n\n  return filtered;\n}\n\n/**\n * 結果の出力\n */\nasync function outputResults(\n  threats: SecurityThreat[],\n  options: any,\n  logger: Logger\n) {\n  if (options.format === 'table') {\n    displayTableResults(threats, logger);\n  } else if (options.format === 'json') {\n    const jsonOutput = JSON.stringify(threats, null, 2);\n    if (options.output) {\n      writeFileSync(options.output, jsonOutput);\n      logger.info(`📄 結果を ${options.output} に保存しました`);\n    } else {\n      console.log(jsonOutput);\n    }\n  } else if (options.format === 'detailed') {\n    displayDetailedResults(threats, logger);\n  } else if (options.format === 'summary') {\n    displaySummaryResults(threats, logger);\n  }\n}\n\n/**\n * テーブル形式での結果表示\n */\nfunction displayTableResults(threats: SecurityThreat[], logger: Logger) {\n  if (threats.length === 0) {\n    console.log(chalk.green('✅ 脅威は検出されませんでした'));\n    return;\n  }\n\n  console.log(chalk.blue.bold('\\\\n🛡️  DNS セキュリティ脅威検出結果\\\\n'));\n\n  threats.forEach((threat, index) => {\n    const severityColor = getSeverityColor(threat.severity);\n    const typeIcon = getThreatTypeIcon(threat.type);\n\n    console.log(chalk.white(`${index + 1}. ${typeIcon} ${threat.domain}`));\n    console.log(chalk.gray(`   脅威タイプ: ${threat.type}`));\n    console.log(\n      chalk.gray(`   重要度: ${severityColor(threat.severity.toUpperCase())}`)\n    );\n    console.log(chalk.gray(`   信頼度: ${threat.confidence}%`));\n    console.log(chalk.gray(`   説明: ${threat.description}`));\n    console.log(\n      chalk.gray(`   検出時刻: ${new Date(threat.timestamp).toLocaleString()}`)\n    );\n    console.log('');\n  });\n}\n\n/**\n * 詳細結果の表示\n */\nfunction displayDetailedResults(threats: SecurityThreat[], logger: Logger) {\n  if (threats.length === 0) {\n    console.log(chalk.green('✅ 脅威は検出されませんでした'));\n    return;\n  }\n\n  console.log(\n    chalk.blue.bold('\\\\n🛡️  DNS セキュリティ脅威検出結果（詳細）\\\\n')\n  );\n\n  threats.forEach((threat, index) => {\n    const severityColor = getSeverityColor(threat.severity);\n    const typeIcon = getThreatTypeIcon(threat.type);\n\n    console.log(chalk.white.bold(`${index + 1}. ${typeIcon} ${threat.domain}`));\n    console.log(chalk.gray(`ID: ${threat.id}`));\n    console.log(chalk.gray(`脅威タイプ: ${threat.type}`));\n    console.log(\n      chalk.gray(`重要度: ${severityColor(threat.severity.toUpperCase())}`)\n    );\n    console.log(chalk.gray(`信頼度: ${threat.confidence}%`));\n    console.log(chalk.gray(`説明: ${threat.description}`));\n    console.log(\n      chalk.gray(`検出時刻: ${new Date(threat.timestamp).toLocaleString()}`)\n    );\n\n    console.log(chalk.blue('\\\\n📊 脅威指標:'));\n    if (threat.indicators.technicalIndicators.length > 0) {\n      console.log(chalk.gray('  技術的指標:'));\n      threat.indicators.technicalIndicators.forEach(indicator => {\n        console.log(chalk.gray(`    • ${indicator}`));\n      });\n    }\n\n    if (threat.indicators.behavioralIndicators.length > 0) {\n      console.log(chalk.gray('  行動的指標:'));\n      threat.indicators.behavioralIndicators.forEach(indicator => {\n        console.log(chalk.gray(`    • ${indicator}`));\n      });\n    }\n\n    if (threat.indicators.reputationIndicators.length > 0) {\n      console.log(chalk.gray('  レピュテーション指標:'));\n      threat.indicators.reputationIndicators.forEach(indicator => {\n        console.log(chalk.gray(`    • ${indicator}`));\n      });\n    }\n\n    console.log(chalk.green('\\\\n🛠️  対策:'));\n    console.log(chalk.gray('  即座の対策:'));\n    threat.mitigation.immediateActions.forEach(action => {\n      console.log(chalk.gray(`    • ${action}`));\n    });\n\n    console.log(chalk.gray('  長期的対策:'));\n    threat.mitigation.longTermActions.forEach(action => {\n      console.log(chalk.gray(`    • ${action}`));\n    });\n\n    console.log(chalk.gray('  予防策:'));\n    threat.mitigation.preventionMeasures.forEach(measure => {\n      console.log(chalk.gray(`    • ${measure}`));\n    });\n\n    console.log(chalk.magenta('\\\\n🔍 証拠:'));\n    console.log(\n      chalk.gray(`  関連DNSレコード: ${threat.evidence.dnsRecords.length}件`)\n    );\n    console.log(\n      chalk.gray(\n        `  IP レピュテーション: ${threat.evidence.networkAnalysis.ipReputationScore}/100`\n      )\n    );\n    console.log(\n      chalk.gray(\n        `  ドメイン年数: ${threat.evidence.networkAnalysis.domainAge}日`\n      )\n    );\n    console.log(\n      chalk.gray(\n        `  証明書状態: ${threat.evidence.networkAnalysis.certificateStatus}`\n      )\n    );\n\n    console.log('\\\\n' + '='.repeat(80) + '\\\\n');\n  });\n}\n\n/**\n * サマリー結果の表示\n */\nfunction displaySummaryResults(threats: SecurityThreat[], logger: Logger) {\n  if (threats.length === 0) {\n    console.log(chalk.green('✅ 脅威は検出されませんでした'));\n    return;\n  }\n\n  console.log(chalk.blue.bold('\\\\n🛡️  DNS セキュリティ脅威検出サマリー\\\\n'));\n\n  // 重要度別集計\n  const severityCount = threats.reduce(\n    (acc, threat) => {\n      acc[threat.severity] = (acc[threat.severity] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  console.log(chalk.white('重要度別脅威数:'));\n  Object.entries(severityCount).forEach(([severity, count]) => {\n    const color = getSeverityColor(severity);\n    console.log(chalk.gray(`  ${color(severity.toUpperCase())}: ${count}件`));\n  });\n\n  // タイプ別集計\n  const typeCount = threats.reduce(\n    (acc, threat) => {\n      acc[threat.type] = (acc[threat.type] || 0) + 1;\n      return acc;\n    },\n    {} as Record<string, number>\n  );\n\n  console.log(chalk.white('\\\\n脅威タイプ別:'));\n  Object.entries(typeCount).forEach(([type, count]) => {\n    const icon = getThreatTypeIcon(type);\n    console.log(chalk.gray(`  ${icon} ${type}: ${count}件`));\n  });\n\n  // 平均信頼度\n  const avgConfidence =\n    threats.reduce((sum, threat) => sum + threat.confidence, 0) /\n    threats.length;\n  console.log(chalk.white(`\\\\n平均信頼度: ${avgConfidence.toFixed(1)}%`));\n\n  // 最新の脅威\n  const recentThreats = threats\n    .sort((a, b) => b.timestamp - a.timestamp)\n    .slice(0, 5);\n\n  console.log(chalk.white('\\\\n最新の脅威:'));\n  recentThreats.forEach((threat, index) => {\n    const severityColor = getSeverityColor(threat.severity);\n    const typeIcon = getThreatTypeIcon(threat.type);\n    console.log(\n      chalk.gray(\n        `  ${index + 1}. ${typeIcon} ${threat.domain} (${severityColor(threat.severity)})`\n      )\n    );\n  });\n}\n\n/**\n * 統計情報の表示\n */\nfunction displayStatistics(\n  analyzer: DNSSecurityAnalyzer,\n  threats: SecurityThreat[],\n  logger: Logger\n) {\n  const stats = analyzer.getThreatStatistics();\n\n  console.log(chalk.blue.bold('\\\\n📊 脅威統計情報'));\n  console.log(chalk.gray(`総脅威数: ${stats.totalThreats}`));\n  console.log(chalk.gray(`今回検出: ${threats.length}`));\n  console.log(chalk.gray(`最近24時間: ${stats.recentThreats.length}`));\n\n  if (stats.totalThreats > 0) {\n    console.log(chalk.gray('\\\\n脅威タイプ分布:'));\n    Object.entries(stats.threatsByType).forEach(([type, count]) => {\n      const percentage = ((count / stats.totalThreats) * 100).toFixed(1);\n      const icon = getThreatTypeIcon(type);\n      console.log(chalk.gray(`  ${icon} ${type}: ${count}件 (${percentage}%)`));\n    });\n  }\n}\n\n/**\n * リアルタイム監視の開始\n */\nasync function startRealTimeMonitoring(\n  analyzer: DNSSecurityAnalyzer,\n  domains: string[],\n  records: any[],\n  options: any,\n  logger: Logger\n) {\n  console.log(chalk.blue.bold('\\\\n🔄 リアルタイム監視を開始します...'));\n  console.log(chalk.gray('監視を停止するには Ctrl+C を押してください\\\\n'));\n\n  analyzer.startRealTimeMonitoring(parseInt(options.monitorInterval));\n\n  // 定期的な再分析\n  const monitoringInterval = setInterval(async () => {\n    try {\n      const newThreats = await analyzer.analyzeSecurityThreats(\n        domains,\n        records\n      );\n      const filteredThreats = filterThreats(newThreats, options);\n\n      if (filteredThreats.length > 0) {\n        console.log(\n          chalk.yellow(\n            `\\\\n🚨 新しい脅威を検出しました: ${filteredThreats.length}件`\n          )\n        );\n        displaySummaryResults(filteredThreats, logger);\n      }\n    } catch (error) {\n      logger.error('監視中にエラーが発生しました:', \n        error instanceof Error ? error : new Error(String(error)));\n    }\n  }, parseInt(options.monitorInterval));\n\n  // Ctrl+C でのプログラム終了処理\n  process.on('SIGINT', () => {\n    console.log(chalk.yellow('\\\\n\\\\n🛑 監視を停止しています...'));\n    clearInterval(monitoringInterval);\n    analyzer.stopRealTimeMonitoring();\n    console.log(chalk.green('✅ 監視を停止しました'));\n    process.exit(0);\n  });\n\n  // 無限ループで監視を継続\n  return new Promise(() => {});\n}\n\n/**\n * 脅威データのエクスポート\n */\nasync function exportThreatData(\n  analyzer: DNSSecurityAnalyzer,\n  options: any,\n  logger: Logger\n) {\n  logger.info('📤 脅威データをエクスポートしています...');\n\n  const threatDatabase = analyzer.getThreatDatabase();\n  const exportData = {\n    exportTime: new Date().toISOString(),\n    totalDomains: threatDatabase.size,\n    threats: Object.fromEntries(threatDatabase.entries()),\n    statistics: analyzer.getThreatStatistics(),\n  };\n\n  const exportFile = options.output\n    ? options.output.replace(/\\\\.[^.]+$/, '_threats.json')\n    : `threats_export_${Date.now()}.json`;\n\n  writeFileSync(exportFile, JSON.stringify(exportData, null, 2));\n  logger.info(`📄 脅威データを ${exportFile} にエクスポートしました`);\n}\n\n/**\n * 重要度の色を取得\n */\nfunction getSeverityColor(severity: string) {\n  switch (severity) {\n    case 'critical':\n      return chalk.red.bold;\n    case 'high':\n      return chalk.red;\n    case 'medium':\n      return chalk.yellow;\n    case 'low':\n      return chalk.green;\n    default:\n      return chalk.gray;\n  }\n}\n\n/**\n * 脅威タイプのアイコンを取得\n */\nfunction getThreatTypeIcon(type: string) {\n  switch (type) {\n    case 'malware':\n      return '🦠';\n    case 'phishing':\n      return '🎣';\n    case 'typosquatting':\n      return '🔤';\n    case 'dga':\n      return '🤖';\n    case 'fastflux':\n      return '⚡';\n    case 'dns_hijacking':\n      return '🔓';\n    case 'cache_poisoning':\n      return '☠️';\n    case 'subdomain_takeover':\n      return '🔗';\n    default:\n      return '⚠️';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/sweep.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/sync.ts","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `options.provider,·config·as·ConfigData` with `⏎······options.provider,⏎······config·as·ConfigData⏎····`","line":89,"column":42,"nodeType":null,"messageId":"replace","endLine":89,"endColumn":80,"fix":{"range":[2200,2238],"text":"\n      options.provider,\n      config as ConfigData\n    "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `options.provider,·config·as·ConfigData` with `⏎······options.provider,⏎······config·as·ConfigData⏎····`","line":331,"column":42,"nodeType":null,"messageId":"replace","endLine":331,"endColumn":80,"fix":{"range":[8144,8182],"text":"\n      options.provider,\n      config as ConfigData\n    "}}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * DNS同期コマンド\n * CloudflareやRoute53との双方向同期を実現\n */\n\nimport { Command } from 'commander';\nimport ora, { type Ora } from 'ora';\nimport { table } from 'table';\n\nimport { CloudflareClient } from '../lib/api/cloudflare.js';\nimport { loadConfig } from '../lib/config.js';\nimport { CSVProcessor } from '../lib/csv-processor.js';\nimport { Logger } from '../lib/logger.js';\nimport { globalMetrics } from '../lib/metrics/metrics-collector.js';\nimport { Route53Client } from '../lib/route53.js';\n\nconst logger = new Logger();\n\n/**\n * 同期コマンドのオプション\n */\ninterface SyncOptions {\n  provider: 'cloudflare' | 'route53';\n  zone?: string;\n  direction: 'upload' | 'download' | 'both';\n  dryRun?: boolean;\n  force?: boolean;\n  format?: 'csv' | 'json';\n  output?: string;\n}\n\n/**\n * 同期コマンドを作成\n */\nexport function createSyncCommand(): Command {\n  const cmd = new Command('sync')\n    .description('CloudflareやRoute53とDNSレコードを同期')\n    .option(\n      '-p, --provider <provider>',\n      'プロバイダー (cloudflare|route53)',\n      'cloudflare'\n    )\n    .option('-z, --zone <zone>', 'ゾーンID/ドメイン名')\n    .option('-d, --direction <direction>', '同期方向 (pull|push|both)', 'pull')\n    .option('-o, --output <file>', '出力ファイル（CSV形式）')\n    .option('--dry-run', 'ドライラン（実際の変更を行わない）')\n    .option('--force', '確認なしで実行')\n    .action(async options => {\n      try {\n        await handleSync(options);\n      } catch (error) {\n        logger.error('同期処理中にエラーが発生しました', error as Error);\n        process.exit(1);\n      }\n    });\n\n  // サブコマンド\n  cmd\n    .command('status')\n    .description('同期ステータスを確認')\n    .option('-p, --provider <provider>', 'プロバイダー', 'cloudflare')\n    .action(async options => {\n      await checkSyncStatus(options);\n    });\n\n  cmd\n    .command('zones')\n    .description('利用可能なゾーン一覧を表示')\n    .option('-p, --provider <provider>', 'プロバイダー', 'cloudflare')\n    .action(async options => {\n      await listZones(options);\n    });\n\n  return cmd;\n}\n\n/**\n * 同期処理のメイン関数\n */\nasync function handleSync(options: SyncOptions): Promise<void> {\n  const startTime = Date.now();\n  const spinner = ora('同期処理を開始しています...').start();\n\n  try {\n    // 設定を読み込み\n    const config = await loadConfig();\n\n    // APIクライアントを初期化\n    const client = await createApiClient(options.provider, config as ConfigData);\n\n    if (!options.zone) {\n      spinner.fail('ゾーンIDまたはドメイン名を指定してください');\n      return;\n    }\n\n    // 同期処理を実行\n    switch (options.direction) {\n      case 'download':\n        await pullRecords(client, options, spinner);\n        break;\n      case 'upload':\n        await pushRecords(client, options, spinner);\n        break;\n      case 'both':\n        await syncBidirectional(client, options, spinner);\n        break;\n      default:\n        throw new Error(`不正な同期方向: ${options.direction}`);\n    }\n\n    const duration = Date.now() - startTime;\n    spinner.succeed(`同期が完了しました (${duration}ms)`);\n\n    // メトリクスを記録\n    globalMetrics.recordCommandExecution({\n      command: 'sync',\n      args: [options.provider, options.direction],\n      duration,\n      success: true,\n    });\n  } catch (error) {\n    spinner.fail('同期に失敗しました');\n    throw error;\n  }\n}\n\n/**\n * APIクライアントを作成\n */\ninterface ConfigData {\n  cloudflare?: {\n    apiToken: string;\n  };\n  route53?: {\n    accessKeyId: string;\n    secretAccessKey: string;\n    region?: string;\n  };\n}\n\nasync function createApiClient(\n  provider: string,\n  config: ConfigData\n): Promise<CloudflareClient | Route53Client> {\n  switch (provider) {\n    case 'cloudflare':\n      if (!config.cloudflare?.apiToken) {\n        throw new Error('Cloudflare APIトークンが設定されていません');\n      }\n      return new CloudflareClient({\n        apiToken: config.cloudflare.apiToken,\n        email: config.cloudflare.email,\n        apiKey: config.cloudflare.apiKey,\n      });\n\n    case 'route53':\n      if (!config.aws?.accessKeyId || !config.aws?.secretAccessKey) {\n        throw new Error('AWS認証情報が設定されていません');\n      }\n      return new Route53Client({\n        accessKeyId: config.aws.accessKeyId,\n        secretAccessKey: config.aws.secretAccessKey,\n        region: config.aws.region || 'us-east-1',\n      });\n\n    default:\n      throw new Error(`サポートされていないプロバイダー: ${provider}`);\n  }\n}\n\n/**\n * レコードをプル（ダウンロード）\n */\nasync function pullRecords(\n  client: CloudflareClient | Route53Client,\n  options: SyncOptions,\n  spinner: Ora\n): Promise<void> {\n  spinner.text = 'DNSレコードを取得しています...';\n\n  let records;\n  if (client instanceof CloudflareClient) {\n    const response = await client.listDNSRecords(options.zone);\n    if (!response.success) {\n      throw new Error(\n        `DNSレコードの取得に失敗しました: ${response.errors?.join(', ')}`\n      );\n    }\n    records = client.convertCloudflareToCSVRecords(response.result || []);\n  } else {\n    const response = await client.listResourceRecordSets(options.zone);\n    if (response.error) {\n      throw new Error(`DNSレコードの取得に失敗しました: ${response.error}`);\n    }\n    records = client.convertRoute53ToCSVRecords(response.data || []);\n  }\n\n  spinner.text = `${records.length}件のレコードを取得しました`;\n\n  // ファイルに保存\n  if (options.output) {\n    const _csvProcessor = new CSVProcessor();\n    const outputPath = options.output;\n\n    // TODO: CSV書き込み機能を実装\n    logger.info(`レコードを${outputPath}に保存しました`);\n  }\n\n  // テーブル表示\n  if (!options.quiet) {\n    displayRecordsTable(records);\n  }\n}\n\n/**\n * レコードをプッシュ（アップロード）\n */\nasync function pushRecords(\n  client: CloudflareClient | Route53Client,\n  options: SyncOptions & { input?: string },\n  spinner: Ora\n): Promise<void> {\n  if (!options.input) {\n    throw new Error('入力ファイルを指定してください（--input）');\n  }\n\n  spinner.text = 'CSVファイルを読み込んでいます...';\n\n  const csvProcessor = new CSVProcessor();\n  const result = await csvProcessor.parseAuto(options.input);\n\n  spinner.text = `${result.records.length}件のレコードをアップロードしています...`;\n\n  if (options.dryRun) {\n    spinner.info('ドライランモード: 実際の変更は行いません');\n    displayRecordsTable(result.records);\n    return;\n  }\n\n  // 確認を求める\n  if (!options.force) {\n    spinner.stop();\n    logger.info(\n      `\\n${result.records.length}件のレコードをアップロードします。続行しますか？ (y/N)`\n    );\n    // TODO: ユーザー確認の実装\n  }\n\n  // レコードをアップロード\n  let successCount = 0;\n  let errorCount = 0;\n\n  for (const record of result.records) {\n    try {\n      if (client instanceof CloudflareClient) {\n        const dnsRecord = client.convertCSVToCloudflareRecords([record])[0];\n        await client.createDNSRecord(options.zone, dnsRecord);\n      } else {\n        // Route53の場合\n        const change = {\n          Action: 'CREATE' as const,\n          ResourceRecordSet: client.convertCSVToRoute53([record])[0],\n        };\n        await client.changeResourceRecordSets(options.zone, {\n          Changes: [change],\n        });\n      }\n      successCount++;\n    } catch (error) {\n      errorCount++;\n      logger.error(\n        `レコードのアップロードに失敗しました: ${record.name}`,\n        error as Error\n      );\n    }\n  }\n\n  spinner.succeed(\n    `アップロード完了: 成功 ${successCount}件, 失敗 ${errorCount}件`\n  );\n}\n\n/**\n * 双方向同期\n */\nasync function syncBidirectional(\n  client: CloudflareClient | Route53Client,\n  options: SyncOptions,\n  spinner: Ora\n): Promise<void> {\n  spinner.info('双方向同期は開発中です');\n  // TODO: 双方向同期の実装\n}\n\n/**\n * 同期ステータスを確認\n */\nasync function checkSyncStatus(options: SyncOptions): Promise<void> {\n  const config = await loadConfig();\n  const client = await createApiClient(options.provider, config as ConfigData);\n\n  if (client instanceof CloudflareClient) {\n    const response = await client.verifyToken();\n    if (response.success) {\n      logger.success('Cloudflare API接続: 正常');\n      logger.info(`ユーザーID: ${response.result?.id}`);\n      logger.info(`メールアドレス: ${response.result?.email}`);\n    } else {\n      logger.error('Cloudflare API接続: 失敗');\n    }\n  } else {\n    // Route53の場合\n    const response = await client.listHostedZones();\n    if (!response.error) {\n      logger.success('Route53 API接続: 正常');\n      logger.info(`ホステッドゾーン数: ${response.data?.length || 0}`);\n    } else {\n      logger.error('Route53 API接続: 失敗', new Error(response.error));\n    }\n  }\n}\n\n/**\n * ゾーン一覧を表示\n */\nasync function listZones(options: SyncOptions): Promise<void> {\n  const spinner = ora('ゾーン一覧を取得しています...').start();\n\n  try {\n    const config = await loadConfig();\n    const client = await createApiClient(options.provider, config as ConfigData);\n\n    let zones;\n    if (client instanceof CloudflareClient) {\n      const response = await client.listZones();\n      if (!response.success) {\n        throw new Error(\n          `ゾーン一覧の取得に失敗しました: ${response.errors?.join(', ')}`\n        );\n      }\n      zones = response.result || [];\n    } else {\n      const response = await client.listHostedZones();\n      if (response.error) {\n        throw new Error(`ゾーン一覧の取得に失敗しました: ${response.error}`);\n      }\n      zones = response.data || [];\n    }\n\n    spinner.succeed(`${zones.length}件のゾーンが見つかりました`);\n\n    // テーブル表示\n    const tableData = [\n      ['ID', 'ドメイン名', 'ステータス'],\n      ...zones.map((zone: { id: string; name: string; status?: string }) => [\n        zone.id,\n        zone.name,\n        zone.status || 'active',\n      ]),\n    ];\n\n    logger.info(table(tableData));\n  } catch (error) {\n    spinner.fail('ゾーン一覧の取得に失敗しました');\n    throw error;\n  }\n}\n\n/**\n * レコードをテーブル形式で表示\n */\ninterface DNSRecordDisplay {\n  name: string;\n  type: string;\n  value: string;\n  ttl: number;\n  priority?: number;\n}\n\nfunction displayRecordsTable(records: DNSRecordDisplay[]): void {\n  if (records.length === 0) {\n    logger.info('レコードが見つかりませんでした');\n    return;\n  }\n\n  const tableData = [\n    ['名前', 'タイプ', '値', 'TTL', '優先度'],\n    ...records\n      .slice(0, 20)\n      .map(record => [\n        record.name,\n        record.type,\n        record.value.length > 50\n          ? record.value.substring(0, 47) + '...'\n          : record.value,\n        record.ttl?.toString() || '-',\n        record.priority?.toString() || '-',\n      ]),\n  ];\n\n  logger.info(table(tableData));\n\n  if (records.length > 20) {\n    logger.info(`... 他 ${records.length - 20} 件のレコード`);\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/tenant.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1214,1253],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1262,1302],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1311,1376],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1385,1475],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1484,1547],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":49,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":49,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1556,1643],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":52,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":52,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1652,1716],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1726,1765],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1774,1814],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":58,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":58,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1920,1968],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":62,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":62,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2001,2039],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":63,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":63,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2048,2088],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":66,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":66,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2198,2248],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2281,2295],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":73,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":73,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2311,2348],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":74,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":74,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2355,2395],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":77,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":77,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2439,2481],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":82,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":82,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2554,2600],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":208,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":208,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6142,6182],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":209,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":209,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6189,6229],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":210,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":210,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6236,6286],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":211,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":211,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6293,6341],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":212,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":212,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6348,6400],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6407,6456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":214,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":214,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6463,6557],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6565,6602],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":219,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":219,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6609,6649],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6656,6746],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":223,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":223,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6753,6846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":226,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":226,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6853,6919],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":227,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":227,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[6926,7019],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7026,7125],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":259,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":259,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7837,7889],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7921,7960],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":264,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":264,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7967,8007],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":265,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":265,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8014,8064],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":266,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":266,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8071,8119],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8126,8178],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":268,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":268,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8185,8234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":269,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":269,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8241,8398],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":276,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":276,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8405,8499],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8506,8600],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":283,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":283,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8608,8646],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":284,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8653,8693],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8700,8786],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8793,8863],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":289,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":289,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8870,8961],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8968,9036],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9152,9191],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":298,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":298,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9202,9242],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9253,9382],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9393,9531],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":305,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":305,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9542,9669],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9680,9823],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[9834,9981],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":320,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":320,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10123,10160],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10171,10211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":322,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":322,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10222,10287],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10298,10389],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":326,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":326,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10400,10535],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":329,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":329,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10546,10644],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":332,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":332,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10655,10783],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":335,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":335,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[10794,10939],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11050,11089],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11098,11138],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11183,11225],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":349,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":349,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11289,11530],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":362,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":362,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11667,11706],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":363,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":363,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11715,11755],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":365,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":365,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11804,11846],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":368,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":368,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[11918,12170],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12312,12357],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12366,12406],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":384,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":384,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12455,12497],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":24,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[12762,13049],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":406,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":406,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13174,13211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":407,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":407,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13220,13260],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":408,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":408,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13269,13335],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":409,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":409,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13344,13434],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":412,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":412,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13443,13510],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":413,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":413,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13519,13622],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":416,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":416,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[13631,13732],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":450,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":450,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[14471,14523],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14570,14573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14570,14573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":511,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":511,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15941,15981],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":512,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":512,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[15988,16028],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":513,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":513,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16035,16092],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":514,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":514,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16099,16154],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":515,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":515,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16161,16217],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":516,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":516,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16224,16388],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":523,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":523,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16395,16496],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":545,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":545,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16947,16999],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":550,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":550,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17059,17178],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":555,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":555,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17187,17227],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":556,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":556,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17236,17312],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":566,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":566,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17434,17474],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":567,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":567,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17481,17521],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":568,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":568,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[17528,17628],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":597,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":597,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18267,18319],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":603,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":603,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[18427,18501],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":633,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":633,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19194,19234],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":634,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":634,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19243,19283],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":635,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":635,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19292,19340],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":636,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":636,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19349,19401],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":637,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":637,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19410,19456],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":638,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":638,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19465,19561],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":644,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":644,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19642,19681],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":645,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":645,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19690,19730],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":648,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":648,"endColumn":22,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[19776,19818],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":693,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":693,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21159,21211],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":699,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":699,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21309,21312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21309,21312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":711,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":711,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21783,21820],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":712,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":712,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21827,21867],"text":""},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":715,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":715,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[21913,21955],"text":""},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":112,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Logger } from '@lib/logger.js';\nimport MultiTenantDNSManager from '@lib/multi-tenant-dns-manager.js';\nimport { OutputFormatter } from '@lib/output-formatter.js';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\n\nconst logger = new Logger();\n\nexport const tenantCommand = new Command('tenant')\n  .description('マルチテナントDNS管理')\n  .option('-v, --verbose', '詳細な出力を有効にする', false)\n  .option('-f, --format <type>', '出力形式 (json/table/text)', 'table');\n\n// テナント一覧表示\ntenantCommand\n  .command('list')\n  .description('テナント一覧を表示')\n  .option('-s, --stats', '統計情報を含める', false)\n  .option('--plan <plan>', '特定のプランでフィルタ', '')\n  .option('--status <status>', '特定のステータスでフィルタ', '')\n  .action(async options => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      logger.info('テナント一覧を取得中...');\n\n      let tenants = manager.getAllTenants();\n\n      // フィルタリング\n      if (options.plan) {\n        tenants = tenants.filter(t => t.plan === options.plan);\n      }\n      if (options.status) {\n        tenants = tenants.filter(t => t.status === options.status);\n      }\n\n      const formatter = new OutputFormatter();\n\n      if (options.stats) {\n        const systemStats = manager.getSystemStats();\n\n        console.log(chalk.bold('\\n📊 システム統計'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(`総テナント数: ${chalk.yellow(systemStats.totalTenants)}`);\n        console.log(\n          `アクティブテナント数: ${chalk.yellow(systemStats.activeTenants)}`\n        );\n        console.log(`総ユーザー数: ${chalk.yellow(systemStats.totalUsers)}`);\n        console.log(\n          `総リソース数: ${chalk.yellow(systemStats.totalResources)}`\n        );\n        console.log(`総クエリ数: ${chalk.yellow(systemStats.totalQueries)}`);\n\n        console.log(chalk.bold('\\n📈 プラン別分布'));\n        console.log(chalk.gray('─'.repeat(50)));\n        Object.entries(systemStats.planDistribution).forEach(\n          ([plan, count]) => {\n            console.log(`${plan}: ${chalk.yellow(count)}個`);\n          }\n        );\n\n        console.log(chalk.bold('\\n🌍 地域別分布'));\n        console.log(chalk.gray('─'.repeat(50)));\n        Object.entries(systemStats.regionDistribution).forEach(\n          ([region, count]) => {\n            console.log(`${region}: ${chalk.yellow(count)}個`);\n          }\n        );\n\n        console.log();\n      }\n\n      console.log(chalk.bold('🏢 テナント一覧'));\n      console.log(chalk.gray('─'.repeat(50)));\n\n      if (tenants.length === 0) {\n        console.log(chalk.yellow('テナントが見つかりません'));\n        return;\n      }\n\n      if (options.format === 'json') {\n        console.log(JSON.stringify(tenants, null, 2));\n      } else {\n        const tableData = tenants.map(tenant => ({\n          ID: tenant.id,\n          名前: tenant.name,\n          ドメイン: tenant.domain,\n          プラン: tenant.plan,\n          ステータス:\n            tenant.status === 'active'\n              ? chalk.green('アクティブ')\n              : chalk.red('非アクティブ'),\n          作成日: tenant.createdAt.toLocaleDateString('ja-JP'),\n          連絡先: tenant.metadata.contactEmail,\n        }));\n\n        formatter.formatTable(tableData);\n      }\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('テナント一覧の取得に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// テナント作成\ntenantCommand\n  .command('create')\n  .description('新しいテナントを作成')\n  .requiredOption('-n, --name <name>', 'テナント名')\n  .requiredOption('-d, --domain <domain>', 'テナントドメイン')\n  .option(\n    '-p, --plan <plan>',\n    'プラン (free/basic/professional/enterprise)',\n    'free'\n  )\n  .option('-e, --email <email>', '連絡先メールアドレス')\n  .option('-i, --industry <industry>', '業界', 'technology')\n  .option('-s, --size <size>', '会社規模', 'startup')\n  .option('-r, --region <region>', '地域', 'us-east-1')\n  .action(async options => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      logger.info(`新しいテナントを作成中: ${options.name}`);\n\n      // プランに基づく設定\n      const planConfigs = {\n        free: {\n          maxDNSRecords: 100,\n          maxQueriesPerMonth: 10000,\n          maxUsers: 5,\n          apiRateLimit: 100,\n          allowedFeatures: ['basic-dns', 'monitoring'],\n        },\n        basic: {\n          maxDNSRecords: 500,\n          maxQueriesPerMonth: 50000,\n          maxUsers: 10,\n          apiRateLimit: 500,\n          allowedFeatures: ['basic-dns', 'monitoring', 'analytics'],\n        },\n        professional: {\n          maxDNSRecords: 2000,\n          maxQueriesPerMonth: 200000,\n          maxUsers: 25,\n          apiRateLimit: 1000,\n          allowedFeatures: [\n            'basic-dns',\n            'monitoring',\n            'analytics',\n            'api-access',\n          ],\n        },\n        enterprise: {\n          maxDNSRecords: 10000,\n          maxQueriesPerMonth: 1000000,\n          maxUsers: 100,\n          apiRateLimit: 5000,\n          allowedFeatures: [\n            'basic-dns',\n            'monitoring',\n            'analytics',\n            'api-access',\n            'white-label',\n          ],\n        },\n      };\n\n      const planConfig = planConfigs[options.plan as keyof typeof planConfigs];\n\n      const tenantData = {\n        name: options.name,\n        domain: options.domain,\n        plan: options.plan,\n        status: 'active' as const,\n        settings: {\n          ...planConfig,\n          retention: {\n            logs: options.plan === 'enterprise' ? 365 : 90,\n            metrics: options.plan === 'enterprise' ? 365 : 90,\n            backups: options.plan === 'enterprise' ? 90 : 30,\n          },\n        },\n        subscription: {\n          planId: `${options.plan}-plan`,\n          status: 'active' as const,\n          currentPeriodStart: new Date(),\n          currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1年後\n          usage: {\n            dnsRecords: 0,\n            queriesThisMonth: 0,\n            activeUsers: 0,\n            apiCalls: 0,\n          },\n        },\n        metadata: {\n          industry: options.industry,\n          companySize: options.size,\n          region: options.region,\n          contactEmail: options.email || `admin@${options.domain}`,\n        },\n      };\n\n      const tenant = await manager.createTenant(tenantData);\n\n      console.log(chalk.bold('\\n✅ テナント作成完了'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(`テナントID: ${chalk.yellow(tenant.id)}`);\n      console.log(`名前: ${chalk.yellow(tenant.name)}`);\n      console.log(`ドメイン: ${chalk.yellow(tenant.domain)}`);\n      console.log(`プラン: ${chalk.yellow(tenant.plan)}`);\n      console.log(\n        `作成日: ${chalk.yellow(tenant.createdAt.toLocaleString('ja-JP'))}`\n      );\n\n      console.log(chalk.bold('\\n📋 設定詳細'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(\n        `最大DNSレコード数: ${chalk.yellow(tenant.settings.maxDNSRecords)}`\n      );\n      console.log(\n        `月間クエリ数上限: ${chalk.yellow(tenant.settings.maxQueriesPerMonth)}`\n      );\n      console.log(`最大ユーザー数: ${chalk.yellow(tenant.settings.maxUsers)}`);\n      console.log(\n        `API レート制限: ${chalk.yellow(tenant.settings.apiRateLimit)}/hour`\n      );\n      console.log(\n        `利用可能機能: ${chalk.yellow(tenant.settings.allowedFeatures.join(', '))}`\n      );\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('テナント作成に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// テナント詳細表示\ntenantCommand\n  .command('show <tenant-id>')\n  .description('テナント詳細情報を表示')\n  .option('-s, --stats', '統計情報を含める', false)\n  .option('--users', 'ユーザー一覧を表示', false)\n  .option('--resources', 'リソース一覧を表示', false)\n  .option('--audit', '監査ログを表示', false)\n  .option('--quota', 'クォータ情報を表示', false)\n  .option('--billing', '請求情報を表示', false)\n  .action(async (tenantId, options) => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      logger.info(`テナント詳細を取得中: ${tenantId}`);\n\n      const tenant = manager.getTenant(tenantId);\n      if (!tenant) {\n        console.log(chalk.red(`テナントが見つかりません: ${tenantId}`));\n        return;\n      }\n\n      console.log(chalk.bold('\\n🏢 テナント詳細'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(`テナントID: ${chalk.yellow(tenant.id)}`);\n      console.log(`名前: ${chalk.yellow(tenant.name)}`);\n      console.log(`ドメイン: ${chalk.yellow(tenant.domain)}`);\n      console.log(`プラン: ${chalk.yellow(tenant.plan)}`);\n      console.log(\n        `ステータス: ${\n          tenant.status === 'active'\n            ? chalk.green('アクティブ')\n            : chalk.red('非アクティブ')\n        }`\n      );\n      console.log(\n        `作成日: ${chalk.yellow(tenant.createdAt.toLocaleString('ja-JP'))}`\n      );\n      console.log(\n        `更新日: ${chalk.yellow(tenant.updatedAt.toLocaleString('ja-JP'))}`\n      );\n\n      console.log(chalk.bold('\\n📞 連絡先情報'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(\n        `メールアドレス: ${chalk.yellow(tenant.metadata.contactEmail)}`\n      );\n      console.log(`業界: ${chalk.yellow(tenant.metadata.industry || 'N/A')}`);\n      console.log(\n        `会社規模: ${chalk.yellow(tenant.metadata.companySize || 'N/A')}`\n      );\n      console.log(`地域: ${chalk.yellow(tenant.metadata.region || 'N/A')}`);\n\n      if (options.quota) {\n        const quota = manager.getTenantQuota(tenantId);\n        if (quota) {\n          console.log(chalk.bold('\\n📊 クォータ情報'));\n          console.log(chalk.gray('─'.repeat(50)));\n          console.log(\n            `DNSレコード: ${chalk.yellow(quota.usage.dnsRecords)}/${chalk.yellow(quota.limits.dnsRecords)}`\n          );\n          console.log(\n            `月間クエリ: ${chalk.yellow(quota.usage.queriesThisMonth)}/${chalk.yellow(quota.limits.queriesPerMonth)}`\n          );\n          console.log(\n            `アクティブユーザー: ${chalk.yellow(quota.usage.activeUsers)}/${chalk.yellow(quota.limits.users)}`\n          );\n          console.log(\n            `時間毎API呼び出し: ${chalk.yellow(quota.usage.apiCallsThisHour)}/${chalk.yellow(quota.limits.apiCallsPerHour)}`\n          );\n          console.log(\n            `ストレージ使用量: ${chalk.yellow(quota.usage.storageUsedGB.toFixed(2))}GB/${chalk.yellow(quota.limits.storageGB)}GB`\n          );\n        }\n      }\n\n      if (options.billing) {\n        const billing = manager.getTenantBilling(tenantId);\n        if (billing) {\n          console.log(chalk.bold('\\n💳 請求情報'));\n          console.log(chalk.gray('─'.repeat(50)));\n          console.log(`プラン: ${chalk.yellow(billing.subscription.planId)}`);\n          console.log(\n            `ステータス: ${chalk.yellow(billing.subscription.status)}`\n          );\n          console.log(\n            `料金: ${chalk.yellow(billing.subscription.amount)} ${chalk.yellow(billing.subscription.currency)}`\n          );\n          console.log(\n            `請求サイクル: ${chalk.yellow(billing.subscription.billingCycle)}`\n          );\n          console.log(\n            `次回請求日: ${chalk.yellow(billing.subscription.nextBillingDate.toLocaleDateString('ja-JP'))}`\n          );\n          console.log(\n            `支払い方法: ${chalk.yellow(billing.paymentMethod.type)} (**** ${chalk.yellow(billing.paymentMethod.lastFour)})`\n          );\n        }\n      }\n\n      if (options.users) {\n        const users = manager.getTenantUsers(tenantId);\n        console.log(chalk.bold('\\n👥 ユーザー一覧'));\n        console.log(chalk.gray('─'.repeat(50)));\n        if (users.length === 0) {\n          console.log(chalk.yellow('ユーザーが見つかりません'));\n        } else {\n          users.forEach(user => {\n            console.log(\n              `${chalk.yellow(user.email)} (${chalk.blue(user.role)}) - ${\n                user.status === 'active'\n                  ? chalk.green('アクティブ')\n                  : chalk.red('非アクティブ')\n              }`\n            );\n          });\n        }\n      }\n\n      if (options.resources) {\n        const resources = manager.getTenantResources(tenantId);\n        console.log(chalk.bold('\\n📦 リソース一覧'));\n        console.log(chalk.gray('─'.repeat(50)));\n        if (resources.length === 0) {\n          console.log(chalk.yellow('リソースが見つかりません'));\n        } else {\n          resources.forEach(resource => {\n            console.log(\n              `${chalk.yellow(resource.name)} (${chalk.blue(resource.type)}) - ${\n                resource.status === 'active'\n                  ? chalk.green('アクティブ')\n                  : chalk.red('非アクティブ')\n              }`\n            );\n          });\n        }\n      }\n\n      if (options.audit) {\n        const auditLogs = manager.getAuditLogs(tenantId, { limit: 10 });\n        console.log(chalk.bold('\\n📋 監査ログ (最新10件)'));\n        console.log(chalk.gray('─'.repeat(50)));\n        if (auditLogs.length === 0) {\n          console.log(chalk.yellow('監査ログが見つかりません'));\n        } else {\n          auditLogs.forEach(log => {\n            const riskColor =\n              log.risk === 'high'\n                ? chalk.red\n                : log.risk === 'medium'\n                  ? chalk.yellow\n                  : chalk.green;\n            console.log(\n              `${chalk.blue(log.timestamp.toLocaleString('ja-JP'))} - ${chalk.yellow(log.action)} - ${riskColor(log.risk)} - ${\n                log.result === 'success'\n                  ? chalk.green('成功')\n                  : chalk.red('失敗')\n              }`\n            );\n          });\n        }\n      }\n\n      if (options.stats) {\n        const stats = manager.getTenantStats(tenantId);\n        console.log(chalk.bold('\\n📈 統計情報'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(`総ユーザー数: ${chalk.yellow(stats.overview.totalUsers)}`);\n        console.log(\n          `総リソース数: ${chalk.yellow(stats.overview.totalResources)}`\n        );\n        console.log(`総クエリ数: ${chalk.yellow(stats.overview.totalQueries)}`);\n        console.log(\n          `ストレージ使用量: ${chalk.yellow(stats.overview.totalStorage.toFixed(2))}GB`\n        );\n        console.log(\n          `アクティブ接続数: ${chalk.yellow(manager.getActiveConnections(tenantId))}`\n        );\n      }\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('テナント詳細の取得に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// テナント更新\ntenantCommand\n  .command('update <tenant-id>')\n  .description('テナント情報を更新')\n  .option('-n, --name <name>', 'テナント名を更新')\n  .option(\n    '-p, --plan <plan>',\n    'プランを更新 (free/basic/professional/enterprise)'\n  )\n  .option(\n    '-s, --status <status>',\n    'ステータスを更新 (active/suspended/cancelled)'\n  )\n  .option('-e, --email <email>', '連絡先メールアドレスを更新')\n  .action(async (tenantId, options) => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      logger.info(`テナントを更新中: ${tenantId}`);\n\n      const tenant = manager.getTenant(tenantId);\n      if (!tenant) {\n        console.log(chalk.red(`テナントが見つかりません: ${tenantId}`));\n        return;\n      }\n\n      const updates: any = {};\n\n      if (options.name) {\n        updates.name = options.name;\n      }\n\n      if (options.plan) {\n        updates.plan = options.plan;\n        // プラン変更時の設定更新\n        const planConfigs = {\n          free: {\n            maxDNSRecords: 100,\n            maxQueriesPerMonth: 10000,\n            maxUsers: 5,\n            apiRateLimit: 100,\n          },\n          basic: {\n            maxDNSRecords: 500,\n            maxQueriesPerMonth: 50000,\n            maxUsers: 10,\n            apiRateLimit: 500,\n          },\n          professional: {\n            maxDNSRecords: 2000,\n            maxQueriesPerMonth: 200000,\n            maxUsers: 25,\n            apiRateLimit: 1000,\n          },\n          enterprise: {\n            maxDNSRecords: 10000,\n            maxQueriesPerMonth: 1000000,\n            maxUsers: 100,\n            apiRateLimit: 5000,\n          },\n        };\n\n        const planConfig =\n          planConfigs[options.plan as keyof typeof planConfigs];\n        updates.settings = {\n          ...tenant.settings,\n          ...planConfig,\n        };\n      }\n\n      if (options.status) {\n        updates.status = options.status;\n      }\n\n      if (options.email) {\n        updates.metadata = {\n          ...tenant.metadata,\n          contactEmail: options.email,\n        };\n      }\n\n      const updatedTenant = await manager.updateTenant(tenantId, updates);\n\n      console.log(chalk.bold('\\n✅ テナント更新完了'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(`テナントID: ${chalk.yellow(updatedTenant.id)}`);\n      console.log(`名前: ${chalk.yellow(updatedTenant.name)}`);\n      console.log(`プラン: ${chalk.yellow(updatedTenant.plan)}`);\n      console.log(\n        `ステータス: ${\n          updatedTenant.status === 'active'\n            ? chalk.green('アクティブ')\n            : chalk.red('非アクティブ')\n        }`\n      );\n      console.log(\n        `更新日: ${chalk.yellow(updatedTenant.updatedAt.toLocaleString('ja-JP'))}`\n      );\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('テナント更新に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// テナント削除\ntenantCommand\n  .command('delete <tenant-id>')\n  .description('テナントを削除')\n  .option('-y, --yes', '確認をスキップ', false)\n  .action(async (tenantId, options) => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      const tenant = manager.getTenant(tenantId);\n      if (!tenant) {\n        console.log(chalk.red(`テナントが見つかりません: ${tenantId}`));\n        return;\n      }\n\n      if (!options.yes) {\n        console.log(\n          chalk.yellow(\n            `テナント \"${tenant.name}\" (${tenant.id}) を削除しますか？`\n          )\n        );\n        console.log(chalk.red('この操作は取り消せません。'));\n        console.log(\n          chalk.gray('確認するには --yes オプションを使用してください。')\n        );\n        return;\n      }\n\n      logger.info(`テナントを削除中: ${tenantId}`);\n\n      await manager.deleteTenant(tenantId);\n\n      console.log(chalk.bold('\\n✅ テナント削除完了'));\n      console.log(chalk.gray('─'.repeat(50)));\n      console.log(\n        `削除されたテナント: ${chalk.yellow(tenant.name)} (${chalk.yellow(tenant.id)})`\n      );\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('テナント削除に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// ユーザー管理\ntenantCommand\n  .command('users <tenant-id>')\n  .description('テナントのユーザー管理')\n  .option('-a, --add', 'ユーザーを追加', false)\n  .option('-e, --email <email>', 'ユーザーのメールアドレス')\n  .option(\n    '-r, --role <role>',\n    'ユーザーの役割 (owner/admin/editor/viewer)',\n    'viewer'\n  )\n  .option('-n, --name <name>', 'ユーザー名')\n  .action(async (tenantId, options) => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      const tenant = manager.getTenant(tenantId);\n      if (!tenant) {\n        console.log(chalk.red(`テナントが見つかりません: ${tenantId}`));\n        return;\n      }\n\n      if (options.add) {\n        if (!options.email || !options.name) {\n          console.log(\n            chalk.red('ユーザー追加にはメールアドレスと名前が必要です')\n          );\n          return;\n        }\n\n        logger.info(`ユーザーを追加中: ${options.email}`);\n\n        const userData = {\n          email: options.email,\n          role: options.role,\n          permissions: getPermissionsForRole(options.role),\n          status: 'active' as const,\n          profile: {\n            name: options.name,\n            timezone: 'Asia/Tokyo',\n            language: 'ja',\n            preferences: {\n              notifications: true,\n              emailDigest: true,\n              theme: 'light' as const,\n            },\n          },\n          mfa: {\n            enabled: false,\n          },\n        };\n\n        const user = await manager.createUser(tenantId, userData);\n\n        console.log(chalk.bold('\\n✅ ユーザー追加完了'));\n        console.log(chalk.gray('─'.repeat(50)));\n        console.log(`ユーザーID: ${chalk.yellow(user.id)}`);\n        console.log(`メールアドレス: ${chalk.yellow(user.email)}`);\n        console.log(`役割: ${chalk.yellow(user.role)}`);\n        console.log(\n          `作成日: ${chalk.yellow(user.createdAt.toLocaleString('ja-JP'))}`\n        );\n      } else {\n        const users = manager.getTenantUsers(tenantId);\n\n        console.log(chalk.bold('\\n👥 ユーザー一覧'));\n        console.log(chalk.gray('─'.repeat(50)));\n\n        if (users.length === 0) {\n          console.log(chalk.yellow('ユーザーが見つかりません'));\n        } else {\n          const formatter = new OutputFormatter();\n          const tableData = users.map(user => ({\n            ID: user.id,\n            メールアドレス: user.email,\n            名前: user.profile.name,\n            役割: user.role,\n            ステータス:\n              user.status === 'active'\n                ? chalk.green('アクティブ')\n                : chalk.red('非アクティブ'),\n            作成日: user.createdAt.toLocaleDateString('ja-JP'),\n            最終ログイン: user.lastLoginAt\n              ? user.lastLoginAt.toLocaleDateString('ja-JP')\n              : 'なし',\n          }));\n\n          formatter.formatTable(tableData);\n        }\n      }\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('ユーザー管理に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// 監査ログ\ntenantCommand\n  .command('audit <tenant-id>')\n  .description('テナントの監査ログを表示')\n  .option('-l, --limit <limit>', '表示件数', '20')\n  .option('-a, --action <action>', '特定のアクションでフィルタ')\n  .option('-u, --user <user>', '特定のユーザーでフィルタ')\n  .option('-r, --risk <risk>', '特定のリスクレベルでフィルタ')\n  .option('-s, --start <start>', '開始日 (YYYY-MM-DD)')\n  .option('-e, --end <end>', '終了日 (YYYY-MM-DD)')\n  .action(async (tenantId, options) => {\n    try {\n      const manager = new MultiTenantDNSManager();\n\n      const tenant = manager.getTenant(tenantId);\n      if (!tenant) {\n        console.log(chalk.red(`テナントが見つかりません: ${tenantId}`));\n        return;\n      }\n\n      logger.info(`監査ログを取得中: ${tenantId}`);\n\n      const filterOptions: any = {\n        limit: parseInt(options.limit) || 20,\n      };\n\n      if (options.action) filterOptions.action = options.action;\n      if (options.user) filterOptions.userId = options.user;\n      if (options.risk) filterOptions.risk = options.risk;\n      if (options.start) filterOptions.startDate = new Date(options.start);\n      if (options.end) filterOptions.endDate = new Date(options.end);\n\n      const auditLogs = manager.getAuditLogs(tenantId, filterOptions);\n\n      console.log(chalk.bold('\\n📋 監査ログ'));\n      console.log(chalk.gray('─'.repeat(50)));\n\n      if (auditLogs.length === 0) {\n        console.log(chalk.yellow('監査ログが見つかりません'));\n      } else {\n        const formatter = new OutputFormatter();\n        const tableData = auditLogs.map(log => {\n          const riskColor =\n            log.risk === 'high'\n              ? chalk.red\n              : log.risk === 'medium'\n                ? chalk.yellow\n                : chalk.green;\n\n          return {\n            時刻: log.timestamp.toLocaleString('ja-JP'),\n            アクション: log.action,\n            リソース: `${log.resource.type}:${log.resource.name}`,\n            ユーザー: log.userId,\n            結果:\n              log.result === 'success'\n                ? chalk.green('成功')\n                : chalk.red('失敗'),\n            リスク: riskColor(log.risk),\n            IPアドレス: log.ipAddress,\n          };\n        });\n\n        formatter.formatTable(tableData);\n      }\n\n      await manager.shutdown();\n    } catch (error) {\n      logger.error('監査ログの取得に失敗しました', error as Error);\n      process.exit(1);\n    }\n  });\n\n// 権限取得関数\nfunction getPermissionsForRole(role: string): string[] {\n  const permissions: Record<string, string[]> = {\n    owner: ['*'],\n    admin: ['dns:*', 'users:*', 'settings:*', 'billing:read'],\n    editor: ['dns:read', 'dns:write', 'users:read'],\n    viewer: ['dns:read', 'users:read'],\n  };\n\n  return permissions[role] || permissions.viewer;\n}\n\nexport default tenantCommand;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/commands/validate.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":600,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":600,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16100,16120],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":606,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":606,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16222,16254],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":607,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":607,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16259,16297],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":609,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":609,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16334,16376],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":612,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":612,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[16417,16456],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/ai-dns-optimizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RiskLevel' is defined but never used. Allowed unused vars must match /^_/u.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'record' is defined but never used. Allowed unused args must match /^_/u.","line":451,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":451,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":452,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":452,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'record' is defined but never used. Allowed unused args must match /^_/u.","line":459,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":459,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":460,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":460,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":467,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":474,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":474,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":481,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":481,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":488,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":488,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'businessContext' is defined but never used. Allowed unused args must match /^_/u.","line":511,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":511,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":561,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":561,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'existingSuggestions' is defined but never used. Allowed unused args must match /^_/u.","line":562,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":562,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":569,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":569,"endColumn":12}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * AI駆動DNS最適化提案システム\n * 機械学習とヒューリスティックを組み合わせた包括的DNS最適化\n */\n\nimport { RiskLevel } from '../types/dns.js';\n\nimport { Logger } from './logger.js';\n\nimport type { PerformanceMetric } from './performance-monitor.js';\nimport type { DNSRecord } from '../types/dns.js';\n\nexport interface OptimizationSuggestion {\n  id: string;\n  type: 'performance' | 'security' | 'reliability' | 'cost' | 'best_practice';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  impact: {\n    performance: number; // 0-10\n    security: number; // 0-10\n    reliability: number; // 0-10\n    cost: number; // 0-10 (negative = cost reduction)\n  };\n  implementation: {\n    difficulty: 'easy' | 'medium' | 'hard';\n    estimatedTime: string;\n    steps: string[];\n    risks: string[];\n  };\n  affectedRecords: string[];\n  evidence: {\n    metrics: PerformanceMetric[];\n    riskFactors: string[];\n    benchmarks: Record<string, number>;\n  };\n}\n\nexport interface OptimizationContext {\n  domain: string;\n  records: DNSRecord[];\n  performance: PerformanceMetric[];\n  trafficPatterns: TrafficPattern[];\n  businessContext: BusinessContext;\n}\n\nexport interface TrafficPattern {\n  timestamp: number;\n  region: string;\n  requests: number;\n  latency: number;\n  errorRate: number;\n}\n\nexport interface BusinessContext {\n  industry: string;\n  scale: 'startup' | 'small' | 'medium' | 'enterprise';\n  compliance: string[];\n  budget: 'low' | 'medium' | 'high';\n  priorities: ('performance' | 'security' | 'cost' | 'reliability')[];\n}\n\nexport class AIDNSOptimizer {\n  private logger: Logger;\n  private optimizationRules: OptimizationRule[];\n  private aiModel: AIModel;\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger({ verbose: false });\n    this.optimizationRules = this.initializeOptimizationRules();\n    this.aiModel = new AIModel();\n  }\n\n  /**\n   * 包括的DNS最適化分析\n   */\n  async analyzeAndOptimize(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    this.logger.info('Starting AI-driven DNS optimization analysis', {\n      domain: context.domain,\n      recordCount: context.records.length,\n    });\n\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // 1. ヒューリスティック分析\n    const heuristicSuggestions = await this.performHeuristicAnalysis(context);\n    suggestions.push(...heuristicSuggestions);\n\n    // 2. パフォーマンス分析\n    const performanceSuggestions = await this.analyzePerformance(context);\n    suggestions.push(...performanceSuggestions);\n\n    // 3. セキュリティ分析\n    const securitySuggestions =\n      await this.analyzeSecurityOptimizations(context);\n    suggestions.push(...securitySuggestions);\n\n    // 4. コスト最適化分析\n    const costSuggestions = await this.analyzeCostOptimizations(context);\n    suggestions.push(...costSuggestions);\n\n    // 5. AI推論による高度な最適化\n    const aiSuggestions = await this.performAIAnalysis(context, suggestions);\n    suggestions.push(...aiSuggestions);\n\n    // 6. 提案の優先順位付けと重複排除\n    const prioritizedSuggestions = this.prioritizeAndDeduplicateSuggestions(\n      suggestions,\n      context\n    );\n\n    this.logger.info('DNS optimization analysis completed', {\n      totalSuggestions: prioritizedSuggestions.length,\n      criticalSuggestions: prioritizedSuggestions.filter(\n        s => s.priority === 'critical'\n      ).length,\n    });\n\n    return prioritizedSuggestions;\n  }\n\n  /**\n   * ヒューリスティック最適化分析\n   */\n  private async performHeuristicAnalysis(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // TTL最適化\n    const ttlSuggestions = this.analyzeTTLOptimization(context);\n    suggestions.push(...ttlSuggestions);\n\n    // レコード統合最適化\n    const consolidationSuggestions = this.analyzeRecordConsolidation(context);\n    suggestions.push(...consolidationSuggestions);\n\n    // 地理的分散最適化\n    const geoSuggestions = this.analyzeGeographicOptimization(context);\n    suggestions.push(...geoSuggestions);\n\n    return suggestions;\n  }\n\n  /**\n   * TTL最適化分析\n   */\n  private analyzeTTLOptimization(\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    context.records.forEach(record => {\n      // 頻繁に変更されるレコードの短いTTL提案\n      if (\n        record.ttl > 300 &&\n        this.isFrequentlyChangingRecord(record, context)\n      ) {\n        suggestions.push({\n          id: `ttl-reduce-${record.name}`,\n          type: 'performance',\n          priority: 'medium',\n          title: `${record.name}のTTL短縮提案`,\n          description: `頻繁に変更される${record.name}のTTLを${record.ttl}秒から300秒に短縮し、変更の反映を高速化`,\n          impact: {\n            performance: 6,\n            security: 2,\n            reliability: 4,\n            cost: -1,\n          },\n          implementation: {\n            difficulty: 'easy',\n            estimatedTime: '5分',\n            steps: ['現在のTTL値を確認', 'TTLを300秒に変更', '変更反映を監視'],\n            risks: ['キャッシュミス増加によるわずかな負荷増'],\n          },\n          affectedRecords: [record.name],\n          evidence: {\n            metrics: context.performance.filter(\n              m => m.metadata?.domain === record.name\n            ),\n            riskFactors: ['頻繁な変更パターン検出'],\n            benchmarks: { currentTTL: record.ttl, recommendedTTL: 300 },\n          },\n        });\n      }\n\n      // 安定したレコードの長いTTL提案\n      if (record.ttl < 3600 && this.isStableRecord(record, context)) {\n        suggestions.push({\n          id: `ttl-increase-${record.name}`,\n          type: 'performance',\n          priority: 'low',\n          title: `${record.name}のTTL延長提案`,\n          description: `安定した${record.name}のTTLを${record.ttl}秒から3600秒に延長し、キャッシュ効率を向上`,\n          impact: {\n            performance: 7,\n            security: 0,\n            reliability: 3,\n            cost: 2,\n          },\n          implementation: {\n            difficulty: 'easy',\n            estimatedTime: '5分',\n            steps: [\n              'レコード安定性を最終確認',\n              'TTLを3600秒に変更',\n              'キャッシュ効率を監視',\n            ],\n            risks: ['レコード変更時の反映遅延'],\n          },\n          affectedRecords: [record.name],\n          evidence: {\n            metrics: context.performance.filter(\n              m => m.metadata?.domain === record.name\n            ),\n            riskFactors: [],\n            benchmarks: { currentTTL: record.ttl, recommendedTTL: 3600 },\n          },\n        });\n      }\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * パフォーマンス最適化分析\n   */\n  private async analyzePerformance(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // 遅延レスポンスの分析\n    const slowQueries = context.performance.filter(\n      m => m.category === 'dns' && m.duration > 1000\n    );\n\n    if (slowQueries.length > 0) {\n      suggestions.push({\n        id: 'performance-slow-queries',\n        type: 'performance',\n        priority: 'high',\n        title: 'DNS応答遅延の最適化',\n        description: `${slowQueries.length}個のDNS問い合わせで1秒以上の遅延を検出。権威DNSサーバーの最適化を推奨`,\n        impact: {\n          performance: 8,\n          security: 0,\n          reliability: 6,\n          cost: -2,\n        },\n        implementation: {\n          difficulty: 'medium',\n          estimatedTime: '2-4時間',\n          steps: [\n            'DNS サーバー地理的分散の検討',\n            'Anycast 設定の最適化',\n            'キャッシュ戦略の見直し',\n            'DNS プロバイダーの性能評価',\n          ],\n          risks: ['DNS設定変更による一時的な不安定性'],\n        },\n        affectedRecords: slowQueries\n          .map(q => q.metadata?.domain as string)\n          .filter(Boolean),\n        evidence: {\n          metrics: slowQueries,\n          riskFactors: ['応答時間劣化'],\n          benchmarks: {\n            averageResponseTime:\n              slowQueries.reduce((sum, q) => sum + q.duration, 0) /\n              slowQueries.length,\n            targetResponseTime: 200,\n          },\n        },\n      });\n    }\n\n    // CDN最適化の提案\n    const cdnSuggestions = this.analyzeCDNOptimizations(context);\n    suggestions.push(...cdnSuggestions);\n\n    return suggestions;\n  }\n\n  /**\n   * セキュリティ最適化分析\n   */\n  private async analyzeSecurityOptimizations(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // DNSSEC実装の提案\n    const dnssecRecords = context.records.filter(\n      r => r.type === 'DS' || r.type === 'DNSKEY'\n    );\n    if (dnssecRecords.length === 0) {\n      suggestions.push({\n        id: 'security-dnssec',\n        type: 'security',\n        priority: 'high',\n        title: 'DNSSEC実装の推奨',\n        description:\n          'DNSSECが実装されていません。DNS応答の完全性と認証を向上させるため、DNSSEC実装を強く推奨',\n        impact: {\n          performance: -1,\n          security: 9,\n          reliability: 7,\n          cost: -3,\n        },\n        implementation: {\n          difficulty: 'hard',\n          estimatedTime: '1-2日',\n          steps: [\n            'DNSSEC対応DNSプロバイダーの選定',\n            'KSK/ZSKキーペアの生成',\n            'DS レコードの親ゾーンへの登録',\n            'DNSSEC検証の確認',\n          ],\n          risks: ['設定ミスによるDNS解決失敗', 'キー管理の複雑さ増加'],\n        },\n        affectedRecords: context.records.map(r => r.name),\n        evidence: {\n          metrics: [],\n          riskFactors: ['DNSSEC未実装', 'DNS応答の完全性検証不可'],\n          benchmarks: { dnssecCoverage: 0, targetCoverage: 100 },\n        },\n      });\n    }\n\n    // SPFレコードの最適化\n    const spfSuggestions = this.analyzeSPFOptimizations(context);\n    suggestions.push(...spfSuggestions);\n\n    return suggestions;\n  }\n\n  /**\n   * コスト最適化分析\n   */\n  private async analyzeCostOptimizations(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // 未使用レコードの検出\n    const unusedRecords = this.identifyUnusedRecords(context);\n    if (unusedRecords.length > 0) {\n      suggestions.push({\n        id: 'cost-unused-records',\n        type: 'cost',\n        priority: 'medium',\n        title: '未使用DNSレコードの削除',\n        description: `${unusedRecords.length}個の未使用DNSレコードを検出。削除によりコストとセキュリティリスクを削減`,\n        impact: {\n          performance: 1,\n          security: 3,\n          reliability: 1,\n          cost: 4,\n        },\n        implementation: {\n          difficulty: 'easy',\n          estimatedTime: '30分',\n          steps: [\n            '未使用レコードの最終確認',\n            'バックアップの作成',\n            '段階的な削除実行',\n            '影響監視',\n          ],\n          risks: ['誤削除による予期しないサービス影響'],\n        },\n        affectedRecords: unusedRecords.map(r => r.name),\n        evidence: {\n          metrics: context.performance.filter(m =>\n            unusedRecords.some(r => r.name === m.metadata?.domain)\n          ),\n          riskFactors: ['未使用リソース', '管理コスト増加'],\n          benchmarks: {\n            currentRecordCount: context.records.length,\n            optimizedRecordCount: context.records.length - unusedRecords.length,\n          },\n        },\n      });\n    }\n\n    return suggestions;\n  }\n\n  /**\n   * AI推論による高度な最適化\n   */\n  private async performAIAnalysis(\n    context: OptimizationContext,\n    existingSuggestions: OptimizationSuggestion[]\n  ): Promise<OptimizationSuggestion[]> {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // パターン認識による最適化\n    const patternSuggestions = await this.aiModel.analyzePatterns(\n      context,\n      existingSuggestions\n    );\n    suggestions.push(...patternSuggestions);\n\n    // 予測分析による最適化\n    const predictiveSuggestions =\n      await this.aiModel.predictiveAnalysis(context);\n    suggestions.push(...predictiveSuggestions);\n\n    return suggestions;\n  }\n\n  /**\n   * 提案の優先順位付けと重複排除\n   */\n  private prioritizeAndDeduplicateSuggestions(\n    suggestions: OptimizationSuggestion[],\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    // 重複排除\n    const uniqueSuggestions = suggestions.filter(\n      (suggestion, index, self) =>\n        index === self.findIndex(s => s.id === suggestion.id)\n    );\n\n    // ビジネスコンテキストに基づく優先順位調整\n    const prioritizedSuggestions = uniqueSuggestions.map(suggestion => {\n      const adjustedPriority = this.adjustPriorityForBusinessContext(\n        suggestion,\n        context.businessContext\n      );\n      return { ...suggestion, priority: adjustedPriority };\n    });\n\n    // 総合スコアによるソート\n    return prioritizedSuggestions.sort((a, b) => {\n      const scoreA = this.calculateTotalImpactScore(a, context.businessContext);\n      const scoreB = this.calculateTotalImpactScore(b, context.businessContext);\n      return scoreB - scoreA;\n    });\n  }\n\n  /**\n   * 補助メソッド群\n   */\n  private isFrequentlyChangingRecord(\n    record: DNSRecord,\n    context: OptimizationContext\n  ): boolean {\n    // 実装：変更履歴やパフォーマンスメトリクスから判断\n    return false; // 簡略化\n  }\n\n  private isStableRecord(\n    record: DNSRecord,\n    context: OptimizationContext\n  ): boolean {\n    // 実装：安定性指標から判断\n    return true; // 簡略化\n  }\n\n  private analyzeCDNOptimizations(\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    // CDN最適化の詳細分析\n    return [];\n  }\n\n  private analyzeSPFOptimizations(\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    // SPF最適化の詳細分析\n    return [];\n  }\n\n  private analyzeRecordConsolidation(\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    // レコード統合最適化\n    return [];\n  }\n\n  private analyzeGeographicOptimization(\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    // 地理的分散最適化\n    return [];\n  }\n\n  private identifyUnusedRecords(context: OptimizationContext): DNSRecord[] {\n    // 未使用レコードの検出（実装例）\n    // パフォーマンスメトリクスから使用されていないレコードを特定\n    const usedDomains = new Set(\n      context.performance.map(m => m.metadata?.domain).filter(Boolean)\n    );\n\n    return context.records.filter(\n      record =>\n        !usedDomains.has(record.name) &&\n        record.type !== 'SOA' &&\n        record.type !== 'NS' // 必須レコードは除外\n    );\n  }\n\n  private adjustPriorityForBusinessContext(\n    suggestion: OptimizationSuggestion,\n    businessContext: BusinessContext\n  ): OptimizationSuggestion['priority'] {\n    // ビジネスコンテキストに基づく優先順位調整\n    return suggestion.priority;\n  }\n\n  private calculateTotalImpactScore(\n    suggestion: OptimizationSuggestion,\n    businessContext: BusinessContext\n  ): number {\n    // 総合影響スコア計算\n    const weights = this.getBusinessContextWeights(businessContext);\n    return (\n      suggestion.impact.performance * weights.performance +\n      suggestion.impact.security * weights.security +\n      suggestion.impact.reliability * weights.reliability +\n      suggestion.impact.cost * weights.cost\n    );\n  }\n\n  private getBusinessContextWeights(\n    businessContext: BusinessContext\n  ): Record<string, number> {\n    // ビジネスコンテキストに基づく重み付け\n    const baseWeights = {\n      performance: 0.3,\n      security: 0.3,\n      reliability: 0.3,\n      cost: 0.1,\n    };\n\n    businessContext.priorities.forEach((priority, index) => {\n      const bonus = (businessContext.priorities.length - index) * 0.1;\n      baseWeights[priority] += bonus;\n    });\n\n    return baseWeights;\n  }\n\n  private initializeOptimizationRules(): OptimizationRule[] {\n    // 最適化ルールの初期化\n    return [];\n  }\n}\n\n/**\n * AI推論エンジン\n */\nclass AIModel {\n  async analyzePatterns(\n    context: OptimizationContext,\n    existingSuggestions: OptimizationSuggestion[]\n  ): Promise<OptimizationSuggestion[]> {\n    // パターン認識による最適化提案\n    return [];\n  }\n\n  async predictiveAnalysis(\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    // 予測分析による最適化提案\n    return [];\n  }\n}\n\ninterface OptimizationRule {\n  id: string;\n  name: string;\n  condition: (context: OptimizationContext) => boolean;\n  action: (context: OptimizationContext) => OptimizationSuggestion[];\n}\n\n// グローバルAI最適化システム\nexport const globalAIDNSOptimizer = new AIDNSOptimizer();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/api/cloudflare.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/colors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/config.ts","messages":[],"suppressedMessages":[{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":111,"column":10,"nodeType":"Literal","messageId":"unexpected","endLine":111,"endColumn":14,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/auto-detector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/cloudflare.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/generic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/route53.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-parsers/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/csv-processor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/dns-cache.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/dns-resolver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/dns-security-analyzer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'readFileSync' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'existsSync' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'join' is defined but never used. Allowed unused vars must match /^_/u.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'promisify' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PerformanceMetric' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'domain' is defined but never used. Allowed unused args must match /^_/u.","line":769,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":769,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'records' is defined but never used. Allowed unused args must match /^_/u.","line":802,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":802,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'commonTypos' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":892,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":892,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'target' is defined but never used. Allowed unused args must match /^_/u.","line":1047,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1047,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'domain' is defined but never used. Allowed unused args must match /^_/u.","line":1067,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":1067,"endColumn":44}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DNS脅威検出・防御システム\n * 高度なセキュリティ分析とリアルタイム脅威検出\n */\n\nimport { createHash } from 'crypto';\nimport { EventEmitter } from 'events';\nimport { readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport { promisify } from 'util';\n\nimport { Logger } from './logger.js';\nimport { PerformanceMetric } from './performance-monitor.js';\n\nimport type { DNSRecord } from '../types/dns.js';\n\nexport interface SecurityThreat {\n  id: string;\n  type:\n    | 'malware'\n    | 'phishing'\n    | 'typosquatting'\n    | 'dga'\n    | 'fastflux'\n    | 'dns_hijacking'\n    | 'cache_poisoning'\n    | 'subdomain_takeover';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  confidence: number; // 0-100\n  domain: string;\n  record?: DNSRecord;\n  timestamp: number;\n  description: string;\n  indicators: {\n    technicalIndicators: string[];\n    behavioralIndicators: string[];\n    reputationIndicators: string[];\n  };\n  mitigation: {\n    immediateActions: string[];\n    longTermActions: string[];\n    preventionMeasures: string[];\n  };\n  evidence: {\n    dnsRecords: DNSRecord[];\n    networkAnalysis: NetworkAnalysis;\n    reputationData: ReputationData;\n    algorithmicAnalysis: AlgorithmicAnalysis;\n  };\n}\n\nexport interface NetworkAnalysis {\n  ipReputationScore: number;\n  geoLocationRisk: number;\n  domainAge: number;\n  certificateStatus: 'valid' | 'invalid' | 'expired' | 'self_signed' | 'none';\n  portScanResults: PortScanResult[];\n}\n\nexport interface ReputationData {\n  blacklistStatus: BlacklistStatus[];\n  threatIntelligence: ThreatIntelligence[];\n  historicalIncidents: HistoricalIncident[];\n  communityReports: CommunityReport[];\n}\n\nexport interface AlgorithmicAnalysis {\n  domainGenerationScore: number;\n  typosquattingScore: number;\n  homographScore: number;\n  entropyScore: number;\n  ngramAnalysis: NgramAnalysis;\n  lexicalAnalysis: LexicalAnalysis;\n}\n\nexport interface BlacklistStatus {\n  source: string;\n  status: 'blacklisted' | 'suspicious' | 'clean';\n  lastChecked: number;\n  reason?: string;\n}\n\nexport interface ThreatIntelligence {\n  source: string;\n  threatType: string;\n  confidence: number;\n  lastSeen: number;\n  details: string;\n}\n\nexport interface HistoricalIncident {\n  timestamp: number;\n  type: string;\n  description: string;\n  severity: string;\n}\n\nexport interface CommunityReport {\n  source: string;\n  reportType: string;\n  timestamp: number;\n  reliability: number;\n}\n\nexport interface PortScanResult {\n  port: number;\n  status: 'open' | 'closed' | 'filtered';\n  service?: string;\n  version?: string;\n}\n\nexport interface NgramAnalysis {\n  bigramScore: number;\n  trigramScore: number;\n  commonPatterns: string[];\n  suspiciousPatterns: string[];\n}\n\nexport interface LexicalAnalysis {\n  wordCount: number;\n  avgWordLength: number;\n  consonantVowelRatio: number;\n  dictionaryScore: number;\n  brandSimilarity: BrandSimilarity[];\n}\n\nexport interface BrandSimilarity {\n  brand: string;\n  similarity: number;\n  algorithm: 'levenshtein' | 'jaro_winkler' | 'soundex';\n}\n\nexport interface SecurityConfig {\n  threatDetection: {\n    enabledAnalyzers: string[];\n    confidenceThreshold: number;\n    realTimeMonitoring: boolean;\n  };\n  reputationChecking: {\n    enabledSources: string[];\n    cacheTimeout: number;\n    parallelChecks: number;\n  };\n  alerting: {\n    enabledChannels: string[];\n    severityThreshold: string;\n    rateLimiting: boolean;\n  };\n  mitigation: {\n    autoBlocking: boolean;\n    quarantineEnabled: boolean;\n    alertingEnabled: boolean;\n  };\n}\n\nexport class DNSSecurityAnalyzer extends EventEmitter {\n  private logger: Logger;\n  private config: SecurityConfig;\n  private threatDatabase: Map<string, SecurityThreat[]>;\n  private reputationCache: Map<string, ReputationData>;\n  private monitoringInterval?: NodeJS.Timeout;\n  private malwareDomains: Set<string>;\n  private phishingDomains: Set<string>;\n  private typosquattingPatterns: RegExp[];\n\n  constructor(logger?: Logger, config?: Partial<SecurityConfig>) {\n    super();\n    this.logger = logger || new Logger({ verbose: false });\n    this.config = {\n      threatDetection: {\n        enabledAnalyzers: [\n          'malware',\n          'phishing',\n          'typosquatting',\n          'dga',\n          'fastflux',\n        ],\n        confidenceThreshold: 70,\n        realTimeMonitoring: true,\n      },\n      reputationChecking: {\n        enabledSources: ['virustotal', 'urlvoid', 'cisco_umbrella', 'opendns'],\n        cacheTimeout: 3600000, // 1時間\n        parallelChecks: 5,\n      },\n      alerting: {\n        enabledChannels: ['log', 'webhook', 'email'],\n        severityThreshold: 'medium',\n        rateLimiting: true,\n      },\n      mitigation: {\n        autoBlocking: false,\n        quarantineEnabled: true,\n        alertingEnabled: true,\n      },\n      ...config,\n    };\n\n    this.threatDatabase = new Map();\n    this.reputationCache = new Map();\n    this.malwareDomains = new Set();\n    this.phishingDomains = new Set();\n    this.typosquattingPatterns = [];\n\n    this.initializeThreatDatabase();\n    this.initializeReputationSources();\n  }\n\n  /**\n   * 包括的セキュリティ分析\n   */\n  async analyzeSecurityThreats(\n    domains: string[],\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    this.logger.info('DNS脅威検出分析を開始します', {\n      domainCount: domains.length,\n      recordCount: records.length,\n    });\n\n    const threats: SecurityThreat[] = [];\n    const startTime = Date.now();\n\n    // 並列分析の実行\n    const analysisPromises = domains.map(domain =>\n      this.analyzeDomainThreats(domain, records)\n    );\n    const domainThreats = await Promise.all(analysisPromises);\n\n    // 結果のマージ\n    domainThreats.forEach(threats_array => {\n      threats.push(...threats_array);\n    });\n\n    // 重複排除と優先度ソート\n    const uniqueThreats = this.deduplicateAndSortThreats(threats);\n\n    this.logger.info('DNS脅威検出分析が完了しました', {\n      threatsFound: uniqueThreats.length,\n      analysisTime: Date.now() - startTime,\n      criticalThreats: uniqueThreats.filter(t => t.severity === 'critical')\n        .length,\n    });\n\n    // 脅威データベースに記録\n    uniqueThreats.forEach(threat => {\n      this.recordThreat(threat);\n      this.emitThreatAlert(threat);\n    });\n\n    return uniqueThreats;\n  }\n\n  /**\n   * 単一ドメインの脅威分析\n   */\n  private async analyzeDomainThreats(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n    const domainRecords = records.filter(\n      r => r.name === domain || r.name.endsWith(`.${domain}`)\n    );\n\n    // 各種脅威検出アナライザーを実行\n    const analyzers = [\n      this.detectMalware(domain, domainRecords),\n      this.detectPhishing(domain, domainRecords),\n      this.detectTyposquatting(domain, domainRecords),\n      this.detectDGA(domain, domainRecords),\n      this.detectFastFlux(domain, domainRecords),\n      this.detectDNSHijacking(domain, domainRecords),\n      this.detectCachePoisoning(domain, domainRecords),\n      this.detectSubdomainTakeover(domain, domainRecords),\n    ];\n\n    const results = await Promise.allSettled(analyzers);\n\n    results.forEach((result, index) => {\n      if (result.status === 'fulfilled' && result.value) {\n        threats.push(...result.value);\n      } else if (result.status === 'rejected') {\n        this.logger.warn(\n          `脅威検出アナライザー ${index} でエラーが発生しました:`,\n          result.reason\n        );\n      }\n    });\n\n    return threats;\n  }\n\n  /**\n   * マルウェア検出\n   */\n  private async detectMalware(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // 既知のマルウェアドメインとの照合\n    if (this.malwareDomains.has(domain)) {\n      threats.push({\n        id: this.generateThreatId('malware', domain),\n        type: 'malware',\n        severity: 'critical',\n        confidence: 95,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} は既知のマルウェア配布ドメインです`,\n        indicators: {\n          technicalIndicators: ['既知のマルウェアドメイン'],\n          behavioralIndicators: ['マルウェア配布履歴'],\n          reputationIndicators: ['複数のセキュリティベンダーによる検出'],\n        },\n        mitigation: {\n          immediateActions: [\n            'ドメインへのアクセス遮断',\n            '関連IPアドレスのブロック',\n          ],\n          longTermActions: ['継続的な監視', 'インシデント対応計画の実行'],\n          preventionMeasures: ['DNSフィルタリング強化', '従業員教育'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    // 疑わしいマルウェアパターンの検出\n    const suspiciousPatterns = [\n      /^[a-z0-9]{8,}\\.com$/i, // 長いランダム文字列\n      /^[0-9]{1,3}-[0-9]{1,3}-[0-9]{1,3}-[0-9]{1,3}\\..*$/i, // IPアドレス形式\n      /^(update|security|microsoft|adobe|flash).*\\..*$/i, // 偽装パターン\n    ];\n\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(domain)) {\n        const confidence = await this.calculateMalwareConfidence(\n          domain,\n          records\n        );\n        if (confidence > this.config.threatDetection.confidenceThreshold) {\n          threats.push({\n            id: this.generateThreatId('malware', domain),\n            type: 'malware',\n            severity: this.calculateSeverity(confidence),\n            confidence,\n            domain,\n            timestamp: Date.now(),\n            description: `${domain} は疑わしいマルウェアパターンを持っています`,\n            indicators: {\n              technicalIndicators: [`パターンマッチ: ${pattern.source}`],\n              behavioralIndicators: ['疑わしいドメイン構造'],\n              reputationIndicators: [],\n            },\n            mitigation: {\n              immediateActions: ['詳細調査の実施', '一時的な監視強化'],\n              longTermActions: ['継続的な監視', 'レピュテーション確認'],\n              preventionMeasures: ['パターンベースフィルタリング'],\n            },\n            evidence: {\n              dnsRecords: records,\n              networkAnalysis: await this.performNetworkAnalysis(domain),\n              reputationData: await this.getReputationData(domain),\n              algorithmicAnalysis:\n                await this.performAlgorithmicAnalysis(domain),\n            },\n          });\n        }\n      }\n    }\n\n    return threats;\n  }\n\n  /**\n   * フィッシング検出\n   */\n  private async detectPhishing(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // 既知のフィッシングドメインとの照合\n    if (this.phishingDomains.has(domain)) {\n      threats.push({\n        id: this.generateThreatId('phishing', domain),\n        type: 'phishing',\n        severity: 'high',\n        confidence: 90,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} は既知のフィッシングドメインです`,\n        indicators: {\n          technicalIndicators: ['既知のフィッシングドメイン'],\n          behavioralIndicators: ['フィッシング攻撃履歴'],\n          reputationIndicators: ['セキュリティベンダーによる検出'],\n        },\n        mitigation: {\n          immediateActions: ['ドメインへのアクセス遮断', 'ユーザー警告の実施'],\n          longTermActions: ['継続的な監視', 'インシデント報告'],\n          preventionMeasures: ['フィッシング対策教育', 'メールフィルタリング'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    // ブランド偽装の検出\n    const brandSimilarities = await this.detectBrandImpersonation(domain);\n    for (const similarity of brandSimilarities) {\n      if (similarity.similarity > 0.8) {\n        threats.push({\n          id: this.generateThreatId('phishing', domain),\n          type: 'phishing',\n          severity: 'high',\n          confidence: similarity.similarity * 100,\n          domain,\n          timestamp: Date.now(),\n          description: `${domain} は ${similarity.brand} を偽装している可能性があります`,\n          indicators: {\n            technicalIndicators: [`ブランド類似度: ${similarity.similarity}`],\n            behavioralIndicators: ['ブランド偽装の疑い'],\n            reputationIndicators: [],\n          },\n          mitigation: {\n            immediateActions: ['ブランド所有者への通知', 'ドメイン調査'],\n            longTermActions: ['法的措置の検討', '継続監視'],\n            preventionMeasures: ['ブランド保護サービス', 'ドメイン監視'],\n          },\n          evidence: {\n            dnsRecords: records,\n            networkAnalysis: await this.performNetworkAnalysis(domain),\n            reputationData: await this.getReputationData(domain),\n            algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n          },\n        });\n      }\n    }\n\n    return threats;\n  }\n\n  /**\n   * タイポスクワッティング検出\n   */\n  private async detectTyposquatting(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // 人気ドメインとの類似性チェック\n    const typosquattingScore = await this.calculateTyposquattingScore(domain);\n    if (typosquattingScore > this.config.threatDetection.confidenceThreshold) {\n      threats.push({\n        id: this.generateThreatId('typosquatting', domain),\n        type: 'typosquatting',\n        severity: 'medium',\n        confidence: typosquattingScore,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} はタイポスクワッティングドメインの可能性があります`,\n        indicators: {\n          technicalIndicators: [\n            `タイポスクワッティングスコア: ${typosquattingScore}`,\n          ],\n          behavioralIndicators: ['人気ドメインとの類似性'],\n          reputationIndicators: [],\n        },\n        mitigation: {\n          immediateActions: ['ドメイン所有者の確認', '詳細調査'],\n          longTermActions: ['継続監視', 'ブランド保護'],\n          preventionMeasures: ['類似ドメインの事前登録'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * DGA (Domain Generation Algorithm) 検出\n   */\n  private async detectDGA(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    const dgaScore = await this.calculateDGAScore(domain);\n    if (dgaScore > this.config.threatDetection.confidenceThreshold) {\n      threats.push({\n        id: this.generateThreatId('dga', domain),\n        type: 'dga',\n        severity: 'high',\n        confidence: dgaScore,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} はDGA生成ドメインの可能性があります`,\n        indicators: {\n          technicalIndicators: [`DGAスコア: ${dgaScore}`],\n          behavioralIndicators: ['アルゴリズム的パターン'],\n          reputationIndicators: [],\n        },\n        mitigation: {\n          immediateActions: ['トラフィック分析', 'マルウェア調査'],\n          longTermActions: ['DGA パターン学習', 'ボットネット調査'],\n          preventionMeasures: ['DGA検出システム強化'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * Fast Flux 検出\n   */\n  private async detectFastFlux(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    const aRecords = records.filter(r => r.type === 'A');\n    if (aRecords.length > 10) {\n      // 多数のA レコード\n      const fastFluxScore = await this.calculateFastFluxScore(domain, aRecords);\n      if (fastFluxScore > this.config.threatDetection.confidenceThreshold) {\n        threats.push({\n          id: this.generateThreatId('fastflux', domain),\n          type: 'fastflux',\n          severity: 'high',\n          confidence: fastFluxScore,\n          domain,\n          timestamp: Date.now(),\n          description: `${domain} はFast Fluxネットワークの可能性があります`,\n          indicators: {\n            technicalIndicators: [\n              `A レコード数: ${aRecords.length}`,\n              `Fast Fluxスコア: ${fastFluxScore}`,\n            ],\n            behavioralIndicators: ['短いTTL', '多数のIPアドレス'],\n            reputationIndicators: [],\n          },\n          mitigation: {\n            immediateActions: ['IPアドレス分析', 'ネットワーク調査'],\n            longTermActions: ['ボットネット調査', '継続監視'],\n            preventionMeasures: ['Fast Flux検出システム'],\n          },\n          evidence: {\n            dnsRecords: records,\n            networkAnalysis: await this.performNetworkAnalysis(domain),\n            reputationData: await this.getReputationData(domain),\n            algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n          },\n        });\n      }\n    }\n\n    return threats;\n  }\n\n  /**\n   * DNS ハイジャック検出\n   */\n  private async detectDNSHijacking(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // 権威DNSサーバーの変更検出\n    const nsRecords = records.filter(r => r.type === 'NS');\n    const hijackScore = await this.calculateHijackScore(domain, nsRecords);\n\n    if (hijackScore > this.config.threatDetection.confidenceThreshold) {\n      threats.push({\n        id: this.generateThreatId('dns_hijacking', domain),\n        type: 'dns_hijacking',\n        severity: 'critical',\n        confidence: hijackScore,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} でDNSハイジャックの可能性があります`,\n        indicators: {\n          technicalIndicators: [\n            `権威DNSサーバー異常`,\n            `ハイジャックスコア: ${hijackScore}`,\n          ],\n          behavioralIndicators: ['NSレコードの予期しない変更'],\n          reputationIndicators: [],\n        },\n        mitigation: {\n          immediateActions: ['DNS設定の確認', '権威DNSサーバーの検証'],\n          longTermActions: ['DNSセキュリティ強化', 'DNSSEC実装'],\n          preventionMeasures: ['DNS監視システム', 'レジストラセキュリティ'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * キャッシュポイズニング検出\n   */\n  private async detectCachePoisoning(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // DNS応答の整合性チェック\n    const poisoningScore = await this.calculateCachePoisoningScore(\n      domain,\n      records\n    );\n\n    if (poisoningScore > this.config.threatDetection.confidenceThreshold) {\n      threats.push({\n        id: this.generateThreatId('cache_poisoning', domain),\n        type: 'cache_poisoning',\n        severity: 'high',\n        confidence: poisoningScore,\n        domain,\n        timestamp: Date.now(),\n        description: `${domain} でキャッシュポイズニングの可能性があります`,\n        indicators: {\n          technicalIndicators: [\n            `応答整合性異常`,\n            `ポイズニングスコア: ${poisoningScore}`,\n          ],\n          behavioralIndicators: ['DNS応答の不整合'],\n          reputationIndicators: [],\n        },\n        mitigation: {\n          immediateActions: ['DNSキャッシュのクリア', '応答検証'],\n          longTermActions: ['DNSセキュリティ強化', 'DNSSEC実装'],\n          preventionMeasures: ['DNS応答検証', 'セキュアDNS'],\n        },\n        evidence: {\n          dnsRecords: records,\n          networkAnalysis: await this.performNetworkAnalysis(domain),\n          reputationData: await this.getReputationData(domain),\n          algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n        },\n      });\n    }\n\n    return threats;\n  }\n\n  /**\n   * サブドメイン乗っ取り検出\n   */\n  private async detectSubdomainTakeover(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<SecurityThreat[]> {\n    const threats: SecurityThreat[] = [];\n\n    // CNAME レコードの検証\n    const cnameRecords = records.filter(r => r.type === 'CNAME');\n\n    for (const record of cnameRecords) {\n      const takeoverScore = await this.calculateSubdomainTakeoverScore(record);\n\n      if (takeoverScore > this.config.threatDetection.confidenceThreshold) {\n        threats.push({\n          id: this.generateThreatId('subdomain_takeover', domain),\n          type: 'subdomain_takeover',\n          severity: 'high',\n          confidence: takeoverScore,\n          domain,\n          record,\n          timestamp: Date.now(),\n          description: `${record.name} でサブドメイン乗っ取りの可能性があります`,\n          indicators: {\n            technicalIndicators: [\n              `CNAME先未登録`,\n              `乗っ取りスコア: ${takeoverScore}`,\n            ],\n            behavioralIndicators: ['サブドメイン設定ミス'],\n            reputationIndicators: [],\n          },\n          mitigation: {\n            immediateActions: ['CNAME設定の確認', 'サブドメインの無効化'],\n            longTermActions: ['サブドメイン管理強化', '定期的な監査'],\n            preventionMeasures: ['サブドメイン監視', '設定管理'],\n          },\n          evidence: {\n            dnsRecords: records,\n            networkAnalysis: await this.performNetworkAnalysis(domain),\n            reputationData: await this.getReputationData(domain),\n            algorithmicAnalysis: await this.performAlgorithmicAnalysis(domain),\n          },\n        });\n      }\n    }\n\n    return threats;\n  }\n\n  /**\n   * レピュテーションデータの取得\n   */\n  private async getReputationData(domain: string): Promise<ReputationData> {\n    // キャッシュから取得を試行\n    const cached = this.reputationCache.get(domain);\n    if (cached) {\n      return cached;\n    }\n\n    // 実際の実装では、複数のレピュテーションサービスから情報を収集\n    const reputationData: ReputationData = {\n      blacklistStatus: [\n        {\n          source: 'VirusTotal',\n          status: 'clean',\n          lastChecked: Date.now(),\n        },\n      ],\n      threatIntelligence: [],\n      historicalIncidents: [],\n      communityReports: [],\n    };\n\n    // キャッシュに保存\n    this.reputationCache.set(domain, reputationData);\n\n    return reputationData;\n  }\n\n  /**\n   * ネットワーク分析の実行\n   */\n  private async performNetworkAnalysis(\n    domain: string\n  ): Promise<NetworkAnalysis> {\n    // 実際の実装では、IP レピュテーション、地理的位置、証明書状態などを分析\n    return {\n      ipReputationScore: 50,\n      geoLocationRisk: 30,\n      domainAge: 365,\n      certificateStatus: 'valid',\n      portScanResults: [],\n    };\n  }\n\n  /**\n   * アルゴリズム分析の実行\n   */\n  private async performAlgorithmicAnalysis(\n    domain: string\n  ): Promise<AlgorithmicAnalysis> {\n    return {\n      domainGenerationScore: await this.calculateDGAScore(domain),\n      typosquattingScore: await this.calculateTyposquattingScore(domain),\n      homographScore: this.calculateHomographScore(domain),\n      entropyScore: this.calculateEntropyScore(domain),\n      ngramAnalysis: await this.performNgramAnalysis(domain),\n      lexicalAnalysis: await this.performLexicalAnalysis(domain),\n    };\n  }\n\n  /**\n   * ヘルパーメソッド群\n   */\n  private async calculateMalwareConfidence(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<number> {\n    // 実装例：複数の指標を組み合わせて信頼度を算出\n    let confidence = 0;\n\n    // ドメインの構造分析\n    if (domain.length > 20) confidence += 20;\n    if (/[0-9]{5,}/.test(domain)) confidence += 30;\n    if (domain.includes('update') || domain.includes('security'))\n      confidence += 25;\n\n    return Math.min(confidence, 100);\n  }\n\n  private calculateSeverity(confidence: number): SecurityThreat['severity'] {\n    if (confidence >= 90) return 'critical';\n    if (confidence >= 70) return 'high';\n    if (confidence >= 50) return 'medium';\n    return 'low';\n  }\n\n  private async detectBrandImpersonation(\n    domain: string\n  ): Promise<BrandSimilarity[]> {\n    const popularBrands = [\n      'google',\n      'microsoft',\n      'apple',\n      'amazon',\n      'facebook',\n      'paypal',\n      'netflix',\n    ];\n    const similarities: BrandSimilarity[] = [];\n\n    for (const brand of popularBrands) {\n      const similarity = this.calculateLevenshteinSimilarity(domain, brand);\n      if (similarity > 0.6) {\n        similarities.push({\n          brand,\n          similarity,\n          algorithm: 'levenshtein',\n        });\n      }\n    }\n\n    return similarities;\n  }\n\n  private calculateLevenshteinSimilarity(str1: string, str2: string): number {\n    const distance = this.levenshteinDistance(str1, str2);\n    const maxLen = Math.max(str1.length, str2.length);\n    return 1 - distance / maxLen;\n  }\n\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix = [];\n    for (let i = 0; i <= str2.length; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= str1.length; j++) {\n      matrix[0][j] = j;\n    }\n    for (let i = 1; i <= str2.length; i++) {\n      for (let j = 1; j <= str1.length; j++) {\n        if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n          matrix[i][j] = matrix[i - 1][j - 1];\n        } else {\n          matrix[i][j] = Math.min(\n            matrix[i - 1][j - 1] + 1,\n            matrix[i][j - 1] + 1,\n            matrix[i - 1][j] + 1\n          );\n        }\n      }\n    }\n    return matrix[str2.length][str1.length];\n  }\n\n  private async calculateTyposquattingScore(domain: string): Promise<number> {\n    // 実装例：複数のタイポスクワッティング指標を組み合わせ\n    let score = 0;\n\n    // 人気ドメインとの類似性\n    const brandSimilarities = await this.detectBrandImpersonation(domain);\n    if (brandSimilarities.length > 0) {\n      score += brandSimilarities[0].similarity * 50;\n    }\n\n    // 文字の置換パターン\n    const commonTypos = [\n      { from: '0', to: 'o' },\n      { from: '1', to: 'i' },\n      { from: '3', to: 'e' },\n    ];\n    // 実装詳細は省略\n\n    return Math.min(score, 100);\n  }\n\n  private async calculateDGAScore(domain: string): Promise<number> {\n    let score = 0;\n\n    // エントロピー計算\n    const entropy = this.calculateEntropyScore(domain);\n    score += entropy * 0.4;\n\n    // 文字パターン分析\n    const vowelCount = (domain.match(/[aeiou]/gi) || []).length;\n    const consonantCount = domain.length - vowelCount;\n    const ratio = consonantCount / vowelCount;\n\n    if (ratio > 3) score += 30;\n    if (ratio > 5) score += 20;\n\n    // 辞書単語の存在\n    const dictionaryScore = await this.calculateDictionaryScore(domain);\n    score += (100 - dictionaryScore) * 0.3;\n\n    return Math.min(score, 100);\n  }\n\n  private calculateEntropyScore(domain: string): number {\n    const chars = domain.split('');\n    const frequencies = chars.reduce(\n      (acc, char) => {\n        acc[char] = (acc[char] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    let entropy = 0;\n    const len = domain.length;\n\n    Object.values(frequencies).forEach(freq => {\n      const p = freq / len;\n      entropy -= p * Math.log2(p);\n    });\n\n    return (entropy / 4) * 100; // 正規化\n  }\n\n  private async calculateDictionaryScore(domain: string): Promise<number> {\n    // 実装例：辞書単語との照合\n    const commonWords = [\n      'com',\n      'net',\n      'org',\n      'www',\n      'mail',\n      'ftp',\n      'web',\n      'blog',\n    ];\n    let score = 0;\n\n    for (const word of commonWords) {\n      if (domain.includes(word)) {\n        score += 10;\n      }\n    }\n\n    return Math.min(score, 100);\n  }\n\n  private async calculateFastFluxScore(\n    domain: string,\n    aRecords: DNSRecord[]\n  ): Promise<number> {\n    let score = 0;\n\n    // A レコード数による評価\n    if (aRecords.length > 20) score += 40;\n    else if (aRecords.length > 10) score += 20;\n\n    // TTL値による評価\n    const avgTTL =\n      aRecords.reduce((sum, record) => sum + record.ttl, 0) / aRecords.length;\n    if (avgTTL < 300) score += 30;\n    else if (avgTTL < 600) score += 15;\n\n    // IP アドレス分散による評価\n    const ipAddresses = aRecords.map(r => r.value);\n    const uniqueSubnets = new Set(\n      ipAddresses.map(ip => ip.split('.').slice(0, 2).join('.'))\n    );\n\n    if (uniqueSubnets.size > 5) score += 30;\n\n    return Math.min(score, 100);\n  }\n\n  private async calculateHijackScore(\n    domain: string,\n    nsRecords: DNSRecord[]\n  ): Promise<number> {\n    // 実装例：NSレコードの異常検出\n    let score = 0;\n\n    // 疑わしいネームサーバーの検出\n    const suspiciousNS = ['ns1.suspended-domain.com', 'ns.expired-domain.com'];\n\n    for (const record of nsRecords) {\n      if (suspiciousNS.some(ns => record.value.includes(ns))) {\n        score += 50;\n      }\n    }\n\n    return Math.min(score, 100);\n  }\n\n  private async calculateCachePoisoningScore(\n    domain: string,\n    records: DNSRecord[]\n  ): Promise<number> {\n    // 実装例：応答整合性の評価\n    const score = 0;\n\n    // 複数のAレコードの整合性チェック\n    const aRecords = records.filter(r => r.type === 'A');\n    if (aRecords.length > 1) {\n      // 実装詳細は省略\n    }\n\n    return Math.min(score, 100);\n  }\n\n  private async calculateSubdomainTakeoverScore(\n    record: DNSRecord\n  ): Promise<number> {\n    // 実装例：CNAME先の存在確認\n    let score = 0;\n\n    if (record.type === 'CNAME') {\n      // CNAME先の存在確認（実装は省略）\n      const targetExists = await this.checkCNAMETargetExists(record.value);\n      if (!targetExists) {\n        score += 80;\n      }\n    }\n\n    return Math.min(score, 100);\n  }\n\n  private async checkCNAMETargetExists(target: string): Promise<boolean> {\n    // 実装例：CNAME先の存在確認\n    // 実際の実装ではDNS解決を行う\n    return true;\n  }\n\n  private calculateHomographScore(domain: string): number {\n    // 実装例：同形文字の検出\n    const homographs = ['а', 'о', 'р', 'е']; // キリル文字\n    let score = 0;\n\n    for (const char of homographs) {\n      if (domain.includes(char)) {\n        score += 25;\n      }\n    }\n\n    return Math.min(score, 100);\n  }\n\n  private async performNgramAnalysis(domain: string): Promise<NgramAnalysis> {\n    // 実装例：N-gram分析\n    return {\n      bigramScore: 50,\n      trigramScore: 60,\n      commonPatterns: ['th', 'er', 'on'],\n      suspiciousPatterns: ['xz', 'qw', 'zx'],\n    };\n  }\n\n  private async performLexicalAnalysis(\n    domain: string\n  ): Promise<LexicalAnalysis> {\n    const words = domain.split(/[.-]/);\n    const wordCount = words.length;\n    const avgWordLength =\n      words.reduce((sum, word) => sum + word.length, 0) / wordCount;\n\n    const vowels = (domain.match(/[aeiou]/gi) || []).length;\n    const consonants = domain.length - vowels;\n    const consonantVowelRatio = consonants / vowels;\n\n    return {\n      wordCount,\n      avgWordLength,\n      consonantVowelRatio,\n      dictionaryScore: await this.calculateDictionaryScore(domain),\n      brandSimilarity: await this.detectBrandImpersonation(domain),\n    };\n  }\n\n  private generateThreatId(type: string, domain: string): string {\n    const timestamp = Date.now().toString();\n    const hash = createHash('md5')\n      .update(`${type}-${domain}-${timestamp}`)\n      .digest('hex');\n    return `${type}-${hash.substring(0, 8)}`;\n  }\n\n  private deduplicateAndSortThreats(\n    threats: SecurityThreat[]\n  ): SecurityThreat[] {\n    const unique = new Map<string, SecurityThreat>();\n\n    threats.forEach(threat => {\n      const key = `${threat.type}-${threat.domain}`;\n      const existing = unique.get(key);\n\n      if (!existing || threat.confidence > existing.confidence) {\n        unique.set(key, threat);\n      }\n    });\n\n    return Array.from(unique.values()).sort((a, b) => {\n      // 重要度でソート\n      const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      const severityDiff =\n        severityOrder[b.severity] - severityOrder[a.severity];\n\n      if (severityDiff !== 0) return severityDiff;\n\n      // 信頼度でソート\n      return b.confidence - a.confidence;\n    });\n  }\n\n  private recordThreat(threat: SecurityThreat): void {\n    const domainThreats = this.threatDatabase.get(threat.domain) || [];\n    domainThreats.push(threat);\n    this.threatDatabase.set(threat.domain, domainThreats);\n  }\n\n  private emitThreatAlert(threat: SecurityThreat): void {\n    this.emit('threat', threat);\n\n    if (threat.severity === 'critical' || threat.severity === 'high') {\n      this.emit('high-priority-threat', threat);\n    }\n  }\n\n  private initializeThreatDatabase(): void {\n    // 実際の実装では、既知の脅威データベースを読み込む\n    // ここでは簡略化してサンプルデータを追加\n    this.malwareDomains.add('malware-example.com');\n    this.phishingDomains.add('phishing-example.com');\n  }\n\n  private initializeReputationSources(): void {\n    // レピュテーションソースの初期化\n    this.logger.info('レピュテーションソースを初期化しました');\n  }\n\n  /**\n   * リアルタイム監視の開始\n   */\n  startRealTimeMonitoring(intervalMs = 60000): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    this.monitoringInterval = setInterval(() => {\n      this.emit('monitoring-cycle');\n    }, intervalMs);\n\n    this.logger.info('リアルタイム脅威監視を開始しました', {\n      interval: intervalMs,\n    });\n  }\n\n  /**\n   * 監視停止\n   */\n  stopRealTimeMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = undefined;\n      this.logger.info('リアルタイム脅威監視を停止しました');\n    }\n  }\n\n  /**\n   * 脅威データベースの取得\n   */\n  getThreatDatabase(): Map<string, SecurityThreat[]> {\n    return new Map(this.threatDatabase);\n  }\n\n  /**\n   * 脅威統計の取得\n   */\n  getThreatStatistics(): {\n    totalThreats: number;\n    threatsByType: Record<string, number>;\n    threatsBySeverity: Record<string, number>;\n    recentThreats: SecurityThreat[];\n  } {\n    const allThreats = Array.from(this.threatDatabase.values()).flat();\n\n    return {\n      totalThreats: allThreats.length,\n      threatsByType: allThreats.reduce(\n        (acc, threat) => {\n          acc[threat.type] = (acc[threat.type] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      ),\n      threatsBySeverity: allThreats.reduce(\n        (acc, threat) => {\n          acc[threat.severity] = (acc[threat.severity] || 0) + 1;\n          return acc;\n        },\n        {} as Record<string, number>\n      ),\n      recentThreats: allThreats\n        .filter(threat => Date.now() - threat.timestamp < 86400000) // 24時間以内\n        .sort((a, b) => b.timestamp - a.timestamp)\n        .slice(0, 10),\n    };\n  }\n}\n\n// グローバルセキュリティアナライザー\nexport const globalSecurityAnalyzer = new DNSSecurityAnalyzer();\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/edge-computing-dns-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'location' is defined but never used. Allowed unused args must match /^_/u.","line":762,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":762,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":816,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":816,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20936,20939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20936,20939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trainingData' is defined but never used. Allowed unused args must match /^_/u.","line":829,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":829,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":829,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":829,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21209,21212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21209,21212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * エッジコンピューティング DNS管理システム\n *\n * グローバルエッジロケーションでの高速DNS解決を実現\n * - 地理的に分散したエッジサーバーでの処理\n * - AIによる予測的DNS解決\n * - リアルタイムグローバル負荷分散\n * - エッジキャッシュによる超高速レスポンス\n */\n\nimport { EventEmitter } from 'events';\n\nimport { Logger } from '@lib/logger.js';\n\nimport type { DNSRecord, DNSRecordType } from '@types/index.js';\n\nexport interface EdgeLocation {\n  id: string;\n  region: string;\n  city: string;\n  country: string;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  capacity: number;\n  load: number;\n  latency: number;\n  isActive: boolean;\n  lastHealthCheck: Date;\n  supportedFeatures: string[];\n  hardware: {\n    cpu: string;\n    memory: number;\n    storage: number;\n    networkCapacity: number;\n  };\n}\n\nexport interface EdgeDNSQuery {\n  id: string;\n  domain: string;\n  type: DNSRecordType;\n  clientIP: string;\n  clientLocation: {\n    country: string;\n    city: string;\n    coordinates: {\n      latitude: number;\n      longitude: number;\n    };\n  };\n  timestamp: Date;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  context: {\n    userAgent?: string;\n    requestSource: string;\n    expectedResponseTime: number;\n  };\n}\n\nexport interface EdgeDNSResponse {\n  queryId: string;\n  records: DNSRecord[];\n  source: 'edge-cache' | 'edge-resolve' | 'origin-fallback';\n  edgeLocationId: string;\n  processingTime: number;\n  cacheHit: boolean;\n  prediction?: {\n    confidence: number;\n    algorithm: string;\n    trainingData: string;\n  };\n  metadata: {\n    totalHops: number;\n    networkLatency: number;\n    edgeProcessingTime: number;\n    compressionRatio: number;\n  };\n}\n\nexport interface EdgeLoadBalancingStrategy {\n  algorithm:\n    | 'geographic'\n    | 'least-connections'\n    | 'weighted-round-robin'\n    | 'ai-predicted';\n  weights: Record<string, number>;\n  healthCheckInterval: number;\n  failoverThreshold: number;\n  maxRetries: number;\n  adaptiveWeighting: boolean;\n}\n\nexport interface EdgeCachePolicy {\n  ttl: number;\n  maxSize: number;\n  evictionPolicy: 'lru' | 'lfu' | 'ttl-based' | 'ai-optimized';\n  compressionEnabled: boolean;\n  prefetchEnabled: boolean;\n  predictiveInvalidation: boolean;\n}\n\nexport interface EdgeAIPredictor {\n  modelType: 'neural-network' | 'decision-tree' | 'ensemble';\n  trainingData: {\n    queryPatterns: Array<{\n      domain: string;\n      frequency: number;\n      timePattern: string;\n      clientPattern: string;\n    }>;\n    responsePatterns: Array<{\n      domain: string;\n      averageResponseTime: number;\n      cacheHitRate: number;\n      popularityScore: number;\n    }>;\n  };\n  predictionAccuracy: number;\n  lastTrainingTime: Date;\n  isActive: boolean;\n}\n\nexport class EdgeComputingDNSManager extends EventEmitter {\n  private logger: Logger;\n  private edgeLocations: Map<string, EdgeLocation> = new Map();\n  private activeQueries: Map<string, EdgeDNSQuery> = new Map();\n  private loadBalancingStrategy: EdgeLoadBalancingStrategy;\n  private cachePolicy: EdgeCachePolicy;\n  private aiPredictor: EdgeAIPredictor;\n  private globalMetrics: {\n    totalQueries: number;\n    averageResponseTime: number;\n    cacheHitRate: number;\n    edgeUtilization: number;\n    predictedQueries: number;\n    successfulPredictions: number;\n  };\n\n  constructor(options?: {\n    loadBalancingStrategy?: EdgeLoadBalancingStrategy;\n    cachePolicy?: EdgeCachePolicy;\n    aiPredictor?: EdgeAIPredictor;\n  }) {\n    super();\n    this.logger = new Logger({ context: 'EdgeComputingDNSManager' });\n\n    this.loadBalancingStrategy = options?.loadBalancingStrategy || {\n      algorithm: 'ai-predicted',\n      weights: {},\n      healthCheckInterval: 30000,\n      failoverThreshold: 3,\n      maxRetries: 3,\n      adaptiveWeighting: true,\n    };\n\n    this.cachePolicy = options?.cachePolicy || {\n      ttl: 300,\n      maxSize: 1000000,\n      evictionPolicy: 'ai-optimized',\n      compressionEnabled: true,\n      prefetchEnabled: true,\n      predictiveInvalidation: true,\n    };\n\n    this.aiPredictor = options?.aiPredictor || {\n      modelType: 'neural-network',\n      trainingData: {\n        queryPatterns: [],\n        responsePatterns: [],\n      },\n      predictionAccuracy: 0.85,\n      lastTrainingTime: new Date(),\n      isActive: true,\n    };\n\n    this.globalMetrics = {\n      totalQueries: 0,\n      averageResponseTime: 0,\n      cacheHitRate: 0,\n      edgeUtilization: 0,\n      predictedQueries: 0,\n      successfulPredictions: 0,\n    };\n\n    this.initializeGlobalEdgeNetwork();\n    this.startHealthChecking();\n    this.startAITraining();\n  }\n\n  /**\n   * グローバルエッジネットワークの初期化\n   */\n  private initializeGlobalEdgeNetwork(): void {\n    const globalEdgeLocations: EdgeLocation[] = [\n      {\n        id: 'us-east-1',\n        region: 'North America',\n        city: 'New York',\n        country: 'USA',\n        coordinates: { latitude: 40.7128, longitude: -74.006 },\n        capacity: 10000,\n        load: 0,\n        latency: 15,\n        isActive: true,\n        lastHealthCheck: new Date(),\n        supportedFeatures: ['dns-resolution', 'ai-prediction', 'edge-cache'],\n        hardware: {\n          cpu: 'Intel Xeon Gold 6258R',\n          memory: 128000,\n          storage: 2000000,\n          networkCapacity: 100000,\n        },\n      },\n      {\n        id: 'eu-west-1',\n        region: 'Europe',\n        city: 'London',\n        country: 'UK',\n        coordinates: { latitude: 51.5074, longitude: -0.1278 },\n        capacity: 8000,\n        load: 0,\n        latency: 12,\n        isActive: true,\n        lastHealthCheck: new Date(),\n        supportedFeatures: ['dns-resolution', 'ai-prediction', 'edge-cache'],\n        hardware: {\n          cpu: 'Intel Xeon Gold 6258R',\n          memory: 96000,\n          storage: 1500000,\n          networkCapacity: 80000,\n        },\n      },\n      {\n        id: 'ap-northeast-1',\n        region: 'Asia Pacific',\n        city: 'Tokyo',\n        country: 'Japan',\n        coordinates: { latitude: 35.6762, longitude: 139.6503 },\n        capacity: 12000,\n        load: 0,\n        latency: 8,\n        isActive: true,\n        lastHealthCheck: new Date(),\n        supportedFeatures: ['dns-resolution', 'ai-prediction', 'edge-cache'],\n        hardware: {\n          cpu: 'Intel Xeon Gold 6258R',\n          memory: 160000,\n          storage: 2500000,\n          networkCapacity: 120000,\n        },\n      },\n      {\n        id: 'ap-southeast-1',\n        region: 'Asia Pacific',\n        city: 'Singapore',\n        country: 'Singapore',\n        coordinates: { latitude: 1.3521, longitude: 103.8198 },\n        capacity: 9000,\n        load: 0,\n        latency: 10,\n        isActive: true,\n        lastHealthCheck: new Date(),\n        supportedFeatures: ['dns-resolution', 'ai-prediction', 'edge-cache'],\n        hardware: {\n          cpu: 'Intel Xeon Gold 6258R',\n          memory: 128000,\n          storage: 2000000,\n          networkCapacity: 100000,\n        },\n      },\n    ];\n\n    globalEdgeLocations.forEach(location => {\n      this.edgeLocations.set(location.id, location);\n    });\n\n    this.logger.info(`グローバルエッジネットワークを初期化しました`, {\n      locations: globalEdgeLocations.length,\n      regions: [...new Set(globalEdgeLocations.map(l => l.region))],\n      totalCapacity: globalEdgeLocations.reduce(\n        (sum, l) => sum + l.capacity,\n        0\n      ),\n    });\n  }\n\n  /**\n   * 最適なエッジロケーションを選択\n   */\n  private selectOptimalEdgeLocation(query: EdgeDNSQuery): EdgeLocation | null {\n    const activeLocations = Array.from(this.edgeLocations.values()).filter(\n      location => location.isActive && location.load < location.capacity * 0.8\n    );\n\n    if (activeLocations.length === 0) {\n      return null;\n    }\n\n    switch (this.loadBalancingStrategy.algorithm) {\n      case 'geographic':\n        return this.selectByGeographic(query, activeLocations);\n      case 'least-connections':\n        return this.selectByLeastConnections(activeLocations);\n      case 'weighted-round-robin':\n        return this.selectByWeightedRoundRobin(activeLocations);\n      case 'ai-predicted':\n        return this.selectByAIPrediction(query, activeLocations);\n      default:\n        return activeLocations[0];\n    }\n  }\n\n  /**\n   * 地理的距離による選択\n   */\n  private selectByGeographic(\n    query: EdgeDNSQuery,\n    locations: EdgeLocation[]\n  ): EdgeLocation {\n    const calculateDistance = (\n      lat1: number,\n      lon1: number,\n      lat2: number,\n      lon2: number\n    ): number => {\n      const R = 6371; // 地球の半径（km）\n      const dLat = ((lat2 - lat1) * Math.PI) / 180;\n      const dLon = ((lon2 - lon1) * Math.PI) / 180;\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos((lat1 * Math.PI) / 180) *\n          Math.cos((lat2 * Math.PI) / 180) *\n          Math.sin(dLon / 2) *\n          Math.sin(dLon / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    };\n\n    let closestLocation = locations[0];\n    let minDistance = calculateDistance(\n      query.clientLocation.coordinates.latitude,\n      query.clientLocation.coordinates.longitude,\n      closestLocation.coordinates.latitude,\n      closestLocation.coordinates.longitude\n    );\n\n    for (const location of locations) {\n      const distance = calculateDistance(\n        query.clientLocation.coordinates.latitude,\n        query.clientLocation.coordinates.longitude,\n        location.coordinates.latitude,\n        location.coordinates.longitude\n      );\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestLocation = location;\n      }\n    }\n\n    return closestLocation;\n  }\n\n  /**\n   * 最小接続数による選択\n   */\n  private selectByLeastConnections(locations: EdgeLocation[]): EdgeLocation {\n    return locations.reduce((prev, current) =>\n      prev.load < current.load ? prev : current\n    );\n  }\n\n  /**\n   * 重み付きラウンドロビンによる選択\n   */\n  private selectByWeightedRoundRobin(locations: EdgeLocation[]): EdgeLocation {\n    const totalWeight = locations.reduce((sum, location) => {\n      const weight = this.loadBalancingStrategy.weights[location.id] || 1;\n      return sum + weight;\n    }, 0);\n\n    const randomValue = Math.random() * totalWeight;\n    let currentWeight = 0;\n\n    for (const location of locations) {\n      const weight = this.loadBalancingStrategy.weights[location.id] || 1;\n      currentWeight += weight;\n      if (randomValue <= currentWeight) {\n        return location;\n      }\n    }\n\n    return locations[0];\n  }\n\n  /**\n   * AI予測による選択\n   */\n  private selectByAIPrediction(\n    query: EdgeDNSQuery,\n    locations: EdgeLocation[]\n  ): EdgeLocation {\n    if (!this.aiPredictor.isActive) {\n      return this.selectByGeographic(query, locations);\n    }\n\n    // AI予測スコアを計算\n    const scores = locations.map(location => {\n      const baseScore = this.calculateAIScore(query, location);\n      const loadPenalty = location.load / location.capacity;\n      const latencyBonus = 1 / (location.latency + 1);\n\n      return {\n        location,\n        score: baseScore * (1 - loadPenalty) * latencyBonus,\n      };\n    });\n\n    // 最高スコアのロケーションを選択\n    const bestLocation = scores.reduce((prev, current) =>\n      prev.score > current.score ? prev : current\n    );\n\n    return bestLocation.location;\n  }\n\n  /**\n   * AIスコアの計算\n   */\n  private calculateAIScore(\n    query: EdgeDNSQuery,\n    location: EdgeLocation\n  ): number {\n    // 簡略化されたAIスコア計算\n    // 実際の実装では、機械学習モデルを使用\n    const domainPopularity = this.getDomainPopularity(query.domain);\n    const locationEfficiency = this.getLocationEfficiency(location.id);\n    const clientLocationAffinity = this.getClientLocationAffinity(\n      query.clientLocation,\n      location\n    );\n\n    return (\n      domainPopularity * 0.3 +\n      locationEfficiency * 0.4 +\n      clientLocationAffinity * 0.3\n    );\n  }\n\n  /**\n   * ドメインの人気度を取得\n   */\n  private getDomainPopularity(domain: string): number {\n    const pattern = this.aiPredictor.trainingData.queryPatterns.find(\n      p => p.domain === domain\n    );\n    return pattern ? pattern.frequency / 1000 : 0.1;\n  }\n\n  /**\n   * ロケーションの効率性を取得\n   */\n  private getLocationEfficiency(locationId: string): number {\n    const location = this.edgeLocations.get(locationId);\n    if (!location) return 0;\n\n    const utilizationRate = location.load / location.capacity;\n    const efficiencyScore = 1 - utilizationRate;\n\n    return Math.max(0, Math.min(1, efficiencyScore));\n  }\n\n  /**\n   * クライアントロケーションとの親和性を取得\n   */\n  private getClientLocationAffinity(\n    clientLocation: EdgeDNSQuery['clientLocation'],\n    edgeLocation: EdgeLocation\n  ): number {\n    // 同じ国の場合は高いスコア\n    if (clientLocation.country === edgeLocation.country) {\n      return 1.0;\n    }\n\n    // 地理的距離による親和性計算\n    const distance = this.calculateGeographicDistance(\n      clientLocation.coordinates,\n      edgeLocation.coordinates\n    );\n\n    // 距離が近いほど高いスコア（最大10000km想定）\n    return Math.max(0, 1 - distance / 10000);\n  }\n\n  /**\n   * 地理的距離の計算\n   */\n  private calculateGeographicDistance(\n    coord1: { latitude: number; longitude: number },\n    coord2: { latitude: number; longitude: number }\n  ): number {\n    const R = 6371; // 地球の半径（km）\n    const dLat = ((coord2.latitude - coord1.latitude) * Math.PI) / 180;\n    const dLon = ((coord2.longitude - coord1.longitude) * Math.PI) / 180;\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos((coord1.latitude * Math.PI) / 180) *\n        Math.cos((coord2.latitude * Math.PI) / 180) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * エッジでDNSクエリを処理\n   */\n  async processEdgeDNSQuery(query: EdgeDNSQuery): Promise<EdgeDNSResponse> {\n    const startTime = Date.now();\n    this.globalMetrics.totalQueries++;\n\n    try {\n      // 最適なエッジロケーションを選択\n      const edgeLocation = this.selectOptimalEdgeLocation(query);\n      if (!edgeLocation) {\n        throw new Error('利用可能なエッジロケーションがありません');\n      }\n\n      // エッジロケーションの負荷を増加\n      edgeLocation.load++;\n\n      // AI予測によるプリフェッチ\n      const predictedQueries = await this.generatePredictedQueries(query);\n      if (predictedQueries.length > 0) {\n        this.globalMetrics.predictedQueries += predictedQueries.length;\n        this.prefetchQueries(predictedQueries, edgeLocation);\n      }\n\n      // DNS解決の実行\n      const records = await this.resolveAtEdge(query, edgeLocation);\n\n      const processingTime = Date.now() - startTime;\n\n      // レスポンス作成\n      const response: EdgeDNSResponse = {\n        queryId: query.id,\n        records,\n        source: 'edge-resolve',\n        edgeLocationId: edgeLocation.id,\n        processingTime,\n        cacheHit: false,\n        prediction: this.aiPredictor.isActive\n          ? {\n              confidence: this.aiPredictor.predictionAccuracy,\n              algorithm: this.aiPredictor.modelType,\n              trainingData: `${this.aiPredictor.trainingData.queryPatterns.length} patterns`,\n            }\n          : undefined,\n        metadata: {\n          totalHops: 1,\n          networkLatency: edgeLocation.latency,\n          edgeProcessingTime: processingTime,\n          compressionRatio: this.cachePolicy.compressionEnabled ? 0.7 : 1.0,\n        },\n      };\n\n      // メトリクス更新\n      this.updateMetrics(response);\n\n      // エッジロケーションの負荷を減少\n      edgeLocation.load--;\n\n      this.emit('query:completed', { query, response });\n\n      return response;\n    } catch (error) {\n      this.logger.error('エッジDNSクエリの処理に失敗しました', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * エッジでDNS解決を実行\n   */\n  private async resolveAtEdge(\n    query: EdgeDNSQuery,\n    edgeLocation: EdgeLocation\n  ): Promise<DNSRecord[]> {\n    // エッジサーバーでのDNS解決のシミュレーション\n    this.logger.info('エッジでDNS解決を実行', {\n      domain: query.domain,\n      type: query.type,\n      edgeLocation: edgeLocation.id,\n    });\n\n    // 実際の実装では、エッジサーバーのDNSリゾルバーを使用\n    const records: DNSRecord[] = [\n      {\n        id: `edge-${Date.now()}`,\n        name: query.domain,\n        type: query.type,\n        value: `edge-resolved-${query.type.toLowerCase()}`,\n        ttl: 300,\n        class: 'IN',\n        created: new Date(),\n        updated: new Date(),\n      },\n    ];\n\n    return records;\n  }\n\n  /**\n   * AI予測によるクエリ生成\n   */\n  private async generatePredictedQueries(\n    query: EdgeDNSQuery\n  ): Promise<EdgeDNSQuery[]> {\n    if (!this.aiPredictor.isActive) {\n      return [];\n    }\n\n    // 関連ドメインの予測\n    const predictedDomains = this.predictRelatedDomains(query.domain);\n\n    return predictedDomains.map((domain, index) => ({\n      id: `predicted-${query.id}-${index}`,\n      domain,\n      type: query.type,\n      clientIP: query.clientIP,\n      clientLocation: query.clientLocation,\n      timestamp: new Date(),\n      priority: 'low',\n      context: {\n        ...query.context,\n        requestSource: 'ai-prediction',\n      },\n    }));\n  }\n\n  /**\n   * 関連ドメインの予測\n   */\n  private predictRelatedDomains(domain: string): string[] {\n    // 簡略化された予測アルゴリズム\n    const baseDomain = domain.split('.').slice(-2).join('.');\n    const subdomains = ['www', 'api', 'cdn', 'mail', 'ftp'];\n\n    return subdomains\n      .map(sub => `${sub}.${baseDomain}`)\n      .filter(predicted => predicted !== domain)\n      .slice(0, 3); // 最大3つの予測\n  }\n\n  /**\n   * クエリのプリフェッチ\n   */\n  private async prefetchQueries(\n    queries: EdgeDNSQuery[],\n    edgeLocation: EdgeLocation\n  ): Promise<void> {\n    if (!this.cachePolicy.prefetchEnabled) {\n      return;\n    }\n\n    try {\n      const prefetchPromises = queries.map(query =>\n        this.resolveAtEdge(query, edgeLocation)\n      );\n\n      await Promise.all(prefetchPromises);\n\n      this.logger.info('プリフェッチクエリを実行しました', {\n        count: queries.length,\n        edgeLocation: edgeLocation.id,\n      });\n    } catch (error) {\n      this.logger.warn(\n        'プリフェッチクエリの実行に失敗しました',\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * メトリクスの更新\n   */\n  private updateMetrics(response: EdgeDNSResponse): void {\n    // 平均応答時間の更新\n    const currentAvg = this.globalMetrics.averageResponseTime;\n    const totalQueries = this.globalMetrics.totalQueries;\n    this.globalMetrics.averageResponseTime =\n      (currentAvg * (totalQueries - 1) + response.processingTime) /\n      totalQueries;\n\n    // キャッシュヒット率の更新\n    if (response.cacheHit) {\n      const currentHitRate = this.globalMetrics.cacheHitRate;\n      this.globalMetrics.cacheHitRate =\n        (currentHitRate * (totalQueries - 1) + 1) / totalQueries;\n    }\n\n    // エッジ利用率の更新\n    const activeLocations = Array.from(this.edgeLocations.values()).filter(\n      l => l.isActive\n    );\n    const totalUtilization = activeLocations.reduce(\n      (sum, location) => sum + location.load / location.capacity,\n      0\n    );\n    this.globalMetrics.edgeUtilization =\n      totalUtilization / activeLocations.length;\n  }\n\n  /**\n   * ヘルスチェックの開始\n   */\n  private startHealthChecking(): void {\n    setInterval(() => {\n      this.performHealthCheck();\n    }, this.loadBalancingStrategy.healthCheckInterval);\n  }\n\n  /**\n   * ヘルスチェックの実行\n   */\n  private async performHealthCheck(): Promise<void> {\n    const healthCheckPromises = Array.from(this.edgeLocations.values()).map(\n      async location => {\n        try {\n          // 実際の実装では、エッジサーバーへのpingやHTTPリクエストを送信\n          const isHealthy = await this.checkEdgeLocationHealth(location);\n\n          location.isActive = isHealthy;\n          location.lastHealthCheck = new Date();\n\n          if (!isHealthy) {\n            this.logger.warn(\n              `エッジロケーション ${location.id} がヘルスチェックに失敗しました`\n            );\n            this.emit('edge:unhealthy', location);\n          }\n        } catch (error) {\n          this.logger.error(\n            `エッジロケーション ${location.id} のヘルスチェックでエラーが発生しました`,\n            error as Error\n          );\n          location.isActive = false;\n        }\n      }\n    );\n\n    await Promise.all(healthCheckPromises);\n  }\n\n  /**\n   * エッジロケーションのヘルスチェック\n   */\n  private async checkEdgeLocationHealth(\n    location: EdgeLocation\n  ): Promise<boolean> {\n    // ヘルスチェックのシミュレーション\n    const randomDelay = Math.random() * 100;\n    await new Promise(resolve => setTimeout(resolve, randomDelay));\n\n    // 90%の確率で健康状態\n    return Math.random() > 0.1;\n  }\n\n  /**\n   * AIトレーニングの開始\n   */\n  private startAITraining(): void {\n    if (!this.aiPredictor.isActive) {\n      return;\n    }\n\n    // 1時間ごとにAIモデルを再トレーニング\n    setInterval(() => {\n      this.performAITraining();\n    }, 3600000); // 1時間\n  }\n\n  /**\n   * AIトレーニングの実行\n   */\n  private async performAITraining(): Promise<void> {\n    try {\n      this.logger.info('AIモデルのトレーニングを開始します');\n\n      // トレーニングデータの収集\n      const trainingData = await this.collectTrainingData();\n\n      // モデルの更新\n      await this.updateAIModel(trainingData);\n\n      this.aiPredictor.lastTrainingTime = new Date();\n\n      this.logger.info('AIモデルのトレーニングが完了しました', {\n        accuracy: this.aiPredictor.predictionAccuracy,\n        trainingDataSize: trainingData.queries.length,\n      });\n    } catch (error) {\n      this.logger.error('AIトレーニングでエラーが発生しました', error as Error);\n    }\n  }\n\n  /**\n   * トレーニングデータの収集\n   */\n  private async collectTrainingData(): Promise<{\n    queries: EdgeDNSQuery[];\n    responses: EdgeDNSResponse[];\n    patterns: any[];\n  }> {\n    // 過去のクエリとレスポンスデータを収集\n    return {\n      queries: Array.from(this.activeQueries.values()),\n      responses: [],\n      patterns: this.aiPredictor.trainingData.queryPatterns,\n    };\n  }\n\n  /**\n   * AIモデルの更新\n   */\n  private async updateAIModel(trainingData: any): Promise<void> {\n    // 機械学習モデルの更新処理\n    // 実際の実装では、TensorFlow.jsやscikit-learnを使用\n\n    // 予測精度の改善をシミュレート\n    const improvementFactor = 1 + (Math.random() * 0.1 - 0.05);\n    this.aiPredictor.predictionAccuracy = Math.min(\n      0.99,\n      this.aiPredictor.predictionAccuracy * improvementFactor\n    );\n  }\n\n  /**\n   * エッジロケーションの統計を取得\n   */\n  getEdgeLocationStats(): Array<EdgeLocation & { utilization: number }> {\n    return Array.from(this.edgeLocations.values()).map(location => ({\n      ...location,\n      utilization: location.load / location.capacity,\n    }));\n  }\n\n  /**\n   * グローバルメトリクスを取得\n   */\n  getGlobalMetrics(): typeof this.globalMetrics {\n    return { ...this.globalMetrics };\n  }\n\n  /**\n   * AI予測統計を取得\n   */\n  getAIPredictionStats(): {\n    isActive: boolean;\n    accuracy: number;\n    predictedQueries: number;\n    successfulPredictions: number;\n    predictionSuccessRate: number;\n    lastTrainingTime: Date;\n  } {\n    return {\n      isActive: this.aiPredictor.isActive,\n      accuracy: this.aiPredictor.predictionAccuracy,\n      predictedQueries: this.globalMetrics.predictedQueries,\n      successfulPredictions: this.globalMetrics.successfulPredictions,\n      predictionSuccessRate:\n        this.globalMetrics.predictedQueries > 0\n          ? this.globalMetrics.successfulPredictions /\n            this.globalMetrics.predictedQueries\n          : 0,\n      lastTrainingTime: this.aiPredictor.lastTrainingTime,\n    };\n  }\n\n  /**\n   * システムのシャットダウン\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info(\n      'エッジコンピューティングDNSマネージャーをシャットダウンしています'\n    );\n\n    // アクティブなクエリの完了を待機\n    const activeQueryIds = Array.from(this.activeQueries.keys());\n    if (activeQueryIds.length > 0) {\n      this.logger.info(\n        `${activeQueryIds.length}個のアクティブなクエリの完了を待機しています`\n      );\n      // 実際の実装では、アクティブなクエリの完了を待機\n      await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n\n    // エッジロケーションの無効化\n    this.edgeLocations.forEach(location => {\n      location.isActive = false;\n    });\n\n    this.logger.info(\n      'エッジコンピューティングDNSマネージャーのシャットダウンが完了しました'\n    );\n  }\n}\n\nexport default EdgeComputingDNSManager;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/enterprise-access-control.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createHmac' is defined but never used. Allowed unused vars must match /^_/u.","line":12,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1132,1135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1132,1135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1379,1382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1379,1382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1565,1568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1565,1568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1991,1994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1991,1994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2269,2272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2269,2272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2894,2897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2894,2897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3787,3790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3787,3790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":894,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":894,"endColumn":44},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":897,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":897,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1111,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1111,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25668,25671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25668,25671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1162,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1162,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26894,26897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26894,26897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1192,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1192,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27719,27722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27719,27722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 企業級アクセス制御・監査システム\n *\n * エンタープライズ環境での高度なアクセス制御と包括的監査機能\n * - 階層型権限管理\n * - 多要素認証 (MFA)\n * - 詳細な監査ログ\n * - コンプライアンス対応\n * - セキュリティポリシー適用\n */\n\nimport { randomUUID, createHash, createHmac } from 'crypto';\nimport { EventEmitter } from 'events';\n\nimport { Logger } from './logger.js';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  organizationId: string;\n  tenantIds: string[];\n  roles: string[];\n  permissions: string[];\n  mfaEnabled: boolean;\n  mfaSecret?: string;\n  lastLoginAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  status: 'active' | 'suspended' | 'disabled';\n  loginAttempts: number;\n  lockoutUntil?: Date;\n  passwordChangedAt: Date;\n  sessionTimeout: number;\n  ipWhitelist: string[];\n  deviceFingerprints: string[];\n}\n\nexport interface Role {\n  id: string;\n  name: string;\n  description: string;\n  permissions: string[];\n  tenantId?: string;\n  organizationId?: string;\n  isSystemRole: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Permission {\n  id: string;\n  name: string;\n  description: string;\n  resource: string;\n  action: string;\n  conditions?: {\n    [key: string]: any;\n  };\n  isSystemPermission: boolean;\n}\n\nexport interface AuditEvent {\n  id: string;\n  userId: string;\n  userEmail: string;\n  tenantId?: string;\n  organizationId?: string;\n  action: string;\n  resource: string;\n  resourceId?: string;\n  details: any;\n  ipAddress: string;\n  userAgent: string;\n  sessionId: string;\n  timestamp: Date;\n  success: boolean;\n  errorMessage?: string;\n  riskScore: number;\n  metadata: {\n    [key: string]: any;\n  };\n}\n\nexport interface SecurityPolicy {\n  id: string;\n  name: string;\n  description: string;\n  rules: SecurityRule[];\n  tenantId?: string;\n  organizationId?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface SecurityRule {\n  id: string;\n  name: string;\n  condition: string;\n  action: 'allow' | 'deny' | 'warn' | 'require-mfa';\n  priority: number;\n  parameters: {\n    [key: string]: any;\n  };\n}\n\nexport interface AccessRequest {\n  id: string;\n  userId: string;\n  resource: string;\n  action: string;\n  tenantId?: string;\n  organizationId?: string;\n  ipAddress: string;\n  userAgent: string;\n  sessionId: string;\n  timestamp: Date;\n  context: {\n    [key: string]: any;\n  };\n}\n\nexport interface AccessResponse {\n  granted: boolean;\n  reason?: string;\n  requiredMfa?: boolean;\n  warnings: string[];\n  policies: string[];\n  riskScore: number;\n  sessionTimeout?: number;\n  additionalChecks?: string[];\n}\n\nexport interface ComplianceReport {\n  id: string;\n  type: 'access' | 'audit' | 'security' | 'compliance';\n  tenantId?: string;\n  organizationId?: string;\n  generatedAt: Date;\n  dateRange: {\n    start: Date;\n    end: Date;\n  };\n  metrics: {\n    totalEvents: number;\n    uniqueUsers: number;\n    failedAttempts: number;\n    riskEvents: number;\n    policyViolations: number;\n  };\n  details: any;\n}\n\nexport interface EnterpriseAccessControlConfig {\n  mfaRequired: boolean;\n  sessionTimeout: number;\n  maxLoginAttempts: number;\n  lockoutDuration: number;\n  passwordPolicy: {\n    minLength: number;\n    requireUppercase: boolean;\n    requireLowercase: boolean;\n    requireNumbers: boolean;\n    requireSymbols: boolean;\n    maxAge: number;\n  };\n  auditRetention: number;\n  riskScoreThreshold: number;\n  enableDeviceFingerprinting: boolean;\n  enableIpWhitelisting: boolean;\n  complianceMode: 'none' | 'basic' | 'strict';\n}\n\nexport class EnterpriseAccessControl extends EventEmitter {\n  private users: Map<string, User> = new Map();\n  private roles: Map<string, Role> = new Map();\n  private permissions: Map<string, Permission> = new Map();\n  private auditEvents: AuditEvent[] = [];\n  private securityPolicies: Map<string, SecurityPolicy> = new Map();\n  private activeSessions: Map<string, any> = new Map();\n  private logger: Logger;\n  private config: EnterpriseAccessControlConfig;\n\n  constructor(\n    logger?: Logger,\n    config?: Partial<EnterpriseAccessControlConfig>\n  ) {\n    super();\n\n    this.logger = logger || new Logger();\n    this.config = {\n      mfaRequired: false,\n      sessionTimeout: 3600000, // 1時間\n      maxLoginAttempts: 5,\n      lockoutDuration: 900000, // 15分\n      passwordPolicy: {\n        minLength: 12,\n        requireUppercase: true,\n        requireLowercase: true,\n        requireNumbers: true,\n        requireSymbols: true,\n        maxAge: 7776000000, // 90日\n      },\n      auditRetention: 31536000000, // 1年\n      riskScoreThreshold: 70,\n      enableDeviceFingerprinting: true,\n      enableIpWhitelisting: false,\n      complianceMode: 'basic',\n      ...config,\n    };\n\n    this.initializeSystemRoles();\n    this.initializeSystemPermissions();\n    this.startAuditCleanup();\n  }\n\n  /**\n   * システム役割の初期化\n   */\n  private initializeSystemRoles(): void {\n    const systemRoles: Omit<Role, 'id' | 'createdAt' | 'updatedAt'>[] = [\n      {\n        name: 'super-admin',\n        description: 'システム全体の最高管理者',\n        permissions: ['*'],\n        isSystemRole: true,\n      },\n      {\n        name: 'organization-admin',\n        description: '組織の管理者',\n        permissions: [\n          'organization:manage',\n          'tenant:manage',\n          'user:manage',\n          'role:manage',\n          'audit:read',\n          'security:manage',\n        ],\n        isSystemRole: true,\n      },\n      {\n        name: 'tenant-admin',\n        description: 'テナントの管理者',\n        permissions: [\n          'tenant:read',\n          'user:manage',\n          'dns:manage',\n          'security:read',\n          'audit:read',\n        ],\n        isSystemRole: true,\n      },\n      {\n        name: 'dns-manager',\n        description: 'DNS管理者',\n        permissions: [\n          'dns:manage',\n          'domain:manage',\n          'record:manage',\n          'analysis:read',\n        ],\n        isSystemRole: true,\n      },\n      {\n        name: 'security-analyst',\n        description: 'セキュリティアナリスト',\n        permissions: [\n          'security:read',\n          'security:analyze',\n          'audit:read',\n          'threat:read',\n        ],\n        isSystemRole: true,\n      },\n      {\n        name: 'viewer',\n        description: '閲覧者',\n        permissions: [\n          'dns:read',\n          'domain:read',\n          'record:read',\n          'analysis:read',\n        ],\n        isSystemRole: true,\n      },\n    ];\n\n    systemRoles.forEach(roleData => {\n      const role: Role = {\n        id: randomUUID(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        ...roleData,\n      };\n      this.roles.set(role.id, role);\n    });\n  }\n\n  /**\n   * システム権限の初期化\n   */\n  private initializeSystemPermissions(): void {\n    const systemPermissions: Omit<Permission, 'id'>[] = [\n      // 組織管理\n      {\n        name: 'organization:manage',\n        description: '組織の管理',\n        resource: 'organization',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'organization:read',\n        description: '組織の閲覧',\n        resource: 'organization',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // テナント管理\n      {\n        name: 'tenant:manage',\n        description: 'テナントの管理',\n        resource: 'tenant',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'tenant:read',\n        description: 'テナントの閲覧',\n        resource: 'tenant',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // ユーザー管理\n      {\n        name: 'user:manage',\n        description: 'ユーザーの管理',\n        resource: 'user',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'user:read',\n        description: 'ユーザーの閲覧',\n        resource: 'user',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // 役割管理\n      {\n        name: 'role:manage',\n        description: '役割の管理',\n        resource: 'role',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'role:read',\n        description: '役割の閲覧',\n        resource: 'role',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // DNS管理\n      {\n        name: 'dns:manage',\n        description: 'DNSの管理',\n        resource: 'dns',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'dns:read',\n        description: 'DNSの閲覧',\n        resource: 'dns',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // ドメイン管理\n      {\n        name: 'domain:manage',\n        description: 'ドメインの管理',\n        resource: 'domain',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'domain:read',\n        description: 'ドメインの閲覧',\n        resource: 'domain',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // レコード管理\n      {\n        name: 'record:manage',\n        description: 'レコードの管理',\n        resource: 'record',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'record:read',\n        description: 'レコードの閲覧',\n        resource: 'record',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // 分析\n      {\n        name: 'analysis:read',\n        description: '分析結果の閲覧',\n        resource: 'analysis',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // セキュリティ\n      {\n        name: 'security:manage',\n        description: 'セキュリティの管理',\n        resource: 'security',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'security:read',\n        description: 'セキュリティの閲覧',\n        resource: 'security',\n        action: 'read',\n        isSystemPermission: true,\n      },\n      {\n        name: 'security:analyze',\n        description: 'セキュリティ分析',\n        resource: 'security',\n        action: 'analyze',\n        isSystemPermission: true,\n      },\n\n      // 脅威\n      {\n        name: 'threat:read',\n        description: '脅威情報の閲覧',\n        resource: 'threat',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // 監査\n      {\n        name: 'audit:read',\n        description: '監査ログの閲覧',\n        resource: 'audit',\n        action: 'read',\n        isSystemPermission: true,\n      },\n      {\n        name: 'audit:manage',\n        description: '監査設定の管理',\n        resource: 'audit',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n\n      // オーケストレーション\n      {\n        name: 'orchestration:manage',\n        description: 'オーケストレーションの管理',\n        resource: 'orchestration',\n        action: 'manage',\n        isSystemPermission: true,\n      },\n      {\n        name: 'orchestration:read',\n        description: 'オーケストレーションの閲覧',\n        resource: 'orchestration',\n        action: 'read',\n        isSystemPermission: true,\n      },\n\n      // エンタープライズ\n      {\n        name: 'enterprise:access',\n        description: 'エンタープライズ機能へのアクセス',\n        resource: 'enterprise',\n        action: 'access',\n        isSystemPermission: true,\n      },\n    ];\n\n    systemPermissions.forEach(permissionData => {\n      const permission: Permission = {\n        id: randomUUID(),\n        ...permissionData,\n      };\n      this.permissions.set(permission.id, permission);\n    });\n  }\n\n  /**\n   * アクセス制御の確認\n   */\n  async checkAccess(request: AccessRequest): Promise<AccessResponse> {\n    const user = this.users.get(request.userId);\n    if (!user) {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: 'unknown',\n        action: 'access-denied',\n        details: { reason: 'User not found' },\n        success: false,\n        errorMessage: 'User not found',\n        riskScore: 100,\n        metadata: {},\n      });\n\n      return {\n        granted: false,\n        reason: 'ユーザーが見つかりません',\n        warnings: [],\n        policies: [],\n        riskScore: 100,\n      };\n    }\n\n    // ユーザー状態の確認\n    if (user.status !== 'active') {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: user.email,\n        action: 'access-denied',\n        details: { reason: 'User inactive', status: user.status },\n        success: false,\n        errorMessage: 'User is not active',\n        riskScore: 90,\n        metadata: {},\n      });\n\n      return {\n        granted: false,\n        reason: 'ユーザーアカウントが無効です',\n        warnings: [],\n        policies: [],\n        riskScore: 90,\n      };\n    }\n\n    // アカウントロックアウトの確認\n    if (user.lockoutUntil && user.lockoutUntil > new Date()) {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: user.email,\n        action: 'access-denied',\n        details: { reason: 'Account locked', lockoutUntil: user.lockoutUntil },\n        success: false,\n        errorMessage: 'Account is locked',\n        riskScore: 80,\n        metadata: {},\n      });\n\n      return {\n        granted: false,\n        reason: 'アカウントがロックされています',\n        warnings: [],\n        policies: [],\n        riskScore: 80,\n      };\n    }\n\n    // テナントアクセス権限の確認\n    if (request.tenantId && !user.tenantIds.includes(request.tenantId)) {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: user.email,\n        action: 'access-denied',\n        details: { reason: 'Tenant access denied', tenantId: request.tenantId },\n        success: false,\n        errorMessage: 'User does not have access to this tenant',\n        riskScore: 70,\n        metadata: {},\n      });\n\n      return {\n        granted: false,\n        reason: 'テナントへのアクセス権限がありません',\n        warnings: [],\n        policies: [],\n        riskScore: 70,\n      };\n    }\n\n    // 権限の確認\n    const hasPermission = this.checkPermission(\n      user,\n      request.resource,\n      request.action\n    );\n    if (!hasPermission) {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: user.email,\n        action: 'access-denied',\n        details: {\n          reason: 'Insufficient permissions',\n          requiredPermission: `${request.resource}:${request.action}`,\n        },\n        success: false,\n        errorMessage: 'Insufficient permissions',\n        riskScore: 60,\n        metadata: {},\n      });\n\n      return {\n        granted: false,\n        reason: '権限が不足しています',\n        warnings: [],\n        policies: [],\n        riskScore: 60,\n      };\n    }\n\n    // IP制限の確認\n    if (this.config.enableIpWhitelisting && user.ipWhitelist.length > 0) {\n      if (!user.ipWhitelist.includes(request.ipAddress)) {\n        this.recordAuditEvent({\n          ...request,\n          id: randomUUID(),\n          userEmail: user.email,\n          action: 'access-denied',\n          details: {\n            reason: 'IP not whitelisted',\n            ipAddress: request.ipAddress,\n          },\n          success: false,\n          errorMessage: 'IP address not in whitelist',\n          riskScore: 85,\n          metadata: {},\n        });\n\n        return {\n          granted: false,\n          reason: 'IPアドレスが許可されていません',\n          warnings: [],\n          policies: [],\n          riskScore: 85,\n        };\n      }\n    }\n\n    // リスクスコアの計算\n    const riskScore = this.calculateRiskScore(user, request);\n\n    // セキュリティポリシーの適用\n    const policyResult = this.applySecurityPolicies(user, request, riskScore);\n\n    // MFA要件の確認\n    let requireMfa = false;\n    if (this.config.mfaRequired && !user.mfaEnabled) {\n      requireMfa = true;\n    }\n\n    if (policyResult.action === 'require-mfa') {\n      requireMfa = true;\n    }\n\n    // アクセス許可の場合\n    if (policyResult.action === 'allow') {\n      this.recordAuditEvent({\n        ...request,\n        id: randomUUID(),\n        userEmail: user.email,\n        action: 'access-granted',\n        details: {\n          permissions: user.permissions,\n          roles: user.roles,\n          riskScore,\n          policies: policyResult.policies,\n          mfaRequired: requireMfa,\n        },\n        success: true,\n        riskScore,\n        metadata: {},\n      });\n\n      return {\n        granted: true,\n        requiredMfa: requireMfa,\n        warnings: policyResult.warnings,\n        policies: policyResult.policies,\n        riskScore,\n        sessionTimeout: this.config.sessionTimeout,\n        additionalChecks: policyResult.additionalChecks,\n      };\n    }\n\n    // アクセス拒否の場合\n    this.recordAuditEvent({\n      ...request,\n      id: randomUUID(),\n      userEmail: user.email,\n      action: 'access-denied',\n      details: { reason: 'Policy violation', policy: policyResult.policy },\n      success: false,\n      errorMessage: 'Access denied by security policy',\n      riskScore,\n      metadata: {},\n    });\n\n    return {\n      granted: false,\n      reason: 'セキュリティポリシーによりアクセスが拒否されました',\n      warnings: policyResult.warnings,\n      policies: policyResult.policies,\n      riskScore,\n    };\n  }\n\n  /**\n   * 権限の確認\n   */\n  private checkPermission(\n    user: User,\n    resource: string,\n    action: string\n  ): boolean {\n    // スーパーアドミンは全ての権限を持つ\n    if (user.permissions.includes('*')) {\n      return true;\n    }\n\n    // 直接権限の確認\n    const requiredPermission = `${resource}:${action}`;\n    if (user.permissions.includes(requiredPermission)) {\n      return true;\n    }\n\n    // 管理権限の確認\n    const managePermission = `${resource}:manage`;\n    if (user.permissions.includes(managePermission)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * リスクスコアの計算\n   */\n  private calculateRiskScore(user: User, request: AccessRequest): number {\n    let score = 0;\n\n    // ベースリスク\n    score += 10;\n\n    // 前回ログインからの時間\n    if (user.lastLoginAt) {\n      const timeSinceLastLogin = Date.now() - user.lastLoginAt.getTime();\n      const daysSinceLastLogin = timeSinceLastLogin / (1000 * 60 * 60 * 24);\n      score += Math.min(daysSinceLastLogin * 2, 20);\n    }\n\n    // ログイン試行回数\n    score += user.loginAttempts * 5;\n\n    // 時間外アクセス（18時〜8時）\n    const hour = new Date().getHours();\n    if (hour < 8 || hour > 18) {\n      score += 15;\n    }\n\n    // 休日アクセス\n    const dayOfWeek = new Date().getDay();\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\n      score += 10;\n    }\n\n    // 新しいデバイス\n    if (this.config.enableDeviceFingerprinting) {\n      const deviceFingerprint = this.generateDeviceFingerprint(\n        request.userAgent\n      );\n      if (!user.deviceFingerprints.includes(deviceFingerprint)) {\n        score += 25;\n      }\n    }\n\n    // 高権限アクション\n    const highRiskActions = ['delete', 'manage', 'admin'];\n    if (highRiskActions.includes(request.action)) {\n      score += 20;\n    }\n\n    return Math.min(score, 100);\n  }\n\n  /**\n   * セキュリティポリシーの適用\n   */\n  private applySecurityPolicies(\n    user: User,\n    request: AccessRequest,\n    riskScore: number\n  ): {\n    action: 'allow' | 'deny' | 'warn' | 'require-mfa';\n    reason?: string;\n    policy?: string;\n    warnings: string[];\n    policies: string[];\n    additionalChecks: string[];\n  } {\n    const result = {\n      action: 'allow' as const,\n      warnings: [] as string[],\n      policies: [] as string[],\n      additionalChecks: [] as string[],\n    };\n\n    // 適用可能なポリシーを取得\n    const applicablePolicies = Array.from(\n      this.securityPolicies.values()\n    ).filter(policy => {\n      if (!policy.isActive) return false;\n      if (policy.tenantId && !user.tenantIds.includes(policy.tenantId))\n        return false;\n      if (\n        policy.organizationId &&\n        user.organizationId !== policy.organizationId\n      )\n        return false;\n      return true;\n    });\n\n    // ポリシーの適用\n    for (const policy of applicablePolicies) {\n      for (const rule of policy.rules.sort((a, b) => a.priority - b.priority)) {\n        if (this.evaluateRule(rule, user, request, riskScore)) {\n          result.policies.push(policy.name);\n\n          if (rule.action === 'deny') {\n            return {\n              action: 'deny',\n              reason: rule.name,\n              policy: policy.name,\n              warnings: result.warnings,\n              policies: result.policies,\n              additionalChecks: result.additionalChecks,\n            };\n          }\n\n          if (rule.action === 'require-mfa') {\n            result.action = 'require-mfa';\n          }\n\n          if (rule.action === 'warn') {\n            result.warnings.push(rule.name);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * ルールの評価\n   */\n  private evaluateRule(\n    rule: SecurityRule,\n    user: User,\n    request: AccessRequest,\n    riskScore: number\n  ): boolean {\n    // 簡易的な条件評価（実際の実装では、より複雑な条件評価エンジンを使用）\n    switch (rule.condition) {\n      case 'high-risk':\n        return riskScore > this.config.riskScoreThreshold;\n      case 'high-privilege':\n        return request.action === 'manage' || request.action === 'admin';\n      case 'after-hours':\n        const hour = new Date().getHours();\n        return hour < 8 || hour > 18;\n      case 'weekend':\n        const dayOfWeek = new Date().getDay();\n        return dayOfWeek === 0 || dayOfWeek === 6;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * デバイスフィンガープリントの生成\n   */\n  private generateDeviceFingerprint(userAgent: string): string {\n    return createHash('sha256').update(userAgent).digest('hex');\n  }\n\n  /**\n   * 監査イベントの記録\n   */\n  private recordAuditEvent(event: AuditEvent): void {\n    this.auditEvents.push(event);\n\n    // 高リスクイベントの即座通知\n    if (event.riskScore > this.config.riskScoreThreshold) {\n      this.emit('high-risk-event', event);\n    }\n\n    // 失敗イベントの通知\n    if (!event.success) {\n      this.emit('security-event', event);\n    }\n\n    this.emit('audit-event', event);\n  }\n\n  /**\n   * ユーザーの作成\n   */\n  async createUser(\n    userData: Omit<\n      User,\n      'id' | 'createdAt' | 'updatedAt' | 'loginAttempts' | 'passwordChangedAt'\n    >\n  ): Promise<User> {\n    const user: User = {\n      id: randomUUID(),\n      loginAttempts: 0,\n      passwordChangedAt: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...userData,\n    };\n\n    this.users.set(user.id, user);\n\n    this.logger.info('ユーザーを作成しました', {\n      userId: user.id,\n      email: user.email,\n    });\n\n    this.emit('user-created', user);\n    return user;\n  }\n\n  /**\n   * 役割の作成\n   */\n  async createRole(\n    roleData: Omit<Role, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Role> {\n    const role: Role = {\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...roleData,\n    };\n\n    this.roles.set(role.id, role);\n\n    this.logger.info('役割を作成しました', {\n      roleId: role.id,\n      name: role.name,\n    });\n\n    this.emit('role-created', role);\n    return role;\n  }\n\n  /**\n   * セキュリティポリシーの作成\n   */\n  async createSecurityPolicy(\n    policyData: Omit<SecurityPolicy, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<SecurityPolicy> {\n    const policy: SecurityPolicy = {\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...policyData,\n    };\n\n    this.securityPolicies.set(policy.id, policy);\n\n    this.logger.info('セキュリティポリシーを作成しました', {\n      policyId: policy.id,\n      name: policy.name,\n    });\n\n    this.emit('policy-created', policy);\n    return policy;\n  }\n\n  /**\n   * 監査ログの検索\n   */\n  searchAuditEvents(filters: {\n    userId?: string;\n    tenantId?: string;\n    organizationId?: string;\n    action?: string;\n    dateRange?: { start: Date; end: Date };\n    minRiskScore?: number;\n    success?: boolean;\n  }): AuditEvent[] {\n    let events = this.auditEvents;\n\n    if (filters.userId) {\n      events = events.filter(e => e.userId === filters.userId);\n    }\n\n    if (filters.tenantId) {\n      events = events.filter(e => e.tenantId === filters.tenantId);\n    }\n\n    if (filters.organizationId) {\n      events = events.filter(e => e.organizationId === filters.organizationId);\n    }\n\n    if (filters.action) {\n      events = events.filter(e => e.action === filters.action);\n    }\n\n    if (filters.dateRange) {\n      events = events.filter(\n        e =>\n          e.timestamp >= filters.dateRange!.start &&\n          e.timestamp <= filters.dateRange!.end\n      );\n    }\n\n    if (filters.minRiskScore !== undefined) {\n      events = events.filter(e => e.riskScore >= filters.minRiskScore!);\n    }\n\n    if (filters.success !== undefined) {\n      events = events.filter(e => e.success === filters.success);\n    }\n\n    return events.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n  }\n\n  /**\n   * コンプライアンスレポートの生成\n   */\n  generateComplianceReport(\n    type: ComplianceReport['type'],\n    options: {\n      tenantId?: string;\n      organizationId?: string;\n      dateRange: { start: Date; end: Date };\n    }\n  ): ComplianceReport {\n    const events = this.searchAuditEvents({\n      tenantId: options.tenantId,\n      organizationId: options.organizationId,\n      dateRange: options.dateRange,\n    });\n\n    const metrics = {\n      totalEvents: events.length,\n      uniqueUsers: new Set(events.map(e => e.userId)).size,\n      failedAttempts: events.filter(e => !e.success).length,\n      riskEvents: events.filter(\n        e => e.riskScore > this.config.riskScoreThreshold\n      ).length,\n      policyViolations: events.filter(e => e.action === 'access-denied').length,\n    };\n\n    const report: ComplianceReport = {\n      id: randomUUID(),\n      type,\n      tenantId: options.tenantId,\n      organizationId: options.organizationId,\n      generatedAt: new Date(),\n      dateRange: options.dateRange,\n      metrics,\n      details: {\n        events: events.slice(0, 100), // 最新100件\n        userActivity: this.generateUserActivityReport(events),\n        securitySummary: this.generateSecuritySummary(events),\n        riskAnalysis: this.generateRiskAnalysis(events),\n      },\n    };\n\n    this.logger.info('コンプライアンスレポートを生成しました', {\n      reportId: report.id,\n      type,\n      eventCount: events.length,\n    });\n\n    return report;\n  }\n\n  /**\n   * ユーザー活動レポートの生成\n   */\n  private generateUserActivityReport(events: AuditEvent[]): any {\n    const userActivity = new Map<\n      string,\n      {\n        userId: string;\n        email: string;\n        totalEvents: number;\n        successfulEvents: number;\n        failedEvents: number;\n        lastActivity: Date;\n        riskScore: number;\n      }\n    >();\n\n    events.forEach(event => {\n      if (!userActivity.has(event.userId)) {\n        userActivity.set(event.userId, {\n          userId: event.userId,\n          email: event.userEmail,\n          totalEvents: 0,\n          successfulEvents: 0,\n          failedEvents: 0,\n          lastActivity: event.timestamp,\n          riskScore: 0,\n        });\n      }\n\n      const activity = userActivity.get(event.userId)!;\n      activity.totalEvents++;\n\n      if (event.success) {\n        activity.successfulEvents++;\n      } else {\n        activity.failedEvents++;\n      }\n\n      if (event.timestamp > activity.lastActivity) {\n        activity.lastActivity = event.timestamp;\n      }\n\n      activity.riskScore = Math.max(activity.riskScore, event.riskScore);\n    });\n\n    return Array.from(userActivity.values()).sort(\n      (a, b) => b.totalEvents - a.totalEvents\n    );\n  }\n\n  /**\n   * セキュリティサマリーの生成\n   */\n  private generateSecuritySummary(events: AuditEvent[]): any {\n    const actionCounts = new Map<string, number>();\n    const hourlyActivity = new Array(24).fill(0);\n    const dailyActivity = new Array(7).fill(0);\n\n    events.forEach(event => {\n      // アクション別集計\n      actionCounts.set(event.action, (actionCounts.get(event.action) || 0) + 1);\n\n      // 時間別集計\n      const hour = event.timestamp.getHours();\n      hourlyActivity[hour]++;\n\n      // 曜日別集計\n      const dayOfWeek = event.timestamp.getDay();\n      dailyActivity[dayOfWeek]++;\n    });\n\n    return {\n      actionCounts: Object.fromEntries(actionCounts),\n      hourlyActivity,\n      dailyActivity,\n      peakHour: hourlyActivity.indexOf(Math.max(...hourlyActivity)),\n      peakDay: dailyActivity.indexOf(Math.max(...dailyActivity)),\n    };\n  }\n\n  /**\n   * リスク分析の生成\n   */\n  private generateRiskAnalysis(events: AuditEvent[]): any {\n    const riskDistribution = {\n      low: 0, // 0-30\n      medium: 0, // 31-60\n      high: 0, // 61-80\n      critical: 0, // 81-100\n    };\n\n    const riskTrends = new Map<string, number[]>();\n\n    events.forEach(event => {\n      // リスク分布\n      if (event.riskScore <= 30) {\n        riskDistribution.low++;\n      } else if (event.riskScore <= 60) {\n        riskDistribution.medium++;\n      } else if (event.riskScore <= 80) {\n        riskDistribution.high++;\n      } else {\n        riskDistribution.critical++;\n      }\n\n      // 日別リスクトレンド\n      const date = event.timestamp.toISOString().split('T')[0];\n      if (!riskTrends.has(date)) {\n        riskTrends.set(date, []);\n      }\n      riskTrends.get(date)!.push(event.riskScore);\n    });\n\n    // 日別平均リスクスコア\n    const dailyRiskAverage = new Map<string, number>();\n    riskTrends.forEach((scores, date) => {\n      const average =\n        scores.reduce((sum, score) => sum + score, 0) / scores.length;\n      dailyRiskAverage.set(date, average);\n    });\n\n    return {\n      riskDistribution,\n      averageRiskScore:\n        events.length > 0\n          ? events.reduce((sum, e) => sum + e.riskScore, 0) / events.length\n          : 0,\n      dailyRiskAverage: Object.fromEntries(dailyRiskAverage),\n      highRiskEvents: events.filter(\n        e => e.riskScore > this.config.riskScoreThreshold\n      ).length,\n    };\n  }\n\n  /**\n   * 監査ログのクリーンアップ\n   */\n  private startAuditCleanup(): void {\n    setInterval(() => {\n      const cutoffDate = new Date(Date.now() - this.config.auditRetention);\n      const beforeCount = this.auditEvents.length;\n\n      this.auditEvents = this.auditEvents.filter(\n        event => event.timestamp > cutoffDate\n      );\n\n      const removedCount = beforeCount - this.auditEvents.length;\n      if (removedCount > 0) {\n        this.logger.info('監査ログをクリーンアップしました', {\n          removedCount,\n          remainingCount: this.auditEvents.length,\n        });\n      }\n    }, 86400000); // 24時間間隔\n  }\n\n  /**\n   * 統計情報の取得\n   */\n  getStatistics(): {\n    users: number;\n    roles: number;\n    permissions: number;\n    auditEvents: number;\n    securityPolicies: number;\n    activeSessions: number;\n    recentHighRiskEvents: number;\n  } {\n    const recentHighRiskEvents = this.auditEvents.filter(\n      event =>\n        event.riskScore > this.config.riskScoreThreshold &&\n        event.timestamp > new Date(Date.now() - 86400000) // 24時間以内\n    ).length;\n\n    return {\n      users: this.users.size,\n      roles: this.roles.size,\n      permissions: this.permissions.size,\n      auditEvents: this.auditEvents.length,\n      securityPolicies: this.securityPolicies.size,\n      activeSessions: this.activeSessions.size,\n      recentHighRiskEvents,\n    };\n  }\n\n  /**\n   * ユーザーの取得\n   */\n  getUser(userId: string): User | undefined {\n    return this.users.get(userId);\n  }\n\n  /**\n   * 役割の取得\n   */\n  getRole(roleId: string): Role | undefined {\n    return this.roles.get(roleId);\n  }\n\n  /**\n   * 権限の取得\n   */\n  getPermission(permissionId: string): Permission | undefined {\n    return this.permissions.get(permissionId);\n  }\n\n  /**\n   * セキュリティポリシーの取得\n   */\n  getSecurityPolicy(policyId: string): SecurityPolicy | undefined {\n    return this.securityPolicies.get(policyId);\n  }\n\n  /**\n   * 全ユーザーの取得\n   */\n  getAllUsers(): User[] {\n    return Array.from(this.users.values());\n  }\n\n  /**\n   * 全役割の取得\n   */\n  getAllRoles(): Role[] {\n    return Array.from(this.roles.values());\n  }\n\n  /**\n   * 全権限の取得\n   */\n  getAllPermissions(): Permission[] {\n    return Array.from(this.permissions.values());\n  }\n\n  /**\n   * 全セキュリティポリシーの取得\n   */\n  getAllSecurityPolicies(): SecurityPolicy[] {\n    return Array.from(this.securityPolicies.values());\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/enterprise-orchestrator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2132,2135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2132,2135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2148,2151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2148,2151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5791,5794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5791,5794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8184,8187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8184,8187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":408,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9280,9283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9280,9283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":410,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":410,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9317,9320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9317,9320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10535,10538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10535,10538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":457,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10572,10575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10572,10575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11637,11640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11637,11640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":500,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":500,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11674,11677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11674,11677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":556,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":556,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13244,13247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13244,13247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13281,13284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13281,13284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":618,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":618,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14811,14814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14811,14814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":620,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":620,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14848,14851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14848,14851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":747,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":747,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18001,18004],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18001,18004],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":766,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":766,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18476,18479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18476,18479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":766,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":766,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18490,18493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18490,18493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":782,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18826,18829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18826,18829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":782,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":782,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18840,18843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18840,18843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":794,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":794,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19078,19081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19078,19081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":794,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":794,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19092,19095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19092,19095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reportType' is defined but never used. Allowed unused args must match /^_/u.","line":811,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":811,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateRange' is defined but never used. Allowed unused args must match /^_/u.","line":812,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":812,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":812,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":812,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19429,19432],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19429,19432],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":813,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":813,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19446,19449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19446,19449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":828,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":828,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19702,19705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19702,19705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":828,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":828,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19734,19737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19734,19737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":883,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21030,21033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21030,21033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 企業向けマルチテナント・オーケストレーション機能\n *\n * 大規模組織でのDNS管理を効率化するためのエンタープライズ機能\n * - マルチテナント分離\n * - 組織単位でのリソース管理\n * - 階層型権限管理\n * - 統合監視・レポート\n */\n\nimport { randomUUID } from 'crypto';\nimport { EventEmitter } from 'events';\n\nimport { AIDNSOptimizer } from './ai-dns-optimizer.js';\nimport { DNSResolver } from './dns-resolver.js';\nimport { DNSSecurityAnalyzer } from './dns-security-analyzer.js';\nimport { Logger } from './logger.js';\nimport { PerformanceMonitor } from './performance-monitor.js';\n\nexport interface Tenant {\n  id: string;\n  name: string;\n  organizationId: string;\n  domain: string;\n  settings: TenantSettings;\n  resources: TenantResources;\n  permissions: TenantPermissions;\n  createdAt: Date;\n  updatedAt: Date;\n  status: 'active' | 'suspended' | 'inactive';\n}\n\nexport interface TenantSettings {\n  dnsResolvers: string[];\n  securityPolicies: {\n    threatDetection: boolean;\n    realTimeMonitoring: boolean;\n    aiOptimization: boolean;\n    confidenceThreshold: number;\n  };\n  performanceSettings: {\n    monitoringEnabled: boolean;\n    alertThresholds: {\n      responseTime: number;\n      errorRate: number;\n      throughput: number;\n    };\n  };\n  integrationsEnabled: string[];\n  customDomains: string[];\n}\n\nexport interface TenantResources {\n  maxDomains: number;\n  maxRecords: number;\n  maxQueries: number;\n  maxUsers: number;\n  storageLimit: number;\n  computeLimit: number;\n  currentUsage: {\n    domains: number;\n    records: number;\n    queries: number;\n    users: number;\n    storage: number;\n    compute: number;\n  };\n}\n\nexport interface TenantPermissions {\n  adminUsers: string[];\n  readOnlyUsers: string[];\n  customRoles: {\n    [roleName: string]: {\n      permissions: string[];\n      users: string[];\n    };\n  };\n  apiKeys: {\n    [keyId: string]: {\n      permissions: string[];\n      expiresAt: Date;\n      createdBy: string;\n    };\n  };\n}\n\nexport interface OrchestrationJob {\n  id: string;\n  tenantId: string;\n  type:\n    | 'dns-analysis'\n    | 'security-scan'\n    | 'optimization'\n    | 'bulk-operation'\n    | 'report-generation';\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  parameters: any;\n  result?: any;\n  error?: string;\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  progress: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  estimatedDuration: number;\n  actualDuration?: number;\n}\n\nexport interface OrchestrationConfig {\n  maxConcurrentJobs: number;\n  jobTimeoutMs: number;\n  resourceLimits: {\n    maxMemoryMB: number;\n    maxCpuPercent: number;\n    maxNetworkBandwidth: number;\n  };\n  tenantIsolation: {\n    enabled: boolean;\n    sandboxMode: boolean;\n    resourceQuotas: boolean;\n  };\n  monitoring: {\n    metricsEnabled: boolean;\n    alertingEnabled: boolean;\n    auditLogging: boolean;\n  };\n}\n\nexport class EnterpriseOrchestrator extends EventEmitter {\n  private tenants: Map<string, Tenant> = new Map();\n  private jobs: Map<string, OrchestrationJob> = new Map();\n  private runningJobs: Map<string, Promise<void>> = new Map();\n  private performanceMonitor: PerformanceMonitor;\n  private logger: Logger;\n  private config: OrchestrationConfig;\n  private jobQueue: OrchestrationJob[] = [];\n  private isProcessing: boolean = false;\n\n  constructor(logger?: Logger, config?: Partial<OrchestrationConfig>) {\n    super();\n\n    this.logger = logger || new Logger();\n    this.config = {\n      maxConcurrentJobs: 10,\n      jobTimeoutMs: 300000, // 5分\n      resourceLimits: {\n        maxMemoryMB: 1024,\n        maxCpuPercent: 80,\n        maxNetworkBandwidth: 100, // Mbps\n      },\n      tenantIsolation: {\n        enabled: true,\n        sandboxMode: true,\n        resourceQuotas: true,\n      },\n      monitoring: {\n        metricsEnabled: true,\n        alertingEnabled: true,\n        auditLogging: true,\n      },\n      ...config,\n    };\n\n    this.performanceMonitor = new PerformanceMonitor(this.logger, {\n      enableRealTimeMonitoring: true,\n      alertThresholds: {\n        responseTime: 5000,\n        errorRate: 5,\n        memoryUsage: 80,\n        cpuUsage: 80,\n      },\n    });\n\n    this.startJobProcessor();\n  }\n\n  /**\n   * テナントの作成\n   */\n  async createTenant(\n    tenantData: Omit<Tenant, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Tenant> {\n    const tenant: Tenant = {\n      id: randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...tenantData,\n    };\n\n    // リソース制限の検証\n    if (this.config.tenantIsolation.resourceQuotas) {\n      await this.validateResourceQuotas(tenant);\n    }\n\n    this.tenants.set(tenant.id, tenant);\n\n    // 監査ログ\n    if (this.config.monitoring.auditLogging) {\n      this.logger.info('テナントを作成しました', {\n        tenantId: tenant.id,\n        organizationId: tenant.organizationId,\n        domain: tenant.domain,\n      });\n    }\n\n    this.emit('tenant-created', tenant);\n    return tenant;\n  }\n\n  /**\n   * テナントの取得\n   */\n  getTenant(tenantId: string): Tenant | undefined {\n    return this.tenants.get(tenantId);\n  }\n\n  /**\n   * テナント一覧の取得\n   */\n  getTenants(organizationId?: string): Tenant[] {\n    const tenants = Array.from(this.tenants.values());\n    return organizationId\n      ? tenants.filter(t => t.organizationId === organizationId)\n      : tenants;\n  }\n\n  /**\n   * テナント設定の更新\n   */\n  async updateTenantSettings(\n    tenantId: string,\n    settings: Partial<TenantSettings>\n  ): Promise<void> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    tenant.settings = { ...tenant.settings, ...settings };\n    tenant.updatedAt = new Date();\n\n    this.logger.info('テナント設定を更新しました', { tenantId, settings });\n    this.emit('tenant-settings-updated', tenant);\n  }\n\n  /**\n   * オーケストレーション・ジョブの作成\n   */\n  async createJob(\n    tenantId: string,\n    type: OrchestrationJob['type'],\n    parameters: any,\n    priority: OrchestrationJob['priority'] = 'medium'\n  ): Promise<OrchestrationJob> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    // リソース制限の確認\n    if (this.config.tenantIsolation.resourceQuotas) {\n      await this.checkResourceLimits(tenant);\n    }\n\n    const job: OrchestrationJob = {\n      id: randomUUID(),\n      tenantId,\n      type,\n      status: 'pending',\n      parameters,\n      priority,\n      progress: 0,\n      estimatedDuration: this.estimateJobDuration(type, parameters),\n      createdAt: new Date(),\n    };\n\n    this.jobs.set(job.id, job);\n    this.jobQueue.push(job);\n\n    // 優先度でソート\n    this.jobQueue.sort((a, b) => {\n      const priorities = { critical: 4, high: 3, medium: 2, low: 1 };\n      return priorities[b.priority] - priorities[a.priority];\n    });\n\n    this.logger.info('オーケストレーション・ジョブを作成しました', {\n      jobId: job.id,\n      tenantId,\n      type,\n      priority,\n    });\n\n    this.emit('job-created', job);\n    return job;\n  }\n\n  /**\n   * ジョブの実行\n   */\n  private async executeJob(job: OrchestrationJob): Promise<void> {\n    const tenant = this.tenants.get(job.tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${job.tenantId}`);\n    }\n\n    job.status = 'running';\n    job.startedAt = new Date();\n\n    this.logger.info('ジョブを開始しました', {\n      jobId: job.id,\n      tenantId: job.tenantId,\n      type: job.type,\n    });\n\n    this.emit('job-started', job);\n\n    try {\n      const startTime = Date.now();\n\n      // テナント固有のコンテキストで実行\n      const result = await this.executeInTenantContext(tenant, job);\n\n      job.result = result;\n      job.status = 'completed';\n      job.completedAt = new Date();\n      job.actualDuration = Date.now() - startTime;\n      job.progress = 100;\n\n      this.logger.info('ジョブが完了しました', {\n        jobId: job.id,\n        duration: job.actualDuration,\n      });\n\n      this.emit('job-completed', job);\n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : 'Unknown error';\n      job.completedAt = new Date();\n\n      this.logger.error('ジョブが失敗しました', {\n        jobId: job.id,\n        error: job.error,\n      });\n\n      this.emit('job-failed', job);\n    }\n  }\n\n  /**\n   * テナント・コンテキストでの実行\n   */\n  private async executeInTenantContext(\n    tenant: Tenant,\n    job: OrchestrationJob\n  ): Promise<any> {\n    const isolatedLogger = new Logger({\n      prefix: `[${tenant.id}]`,\n      level: 'info',\n    });\n\n    switch (job.type) {\n      case 'dns-analysis':\n        return await this.executeDNSAnalysis(\n          tenant,\n          job.parameters,\n          isolatedLogger\n        );\n\n      case 'security-scan':\n        return await this.executeSecurityScan(\n          tenant,\n          job.parameters,\n          isolatedLogger\n        );\n\n      case 'optimization':\n        return await this.executeOptimization(\n          tenant,\n          job.parameters,\n          isolatedLogger\n        );\n\n      case 'bulk-operation':\n        return await this.executeBulkOperation(\n          tenant,\n          job.parameters,\n          isolatedLogger\n        );\n\n      case 'report-generation':\n        return await this.executeReportGeneration(\n          tenant,\n          job.parameters,\n          isolatedLogger\n        );\n\n      default:\n        throw new Error(`未対応のジョブタイプ: ${job.type}`);\n    }\n  }\n\n  /**\n   * DNS分析の実行\n   */\n  private async executeDNSAnalysis(\n    tenant: Tenant,\n    parameters: any,\n    logger: Logger\n  ): Promise<any> {\n    const resolver = new DNSResolver(logger);\n    const domains = parameters.domains || tenant.settings.customDomains;\n\n    logger.info('DNS分析を開始します', { domainCount: domains.length });\n\n    const results = [];\n    for (const domain of domains) {\n      try {\n        const records = await resolver.resolveAllRecords(domain);\n        const analysis = await resolver.analyzeRecords(records);\n\n        results.push({\n          domain,\n          records,\n          analysis,\n          timestamp: new Date(),\n        });\n\n        // 進捗の更新\n        const progress = (results.length / domains.length) * 100;\n        this.updateJobProgress(parameters.jobId, progress);\n      } catch (error) {\n        logger.warn(`DNS分析に失敗しました: ${domain}`, { error });\n        results.push({\n          domain,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          timestamp: new Date(),\n        });\n      }\n    }\n\n    return {\n      totalDomains: domains.length,\n      successCount: results.filter(r => !r.error).length,\n      errorCount: results.filter(r => r.error).length,\n      results,\n    };\n  }\n\n  /**\n   * セキュリティスキャンの実行\n   */\n  private async executeSecurityScan(\n    tenant: Tenant,\n    parameters: any,\n    logger: Logger\n  ): Promise<any> {\n    const analyzer = new DNSSecurityAnalyzer(logger, {\n      threatDetection: {\n        enabledAnalyzers: [\n          'malware',\n          'phishing',\n          'typosquatting',\n          'dga',\n          'fastflux',\n          'dns_hijacking',\n        ],\n        confidenceThreshold:\n          tenant.settings.securityPolicies.confidenceThreshold,\n        realTimeMonitoring: tenant.settings.securityPolicies.realTimeMonitoring,\n      },\n    });\n\n    const domains = parameters.domains || tenant.settings.customDomains;\n    const records = parameters.records || [];\n\n    logger.info('セキュリティスキャンを開始します', {\n      domainCount: domains.length,\n      recordCount: records.length,\n    });\n\n    const threats = await analyzer.analyzeSecurityThreats(domains, records);\n\n    return {\n      totalDomains: domains.length,\n      threatsFound: threats.length,\n      threats,\n      statistics: analyzer.getThreatStatistics(),\n      scanCompletedAt: new Date(),\n    };\n  }\n\n  /**\n   * AI最適化の実行\n   */\n  private async executeOptimization(\n    tenant: Tenant,\n    parameters: any,\n    logger: Logger\n  ): Promise<any> {\n    const optimizer = new AIDNSOptimizer(logger, {\n      enabledOptimizers: [\n        'ttl',\n        'record-consolidation',\n        'geographic-optimization',\n      ],\n      businessContext: {\n        industry: parameters.industry || 'technology',\n        organizationSize: parameters.size || 'enterprise',\n        budget: parameters.budget || 'high',\n      },\n    });\n\n    const domains = parameters.domains || tenant.settings.customDomains;\n    logger.info('AI最適化を開始します', { domainCount: domains.length });\n\n    const optimizations = [];\n    for (const domain of domains) {\n      try {\n        const suggestions = await optimizer.analyzeAndOptimize({\n          domain,\n          currentRecords: parameters.records || [],\n          businessContext: {\n            industry: parameters.industry || 'technology',\n            organizationSize: parameters.size || 'enterprise',\n            budget: parameters.budget || 'high',\n          },\n        });\n\n        optimizations.push({\n          domain,\n          suggestions,\n          timestamp: new Date(),\n        });\n\n        const progress = (optimizations.length / domains.length) * 100;\n        this.updateJobProgress(parameters.jobId, progress);\n      } catch (error) {\n        logger.warn(`最適化に失敗しました: ${domain}`, { error });\n      }\n    }\n\n    return {\n      totalDomains: domains.length,\n      optimizationsGenerated: optimizations.length,\n      optimizations,\n      completedAt: new Date(),\n    };\n  }\n\n  /**\n   * バルクオペレーションの実行\n   */\n  private async executeBulkOperation(\n    tenant: Tenant,\n    parameters: any,\n    logger: Logger\n  ): Promise<any> {\n    const { operation, targets } = parameters;\n\n    logger.info('バルクオペレーションを開始します', {\n      operation,\n      targetCount: targets.length,\n    });\n\n    const results = [];\n    for (const target of targets) {\n      try {\n        let result;\n\n        switch (operation) {\n          case 'add-record':\n            result = await this.addDNSRecord(tenant, target);\n            break;\n          case 'update-record':\n            result = await this.updateDNSRecord(tenant, target);\n            break;\n          case 'delete-record':\n            result = await this.deleteDNSRecord(tenant, target);\n            break;\n          default:\n            throw new Error(`未対応のオペレーション: ${operation}`);\n        }\n\n        results.push({\n          target,\n          result,\n          status: 'success',\n          timestamp: new Date(),\n        });\n      } catch (error) {\n        results.push({\n          target,\n          error: error instanceof Error ? error.message : 'Unknown error',\n          status: 'failed',\n          timestamp: new Date(),\n        });\n      }\n\n      const progress = (results.length / targets.length) * 100;\n      this.updateJobProgress(parameters.jobId, progress);\n    }\n\n    return {\n      operation,\n      totalTargets: targets.length,\n      successCount: results.filter(r => r.status === 'success').length,\n      failureCount: results.filter(r => r.status === 'failed').length,\n      results,\n    };\n  }\n\n  /**\n   * レポート生成の実行\n   */\n  private async executeReportGeneration(\n    tenant: Tenant,\n    parameters: any,\n    logger: Logger\n  ): Promise<any> {\n    const { reportType, dateRange, format } = parameters;\n\n    logger.info('レポート生成を開始します', {\n      reportType,\n      dateRange,\n      format,\n    });\n\n    const reportData = await this.generateReportData(\n      tenant,\n      reportType,\n      dateRange\n    );\n    const formattedReport = await this.formatReport(reportData, format);\n\n    return {\n      reportType,\n      dateRange,\n      format,\n      dataPoints: reportData.length,\n      report: formattedReport,\n      generatedAt: new Date(),\n    };\n  }\n\n  /**\n   * ジョブの進捗更新\n   */\n  private updateJobProgress(jobId: string, progress: number): void {\n    const job = this.jobs.get(jobId);\n    if (job) {\n      job.progress = Math.min(progress, 100);\n      this.emit('job-progress', job);\n    }\n  }\n\n  /**\n   * ジョブプロセッサーの開始\n   */\n  private startJobProcessor(): void {\n    setInterval(async () => {\n      if (this.isProcessing || this.jobQueue.length === 0) {\n        return;\n      }\n\n      const runningJobsCount = this.runningJobs.size;\n      if (runningJobsCount >= this.config.maxConcurrentJobs) {\n        return;\n      }\n\n      const job = this.jobQueue.shift();\n      if (!job) return;\n\n      this.isProcessing = true;\n\n      try {\n        const jobPromise = this.executeJob(job);\n        this.runningJobs.set(job.id, jobPromise);\n\n        // タイムアウト処理\n        const timeoutPromise = new Promise<void>((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Job timeout'));\n          }, this.config.jobTimeoutMs);\n        });\n\n        await Promise.race([jobPromise, timeoutPromise]);\n      } catch (error) {\n        this.logger.error('ジョブ実行でエラーが発生しました', {\n          jobId: job.id,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      } finally {\n        this.runningJobs.delete(job.id);\n        this.isProcessing = false;\n      }\n    }, 1000);\n  }\n\n  /**\n   * リソース制限の確認\n   */\n  private async checkResourceLimits(tenant: Tenant): Promise<void> {\n    const usage = tenant.resources.currentUsage;\n    const limits = tenant.resources;\n\n    if (usage.domains >= limits.maxDomains) {\n      throw new Error(`ドメイン数の制限に達しました: ${limits.maxDomains}`);\n    }\n\n    if (usage.records >= limits.maxRecords) {\n      throw new Error(`レコード数の制限に達しました: ${limits.maxRecords}`);\n    }\n\n    if (usage.queries >= limits.maxQueries) {\n      throw new Error(`クエリ数の制限に達しました: ${limits.maxQueries}`);\n    }\n  }\n\n  /**\n   * リソースクォータの検証\n   */\n  private async validateResourceQuotas(tenant: Tenant): Promise<void> {\n    // 組織の総リソース使用量を確認\n    const orgTenants = this.getTenants(tenant.organizationId);\n    const totalUsage = orgTenants.reduce(\n      (acc, t) => ({\n        domains: acc.domains + t.resources.currentUsage.domains,\n        records: acc.records + t.resources.currentUsage.records,\n        queries: acc.queries + t.resources.currentUsage.queries,\n      }),\n      { domains: 0, records: 0, queries: 0 }\n    );\n\n    // 組織レベルの制限確認（実装は組織設定に依存）\n    this.logger.info('リソースクォータを検証しました', {\n      tenantId: tenant.id,\n      totalUsage,\n    });\n  }\n\n  /**\n   * ジョブ実行時間の推定\n   */\n  private estimateJobDuration(\n    type: OrchestrationJob['type'],\n    parameters: any\n  ): number {\n    const baseDurations = {\n      'dns-analysis': 5000,\n      'security-scan': 10000,\n      optimization: 15000,\n      'bulk-operation': 20000,\n      'report-generation': 8000,\n    };\n\n    const domainCount = parameters.domains?.length || 1;\n    const complexityMultiplier = Math.max(1, Math.log(domainCount + 1));\n\n    return baseDurations[type] * complexityMultiplier;\n  }\n\n  /**\n   * DNSレコードの追加\n   */\n  private async addDNSRecord(tenant: Tenant, record: any): Promise<any> {\n    // 実際の実装では、DNS プロバイダーのAPIを呼び出す\n    this.logger.info('DNSレコードを追加しました', {\n      tenantId: tenant.id,\n      record,\n    });\n\n    // 使用量の更新\n    tenant.resources.currentUsage.records++;\n\n    return { success: true, recordId: randomUUID() };\n  }\n\n  /**\n   * DNSレコードの更新\n   */\n  private async updateDNSRecord(tenant: Tenant, record: any): Promise<any> {\n    this.logger.info('DNSレコードを更新しました', {\n      tenantId: tenant.id,\n      record,\n    });\n\n    return { success: true, recordId: record.id };\n  }\n\n  /**\n   * DNSレコードの削除\n   */\n  private async deleteDNSRecord(tenant: Tenant, record: any): Promise<any> {\n    this.logger.info('DNSレコードを削除しました', {\n      tenantId: tenant.id,\n      record,\n    });\n\n    // 使用量の更新\n    tenant.resources.currentUsage.records--;\n\n    return { success: true, recordId: record.id };\n  }\n\n  /**\n   * レポートデータの生成\n   */\n  private async generateReportData(\n    tenant: Tenant,\n    reportType: string,\n    dateRange: any\n  ): Promise<any[]> {\n    // 実際の実装では、データベースから必要なデータを取得\n    return [\n      {\n        date: new Date(),\n        metric: 'sample_metric',\n        value: 100,\n        tenantId: tenant.id,\n      },\n    ];\n  }\n\n  /**\n   * レポートのフォーマット\n   */\n  private async formatReport(data: any[], format: string): Promise<any> {\n    switch (format) {\n      case 'json':\n        return JSON.stringify(data, null, 2);\n      case 'csv':\n        // CSV形式でのフォーマット\n        return data.map(d => Object.values(d).join(',')).join('\\n');\n      default:\n        return data;\n    }\n  }\n\n  /**\n   * ジョブの取得\n   */\n  getJob(jobId: string): OrchestrationJob | undefined {\n    return this.jobs.get(jobId);\n  }\n\n  /**\n   * テナントのジョブ一覧取得\n   */\n  getTenantJobs(tenantId: string): OrchestrationJob[] {\n    return Array.from(this.jobs.values()).filter(\n      job => job.tenantId === tenantId\n    );\n  }\n\n  /**\n   * 統計情報の取得\n   */\n  getStatistics(): {\n    totalTenants: number;\n    activeTenants: number;\n    totalJobs: number;\n    runningJobs: number;\n    completedJobs: number;\n    failedJobs: number;\n  } {\n    const tenants = Array.from(this.tenants.values());\n    const jobs = Array.from(this.jobs.values());\n\n    return {\n      totalTenants: tenants.length,\n      activeTenants: tenants.filter(t => t.status === 'active').length,\n      totalJobs: jobs.length,\n      runningJobs: jobs.filter(j => j.status === 'running').length,\n      completedJobs: jobs.filter(j => j.status === 'completed').length,\n      failedJobs: jobs.filter(j => j.status === 'failed').length,\n    };\n  }\n\n  /**\n   * パフォーマンスメトリクスの取得\n   */\n  getPerformanceMetrics(): any {\n    return this.performanceMonitor.getMetrics();\n  }\n\n  /**\n   * 正常終了処理\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('エンタープライズ・オーケストレーターを停止しています...');\n\n    // 実行中のジョブを待機\n    await Promise.all(this.runningJobs.values());\n\n    // パフォーマンス監視を停止\n    this.performanceMonitor.stop();\n\n    this.logger.info('エンタープライズ・オーケストレーターを停止しました');\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/error-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[222,225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[222,225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * エラーハンドラー\n *\n * 統一されたエラー処理を提供\n */\n\nimport type { Logger } from './logger.js';\n\nexport interface ErrorContext {\n  command?: string;\n  domain?: string;\n  file?: string;\n  operation?: string;\n  details?: Record<string, any>;\n}\n\nexport class ErrorHandler {\n  private logger: Logger;\n  private context: ErrorContext;\n\n  constructor(logger: Logger, context: ErrorContext = {}) {\n    this.logger = logger;\n    this.context = context;\n  }\n\n  /**\n   * エラーを処理\n   */\n  handle(error: unknown, customMessage?: string): void {\n    // スピナーを停止\n    if (this.logger.stopSpinner) {\n      this.logger.stopSpinner(false, customMessage || 'エラーが発生しました');\n    }\n\n    // エラーメッセージの生成\n    const message = this.formatError(error);\n\n    // エラーログ出力\n    this.logger.error(message);\n\n    // デバッグ情報の出力（verboseモード時）\n    if (this.context && Object.keys(this.context).length > 0) {\n      this.logger.debug('エラーコンテキスト:', this.context);\n    }\n\n    // スタックトレースの出力（verboseモード時）\n    if (error instanceof Error && error.stack) {\n      this.logger.debug('スタックトレース:', error.stack);\n    }\n  }\n\n  /**\n   * エラーメッセージのフォーマット\n   */\n  private formatError(error: unknown): string {\n    if (error instanceof Error) {\n      return this.formatKnownError(error);\n    }\n\n    if (typeof error === 'string') {\n      return error;\n    }\n\n    if (typeof error === 'object' && error !== null) {\n      return JSON.stringify(error, null, 2);\n    }\n\n    return 'Unknown error occurred';\n  }\n\n  /**\n   * 既知のエラータイプのフォーマット\n   */\n  private formatKnownError(error: Error): string {\n    const errorName = error.name;\n    const errorMessage = error.message;\n\n    // 特定のエラータイプに対する処理\n    switch (errorName) {\n      case 'ValidationError':\n        return `入力検証エラー: ${errorMessage}`;\n\n      case 'NetworkError':\n      case 'ENOTFOUND':\n      case 'ETIMEDOUT':\n        return `ネットワークエラー: ${errorMessage}`;\n\n      case 'FileNotFoundError':\n      case 'ENOENT':\n        return `ファイルが見つかりません: ${errorMessage}`;\n\n      case 'PermissionError':\n      case 'EACCES':\n        return `権限エラー: ${errorMessage}`;\n\n      case 'DNSError':\n        return `DNS解決エラー: ${errorMessage}`;\n\n      case 'AuthenticationError':\n        return `認証エラー: ${errorMessage}`;\n\n      case 'RateLimitError':\n        return `レート制限エラー: ${errorMessage}`;\n\n      case 'SyntaxError':\n        return `構文エラー: ${errorMessage}`;\n\n      case 'TypeError':\n        return `型エラー: ${errorMessage}`;\n\n      default:\n        return errorMessage;\n    }\n  }\n\n  /**\n   * コンテキストの更新\n   */\n  updateContext(context: Partial<ErrorContext>): void {\n    this.context = { ...this.context, ...context };\n  }\n\n  /**\n   * エラーの再スロー（必要に応じて）\n   */\n  rethrow(error: unknown, customMessage?: string): never {\n    this.handle(error, customMessage);\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error(customMessage || 'An error occurred');\n  }\n\n  /**\n   * 条件付きエラーハンドリング\n   */\n  handleIf(condition: boolean, error: unknown, customMessage?: string): void {\n    if (condition) {\n      this.handle(error, customMessage);\n    }\n  }\n\n  /**\n   * 非同期エラーハンドリング\n   */\n  async handleAsync<T>(\n    fn: () => Promise<T>,\n    customMessage?: string\n  ): Promise<T | undefined> {\n    try {\n      return await fn();\n    } catch (error) {\n      this.handle(error, customMessage);\n      return undefined;\n    }\n  }\n\n  /**\n   * エラーのラップ\n   */\n  wrap(error: unknown, additionalMessage: string): Error {\n    if (error instanceof Error) {\n      error.message = `${additionalMessage}: ${error.message}`;\n      return error;\n    }\n\n    return new Error(`${additionalMessage}: ${String(error)}`);\n  }\n}\n\n/**\n * カスタムエラークラス\n */\nexport class DNSweeperError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public context?: ErrorContext\n  ) {\n    super(message);\n    this.name = 'DNSweeperError';\n  }\n}\n\nexport class ValidationError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'VALIDATION_ERROR', context);\n    this.name = 'ValidationError';\n  }\n}\n\nexport class NetworkError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'NETWORK_ERROR', context);\n    this.name = 'NetworkError';\n  }\n}\n\nexport class FileError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'FILE_ERROR', context);\n    this.name = 'FileError';\n  }\n}\n\nexport class DNSError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'DNS_ERROR', context);\n    this.name = 'DNSError';\n  }\n}\n\nexport class AuthenticationError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'AUTH_ERROR', context);\n    this.name = 'AuthenticationError';\n  }\n}\n\nexport class RateLimitError extends DNSweeperError {\n  constructor(message: string, context?: ErrorContext) {\n    super(message, 'RATE_LIMIT_ERROR', context);\n    this.name = 'RateLimitError';\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getLanguageByCode' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getRegionalSettingsByCode' is defined but never used. Allowed unused vars must match /^_/u.","line":22,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'namespaces' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":494,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":494,"endColumn":21}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * グローバル展開・多言語対応管理システム\n *\n * DNSweeper のグローバル展開に対応する包括的な国際化機能\n * - 40言語対応\n * - 地域別設定\n * - 動的言語切り替え\n * - 複数形対応\n * - 数値・日付・通貨フォーマット\n * - RTL (Right-to-Left) 言語対応\n */\n\nimport { EventEmitter } from 'events';\n\nimport { I18nFormatter } from '@lib/i18n/formatters/formatter.js';\nimport {\n  SUPPORTED_LANGUAGES,\n  getLanguageByCode,\n} from '@lib/i18n/languages/language-definitions.js';\nimport {\n  REGIONAL_SETTINGS,\n  getRegionalSettingsByCode,\n} from '@lib/i18n/regions/regional-settings.js';\nimport { TranslationManager } from '@lib/i18n/translations/translation-manager.js';\nimport { Logger } from '@lib/logger.js';\n\nimport type {\n  SupportedLanguage,\n  PluralRule,\n  TranslationNamespace,\n  TranslationEntry,\n  LocalizationContext,\n  NumberFormatOptions,\n  RegionalSettings,\n  I18nManagerConfig,\n  TranslationReport,\n} from '@lib/i18n/core/types.js';\n\n// Re-export types for backward compatibility\nexport type {\n  SupportedLanguage,\n  PluralRule,\n  TranslationNamespace,\n  TranslationEntry,\n  LocalizationContext,\n  NumberFormatOptions,\n  RegionalSettings,\n  I18nManagerConfig,\n  TranslationReport,\n};\n\nexport class I18nManager extends EventEmitter {\n  private supportedLanguages: Map<string, SupportedLanguage> = new Map();\n  private regionalSettings: Map<string, RegionalSettings> = new Map();\n  private currentLanguage: string;\n  private currentRegion: string;\n  private logger: Logger;\n  private config: I18nManagerConfig;\n  private localizationContext: LocalizationContext;\n  private translationManager: TranslationManager;\n  private formatter: I18nFormatter;\n\n  constructor(logger?: Logger, config?: Partial<I18nManagerConfig>) {\n    super();\n\n    this.logger = logger || new Logger();\n    this.config = {\n      defaultLanguage: 'en',\n      fallbackLanguage: 'en',\n      autoDetectLanguage: true,\n      enablePluralHandling: true,\n      enableInterpolation: true,\n      translationCacheSize: 10000,\n      missingKeyHandling: 'warning',\n      enableRTL: true,\n      enableRegionalSettings: true,\n      ...config,\n    };\n\n    this.currentLanguage = this.config.defaultLanguage;\n    this.currentRegion = 'US';\n\n    this.initializeSupportedLanguages();\n    this.initializeRegionalSettings();\n    this.initializeLocalizationContext();\n\n    // 翻訳マネージャーとフォーマッターを初期化\n    this.translationManager = new TranslationManager();\n    this.formatter = new I18nFormatter(this.localizationContext);\n\n    // イベントハンドラーを設定\n    this.setupEventHandlers();\n  }\n\n  /**\n   * サポート言語の初期化\n   */\n  private initializeSupportedLanguages(): void {\n    // 言語定義をインポート\n    for (const language of SUPPORTED_LANGUAGES) {\n      this.supportedLanguages.set(language.code, language);\n    }\n\n    this.logger.info('サポート言語を初期化しました', {\n      total: this.supportedLanguages.size,\n      enabled: Array.from(this.supportedLanguages.values()).filter(\n        l => l.enabled\n      ).length,\n    });\n  }\n\n  /**\n   * イベントハンドラーのセットアップ\n   */\n  private setupEventHandlers(): void {\n    // 翻訳マネージャーのイベントを転送\n    this.translationManager.on('translation:added', event => {\n      this.emit('translation:added', event);\n    });\n\n    this.translationManager.on('translation:missing', event => {\n      this.emit('translation:missing', event);\n    });\n\n    this.translationManager.on('translations:imported', event => {\n      this.emit('translations:imported', event);\n    });\n\n    this.translationManager.on('translations:exported', event => {\n      this.emit('translations:exported', event);\n    });\n  }\n\n  /**\n   * 地域設定の初期化\n   */\n  private initializeRegionalSettings(): void {\n    // 地域設定をインポート\n    for (const settings of REGIONAL_SETTINGS) {\n      this.regionalSettings.set(settings.region, settings);\n    }\n\n    this.logger.info('地域設定を初期化しました', {\n      total: this.regionalSettings.size,\n    });\n  }\n\n  /**\n   * ローカライゼーションコンテキストの初期化\n   */\n  private initializeLocalizationContext(): void {\n    const currentLang = this.supportedLanguages.get(this.currentLanguage);\n    const currentRegionSettings = this.regionalSettings.get(this.currentRegion);\n\n    this.localizationContext = {\n      language: this.currentLanguage,\n      region: this.currentRegion,\n      timezone: currentRegionSettings?.timezone || 'UTC',\n      currency: currentRegionSettings?.currency || 'USD',\n      dateFormat: currentLang?.dateFormat || 'YYYY-MM-DD',\n      timeFormat: currentLang?.timeFormat || 'HH:mm',\n      numberFormat: {\n        decimal: currentLang?.numberFormat.decimal || '.',\n        thousand: currentLang?.numberFormat.thousand || ',',\n        precision: 2,\n        currency: currentLang?.numberFormat.currency || '$',\n        currencyDisplay: 'symbol',\n      },\n      rtl: currentLang?.direction === 'rtl',\n      culturalPreferences: {\n        firstDayOfWeek: this.currentRegion === 'US' ? 0 : 1, // 0=Sunday, 1=Monday\n        weekendDays: [0, 6], // Sunday, Saturday\n        hourFormat: currentLang?.timeFormat.includes('A') ? 12 : 24,\n      },\n    };\n  }\n\n  /**\n   * 言語の変更\n   */\n  async changeLanguage(languageCode: string): Promise<void> {\n    const language = this.supportedLanguages.get(languageCode);\n    if (!language) {\n      throw new Error(`サポートされていない言語です: ${languageCode}`);\n    }\n\n    if (!language.enabled) {\n      throw new Error(`言語が無効です: ${languageCode}`);\n    }\n\n    const previousLanguage = this.currentLanguage;\n    this.currentLanguage = languageCode;\n\n    // 地域設定の更新\n    this.currentRegion = language.region;\n    this.initializeLocalizationContext();\n\n    // フォーマッターのコンテキストを更新\n    this.formatter.updateContext(this.localizationContext);\n\n    this.logger.info('言語を変更しました', {\n      from: previousLanguage,\n      to: languageCode,\n      region: this.currentRegion,\n    });\n\n    this.emit('language-changed', {\n      from: previousLanguage,\n      to: languageCode,\n      region: this.currentRegion,\n      context: this.localizationContext,\n    });\n  }\n\n  /**\n   * 地域の変更\n   */\n  async changeRegion(regionCode: string): Promise<void> {\n    const regionSettings = this.regionalSettings.get(regionCode);\n    if (!regionSettings) {\n      throw new Error(`サポートされていない地域です: ${regionCode}`);\n    }\n\n    const previousRegion = this.currentRegion;\n    this.currentRegion = regionCode;\n\n    // デフォルト言語の更新\n    if (\n      regionSettings.defaultLanguage &&\n      this.supportedLanguages.has(regionSettings.defaultLanguage)\n    ) {\n      this.currentLanguage = regionSettings.defaultLanguage;\n    }\n\n    this.initializeLocalizationContext();\n    this.formatter.updateContext(this.localizationContext);\n\n    this.logger.info('地域を変更しました', {\n      from: previousRegion,\n      to: regionCode,\n      language: this.currentLanguage,\n    });\n\n    this.emit('region-changed', {\n      from: previousRegion,\n      to: regionCode,\n      language: this.currentLanguage,\n      context: this.localizationContext,\n    });\n  }\n\n  /**\n   * 翻訳の取得\n   */\n  translate(\n    key: string,\n    namespace: string = 'common',\n    options?: {\n      params?: Record<string, string | number>;\n      count?: number;\n      context?: string;\n    }\n  ): string {\n    return this.translationManager.translate(\n      this.currentLanguage,\n      `${namespace}.${key}`,\n      options?.params,\n      {\n        count: options?.count,\n        context: options?.context,\n        fallbackLanguage: this.config.fallbackLanguage,\n      }\n    );\n  }\n\n  /**\n   * 翻訳の追加\n   */\n  async addTranslation(\n    languageCode: string,\n    namespace: string,\n    key: string,\n    value: string,\n    options?: {\n      context?: string;\n      plurals?: { [form: string]: string };\n      interpolations?: string[];\n      translator?: string;\n      approved?: boolean;\n    }\n  ): Promise<void> {\n    this.translationManager.addTranslation(\n      languageCode,\n      key,\n      namespace,\n      value,\n      options\n    );\n  }\n\n  /**\n   * 翻訳ファイルのインポート\n   */\n  async importTranslations(\n    language: string,\n    filePath: string,\n    format: 'json' | 'csv' | 'po' = 'json'\n  ): Promise<number> {\n    return this.translationManager.importTranslations(\n      language,\n      filePath,\n      format\n    );\n  }\n\n  /**\n   * 翻訳ファイルのエクスポート\n   */\n  async exportTranslations(\n    language: string,\n    filePath: string,\n    format: 'json' | 'csv' | 'po' = 'json',\n    options?: {\n      namespace?: string;\n      approvedOnly?: boolean;\n    }\n  ): Promise<void> {\n    return this.translationManager.exportTranslations(\n      language,\n      filePath,\n      format,\n      options\n    );\n  }\n\n  /**\n   * 数値のフォーマット\n   */\n  formatNumber(value: number, options?: Partial<NumberFormatOptions>): string {\n    return this.formatter.formatNumber(value, options);\n  }\n\n  /**\n   * 通貨のフォーマット\n   */\n  formatCurrency(\n    value: number,\n    currency?: string,\n    display?: 'symbol' | 'code' | 'name'\n  ): string {\n    return this.formatter.formatCurrency(value, currency, display);\n  }\n\n  /**\n   * 日付のフォーマット\n   */\n  formatDate(date: Date | string | number, format?: string): string {\n    return this.formatter.formatDate(date, format);\n  }\n\n  /**\n   * 時刻のフォーマット\n   */\n  formatTime(date: Date | string | number, format?: string): string {\n    return this.formatter.formatTime(date, format);\n  }\n\n  /**\n   * 日付時刻のフォーマット\n   */\n  formatDateTime(\n    date: Date | string | number,\n    dateFormat?: string,\n    timeFormat?: string\n  ): string {\n    return this.formatter.formatDateTime(date, dateFormat, timeFormat);\n  }\n\n  /**\n   * 相対時間のフォーマット\n   */\n  formatRelativeTime(date: Date | string | number): string {\n    return this.formatter.formatRelativeTime(date);\n  }\n\n  /**\n   * パーセンテージのフォーマット\n   */\n  formatPercentage(value: number, decimals: number = 0): string {\n    return this.formatter.formatPercentage(value, decimals);\n  }\n\n  /**\n   * ファイルサイズのフォーマット\n   */\n  formatFileSize(bytes: number): string {\n    return this.formatter.formatFileSize(bytes);\n  }\n\n  /**\n   * 言語の自動検出\n   */\n  async detectLanguage(acceptLanguageHeader?: string): Promise<string> {\n    if (!this.config.autoDetectLanguage) {\n      return this.config.defaultLanguage;\n    }\n\n    if (acceptLanguageHeader) {\n      const preferredLanguages = acceptLanguageHeader\n        .split(',')\n        .map(lang => {\n          const [code, q = '1'] = lang.trim().split(';q=');\n          return { code: code.split('-')[0], quality: parseFloat(q) };\n        })\n        .sort((a, b) => b.quality - a.quality);\n\n      for (const { code } of preferredLanguages) {\n        if (this.supportedLanguages.has(code)) {\n          const language = this.supportedLanguages.get(code);\n          if (language?.enabled) {\n            return code;\n          }\n        }\n      }\n    }\n\n    return this.config.defaultLanguage;\n  }\n\n  /**\n   * 翻訳完成度レポートの生成\n   */\n  generateCompletionReport(): TranslationReport {\n    const enabledLanguages = this.getEnabledLanguages().map(l => l.code);\n    return this.translationManager.generateCompletionReport(enabledLanguages);\n  }\n\n  /**\n   * 地域設定の取得\n   */\n  getRegionalSettings(region?: string): RegionalSettings | undefined {\n    return this.regionalSettings.get(region || this.currentRegion);\n  }\n\n  /**\n   * サポート言語の取得\n   */\n  getSupportedLanguages(): SupportedLanguage[] {\n    return Array.from(this.supportedLanguages.values());\n  }\n\n  /**\n   * 有効言語の取得\n   */\n  getEnabledLanguages(): SupportedLanguage[] {\n    return Array.from(this.supportedLanguages.values()).filter(\n      lang => lang.enabled\n    );\n  }\n\n  /**\n   * 現在の言語取得\n   */\n  getCurrentLanguage(): string {\n    return this.currentLanguage;\n  }\n\n  /**\n   * 現在の地域取得\n   */\n  getCurrentRegion(): string {\n    return this.currentRegion;\n  }\n\n  /**\n   * ローカライゼーションコンテキストの取得\n   */\n  getLocalizationContext(): LocalizationContext {\n    return { ...this.localizationContext };\n  }\n\n  /**\n   * 翻訳統計の取得\n   */\n  getTranslationStatistics(): {\n    totalLanguages: number;\n    enabledLanguages: number;\n    totalNamespaces: number;\n    totalKeys: number;\n    totalTranslations: number;\n    cacheHitRate: number;\n  } {\n    const stats = this.translationManager.getStatistics();\n    const namespaces = new Set<string>();\n\n    // Get namespace count from translation manager\n    // This is a simplified version - in a real implementation,\n    // the TranslationManager would track namespaces\n\n    return {\n      totalLanguages: this.supportedLanguages.size,\n      enabledLanguages: this.getEnabledLanguages().length,\n      totalNamespaces: 8, // Fixed for now based on the namespace definitions\n      totalKeys: 0, // Would need to be tracked by TranslationManager\n      totalTranslations: stats.totalTranslations,\n      cacheHitRate: stats.cacheHitRate,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/core/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/formatters/formatter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/languages/language-definitions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/regions/regional-settings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/i18n/translations/translation-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'join' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":251,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":251,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 翻訳管理システム\n */\n\nimport { EventEmitter } from 'events';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\nimport type {\n  TranslationEntry,\n  TranslationNamespace,\n  TranslationReport,\n} from '../core/types.js';\n\nexport class TranslationManager extends EventEmitter {\n  private translations: Map<string, Map<string, TranslationEntry>> = new Map();\n  private namespaces: Map<string, TranslationNamespace> = new Map();\n  private translationCache: Map<string, string> = new Map();\n  private cacheHits = 0;\n  private cacheMisses = 0;\n\n  constructor() {\n    super();\n    this.initializeNamespaces();\n  }\n\n  /**\n   * 名前空間の初期化\n   */\n  private initializeNamespaces(): void {\n    const namespaces: TranslationNamespace[] = [\n      {\n        namespace: 'common',\n        description: '共通UI要素',\n        keys: ['button.ok', 'button.cancel', 'button.save', 'button.delete'],\n        priority: 'high',\n      },\n      {\n        namespace: 'dns',\n        description: 'DNS関連用語',\n        keys: [\n          'record.type.a',\n          'record.type.aaaa',\n          'record.type.cname',\n          'record.type.mx',\n        ],\n        priority: 'high',\n      },\n      {\n        namespace: 'errors',\n        description: 'エラーメッセージ',\n        keys: ['network.timeout', 'auth.failed', 'validation.required'],\n        priority: 'high',\n      },\n      {\n        namespace: 'dashboard',\n        description: 'ダッシュボード',\n        keys: ['title', 'stats.total', 'stats.active'],\n        priority: 'medium',\n      },\n      {\n        namespace: 'settings',\n        description: '設定画面',\n        keys: ['language.label', 'region.label', 'theme.label'],\n        priority: 'medium',\n      },\n    ];\n\n    for (const ns of namespaces) {\n      this.namespaces.set(ns.namespace, ns);\n    }\n  }\n\n  /**\n   * 翻訳の追加\n   */\n  addTranslation(\n    language: string,\n    key: string,\n    namespace: string,\n    value: string,\n    options?: {\n      context?: string;\n      plurals?: { [form: string]: string };\n      interpolations?: string[];\n      translator?: string;\n      approved?: boolean;\n    }\n  ): void {\n    if (!this.translations.has(language)) {\n      this.translations.set(language, new Map());\n    }\n\n    const langTranslations = this.translations.get(language)!;\n    const entry: TranslationEntry = {\n      key,\n      namespace,\n      value,\n      context: options?.context,\n      plurals: options?.plurals,\n      interpolations: options?.interpolations,\n      lastUpdated: new Date(),\n      translator: options?.translator,\n      approved: options?.approved ?? false,\n    };\n\n    const fullKey = `${namespace}.${key}`;\n    langTranslations.set(fullKey, entry);\n\n    // キャッシュをクリア\n    this.clearCacheForKey(fullKey);\n\n    this.emit('translation:added', {\n      language,\n      key: fullKey,\n      entry,\n    });\n  }\n\n  /**\n   * 翻訳の取得\n   */\n  getTranslation(\n    language: string,\n    key: string,\n    fallbackLanguage?: string\n  ): TranslationEntry | undefined {\n    const langTranslations = this.translations.get(language);\n    if (langTranslations) {\n      const entry = langTranslations.get(key);\n      if (entry) {\n        this.cacheHits++;\n        return entry;\n      }\n    }\n\n    this.cacheMisses++;\n\n    // フォールバック言語で試行\n    if (fallbackLanguage && fallbackLanguage !== language) {\n      const fallbackTranslations = this.translations.get(fallbackLanguage);\n      if (fallbackTranslations) {\n        return fallbackTranslations.get(key);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * 翻訳文字列の取得（補間対応）\n   */\n  translate(\n    language: string,\n    key: string,\n    params?: Record<string, string | number>,\n    options?: {\n      count?: number;\n      context?: string;\n      fallbackLanguage?: string;\n    }\n  ): string {\n    // キャッシュチェック\n    const cacheKey = `${language}.${key}.${JSON.stringify(params)}.${options?.count}`;\n    const cached = this.translationCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    const entry = this.getTranslation(language, key, options?.fallbackLanguage);\n    if (!entry) {\n      this.emit('translation:missing', { language, key });\n      return key; // キーをそのまま返す\n    }\n\n    let result = entry.value;\n\n    // 複数形処理\n    if (options?.count !== undefined && entry.plurals) {\n      const pluralForm = this.getPluralForm(language, options.count);\n      if (entry.plurals[pluralForm]) {\n        result = entry.plurals[pluralForm];\n      }\n    }\n\n    // パラメータ補間\n    if (params) {\n      result = this.interpolate(result, params);\n    }\n\n    // キャッシュに保存\n    if (this.translationCache.size < 10000) {\n      this.translationCache.set(cacheKey, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * 複数形の判定\n   */\n  private getPluralForm(language: string, count: number): string {\n    // 簡易実装 - 実際は各言語のルールに従う\n    switch (language) {\n      case 'ja':\n      case 'zh':\n      case 'ko':\n        return 'other'; // 不変\n      case 'ru':\n        if (count % 10 === 1 && count % 100 !== 11) return 'one';\n        if (\n          [2, 3, 4].includes(count % 10) &&\n          ![12, 13, 14].includes(count % 100)\n        )\n          return 'few';\n        return 'other';\n      default:\n        return count === 1 ? 'one' : 'other';\n    }\n  }\n\n  /**\n   * パラメータ補間\n   */\n  private interpolate(\n    text: string,\n    params: Record<string, string | number>\n  ): string {\n    return text.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n      return params[key]?.toString() || match;\n    });\n  }\n\n  /**\n   * 翻訳の一括インポート\n   */\n  async importTranslations(\n    language: string,\n    filePath: string,\n    format: 'json' | 'csv' | 'po' = 'json'\n  ): Promise<number> {\n    if (!existsSync(filePath)) {\n      throw new Error(`Translation file not found: ${filePath}`);\n    }\n\n    const content = readFileSync(filePath, 'utf-8');\n    let imported = 0;\n\n    switch (format) {\n      case 'json':\n        const translations = JSON.parse(content);\n        for (const [namespace, entries] of Object.entries(translations)) {\n          for (const [key, value] of Object.entries(\n            entries as Record<string, string>\n          )) {\n            this.addTranslation(language, key, namespace, value);\n            imported++;\n          }\n        }\n        break;\n      // CSV, PO形式は省略\n    }\n\n    this.emit('translations:imported', {\n      language,\n      count: imported,\n      format,\n    });\n\n    return imported;\n  }\n\n  /**\n   * 翻訳のエクスポート\n   */\n  async exportTranslations(\n    language: string,\n    filePath: string,\n    format: 'json' | 'csv' | 'po' = 'json',\n    options?: {\n      namespace?: string;\n      approvedOnly?: boolean;\n    }\n  ): Promise<void> {\n    const langTranslations = this.translations.get(language);\n    if (!langTranslations) {\n      throw new Error(`No translations found for language: ${language}`);\n    }\n\n    const exportData: Record<string, Record<string, string>> = {};\n\n    for (const [key, entry] of langTranslations.entries()) {\n      if (options?.namespace && !key.startsWith(options.namespace + '.')) {\n        continue;\n      }\n      if (options?.approvedOnly && !entry.approved) {\n        continue;\n      }\n\n      const [namespace, ...keyParts] = key.split('.');\n      const actualKey = keyParts.join('.');\n\n      if (!exportData[namespace]) {\n        exportData[namespace] = {};\n      }\n      exportData[namespace][actualKey] = entry.value;\n    }\n\n    switch (format) {\n      case 'json':\n        writeFileSync(filePath, JSON.stringify(exportData, null, 2));\n        break;\n      // CSV, PO形式は省略\n    }\n\n    this.emit('translations:exported', {\n      language,\n      filePath,\n      format,\n    });\n  }\n\n  /**\n   * 翻訳完成度レポート生成\n   */\n  generateCompletionReport(enabledLanguages: string[]): TranslationReport {\n    const report: TranslationReport = {\n      timestamp: new Date(),\n      totalLanguages: enabledLanguages.length,\n      enabledLanguages: enabledLanguages.length,\n      overallCompleteness: 0,\n      namespaces: [],\n    };\n\n    let totalCompleteness = 0;\n\n    for (const [nsName, namespace] of this.namespaces.entries()) {\n      const nsKeys = namespace.keys.map(k => `${nsName}.${k}`);\n      const nsReport = {\n        namespace: nsName,\n        completeness: 0,\n        languages: [] as Array<{ code: string; completeness: number }>,\n      };\n\n      let nsCompleteness = 0;\n\n      for (const language of enabledLanguages) {\n        const langTranslations = this.translations.get(language);\n        const translatedKeys = nsKeys.filter(\n          key => langTranslations && langTranslations.has(key)\n        );\n\n        const completeness =\n          nsKeys.length > 0 ? (translatedKeys.length / nsKeys.length) * 100 : 0;\n\n        nsReport.languages.push({\n          code: language,\n          completeness,\n        });\n\n        nsCompleteness += completeness;\n      }\n\n      nsReport.completeness =\n        enabledLanguages.length > 0\n          ? nsCompleteness / enabledLanguages.length\n          : 0;\n\n      report.namespaces.push(nsReport);\n      totalCompleteness += nsReport.completeness;\n    }\n\n    report.overallCompleteness =\n      this.namespaces.size > 0 ? totalCompleteness / this.namespaces.size : 0;\n\n    return report;\n  }\n\n  /**\n   * キャッシュのクリア\n   */\n  private clearCacheForKey(key: string): void {\n    const keysToDelete: string[] = [];\n    for (const cacheKey of this.translationCache.keys()) {\n      if (cacheKey.includes(key)) {\n        keysToDelete.push(cacheKey);\n      }\n    }\n    for (const key of keysToDelete) {\n      this.translationCache.delete(key);\n    }\n  }\n\n  /**\n   * 統計情報の取得\n   */\n  getStatistics(): {\n    totalTranslations: number;\n    cacheSize: number;\n    cacheHitRate: number;\n  } {\n    let totalTranslations = 0;\n    for (const langTranslations of this.translations.values()) {\n      totalTranslations += langTranslations.size;\n    }\n\n    const totalRequests = this.cacheHits + this.cacheMisses;\n    const cacheHitRate = totalRequests > 0 ? this.cacheHits / totalRequests : 0;\n\n    return {\n      totalTranslations,\n      cacheSize: this.translationCache.size,\n      cacheHitRate,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logger.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":81,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":81,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2027,2068],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":88,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":88,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2223,2267],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2836,2882],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":150,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":150,"endColumn":20,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"table"},"fix":{"range":[3907,3927],"text":""},"desc":"Remove the console.table()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":159,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":159,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4156,4199],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":179,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":179,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[4705,4741],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":304,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":304,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7338,7389],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":325,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":325,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[7803,7862],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":348,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":348,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[8295,8343],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logging/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logging/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logging/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logging/transports.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[857,880],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/logging/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/metrics/metrics-collector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/circuit-breaker/circuit-breaker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/core/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/discovery/service-registry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/gateway/api-gateway.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/microservices/microservices-architecture.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/multi-tenant-dns-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DNSRecord' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DNSRecordType' is defined but never used. Allowed unused vars must match /^_/u.","line":15,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tenantId' is defined but never used. Allowed unused args must match /^_/u.","line":892,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":892,"endColumn":43}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * マルチテナント DNS管理システム\n *\n * 複数の組織・テナントによる安全なDNS管理を実現\n * - テナント分離とセキュリティ\n * - リソース制限とクォータ管理\n * - 監査ログとコンプライアンス\n * - 階層的権限管理\n */\n\nimport { EventEmitter } from 'events';\n\nimport { Logger } from '@lib/logger.js';\n\nimport type { DNSRecord, DNSRecordType } from '@types/index.js';\n\nexport interface Tenant {\n  id: string;\n  name: string;\n  domain: string;\n  plan: 'free' | 'basic' | 'professional' | 'enterprise';\n  status: 'active' | 'suspended' | 'cancelled';\n  createdAt: Date;\n  updatedAt: Date;\n  settings: {\n    maxDNSRecords: number;\n    maxQueriesPerMonth: number;\n    maxUsers: number;\n    apiRateLimit: number;\n    allowedFeatures: string[];\n    retention: {\n      logs: number; // days\n      metrics: number; // days\n      backups: number; // days\n    };\n  };\n  subscription: {\n    planId: string;\n    status: 'active' | 'past_due' | 'cancelled';\n    currentPeriodStart: Date;\n    currentPeriodEnd: Date;\n    trialEnd?: Date;\n    usage: {\n      dnsRecords: number;\n      queriesThisMonth: number;\n      activeUsers: number;\n      apiCalls: number;\n    };\n  };\n  metadata: {\n    industry?: string;\n    companySize?: string;\n    region?: string;\n    contactEmail: string;\n    billingContact?: string;\n    technicalContact?: string;\n  };\n}\n\nexport interface TenantUser {\n  id: string;\n  tenantId: string;\n  email: string;\n  role: 'owner' | 'admin' | 'editor' | 'viewer';\n  permissions: string[];\n  status: 'active' | 'invited' | 'suspended';\n  createdAt: Date;\n  updatedAt: Date;\n  lastLoginAt?: Date;\n  profile: {\n    name: string;\n    avatar?: string;\n    timezone: string;\n    language: string;\n    preferences: {\n      notifications: boolean;\n      emailDigest: boolean;\n      theme: 'light' | 'dark';\n    };\n  };\n  mfa: {\n    enabled: boolean;\n    method?: 'totp' | 'sms' | 'email';\n    backupCodes?: string[];\n  };\n}\n\nexport interface TenantResource {\n  id: string;\n  tenantId: string;\n  type: 'dns-zone' | 'dns-record' | 'api-key' | 'webhook' | 'custom-domain';\n  name: string;\n  configuration: Record<string, unknown>;\n  status: 'active' | 'pending' | 'error' | 'disabled';\n  createdAt: Date;\n  updatedAt: Date;\n  createdBy: string;\n  tags: string[];\n  metadata: {\n    version: string;\n    lastModified: Date;\n    modifiedBy: string;\n    changeReason?: string;\n  };\n}\n\nexport interface TenantAuditLog {\n  id: string;\n  tenantId: string;\n  userId: string;\n  action: string;\n  resource: {\n    type: string;\n    id: string;\n    name: string;\n  };\n  timestamp: Date;\n  ipAddress: string;\n  userAgent: string;\n  result: 'success' | 'failure' | 'partial';\n  details: {\n    changes?: Record<string, { old: unknown; new: unknown }>;\n    error?: string;\n    metadata?: Record<string, unknown>;\n  };\n  risk: 'low' | 'medium' | 'high' | 'critical';\n  geolocation?: {\n    country: string;\n    city: string;\n    coordinates: {\n      latitude: number;\n      longitude: number;\n    };\n  };\n}\n\nexport interface TenantQuota {\n  tenantId: string;\n  limits: {\n    dnsRecords: number;\n    queriesPerMonth: number;\n    users: number;\n    apiCallsPerHour: number;\n    storageGB: number;\n    bandwidthGB: number;\n  };\n  usage: {\n    dnsRecords: number;\n    queriesThisMonth: number;\n    activeUsers: number;\n    apiCallsThisHour: number;\n    storageUsedGB: number;\n    bandwidthUsedGB: number;\n  };\n  resetTimes: {\n    monthly: Date;\n    hourly: Date;\n  };\n}\n\nexport interface TenantBilling {\n  tenantId: string;\n  subscription: {\n    planId: string;\n    status: 'active' | 'past_due' | 'cancelled';\n    billingCycle: 'monthly' | 'yearly';\n    amount: number;\n    currency: 'USD' | 'EUR' | 'JPY';\n    nextBillingDate: Date;\n    trialEnd?: Date;\n  };\n  paymentMethod: {\n    type: 'credit_card' | 'bank_transfer' | 'invoice';\n    lastFour?: string;\n    brand?: string;\n    expiryMonth?: number;\n    expiryYear?: number;\n    isDefault: boolean;\n  };\n  invoices: Array<{\n    id: string;\n    date: Date;\n    amount: number;\n    currency: string;\n    status: 'paid' | 'pending' | 'overdue' | 'cancelled';\n    downloadUrl?: string;\n  }>;\n  usage: {\n    current: number;\n    previous: number;\n    limit: number;\n    overage: number;\n  };\n}\n\nexport interface TenantIsolation {\n  tenantId: string;\n  isolation: {\n    database: {\n      schema: string;\n      readOnlyReplicas: string[];\n      backupLocation: string;\n    };\n    storage: {\n      bucket: string;\n      region: string;\n      encryption: {\n        enabled: boolean;\n        keyId: string;\n        algorithm: string;\n      };\n    };\n    network: {\n      vpcId: string;\n      subnetIds: string[];\n      securityGroupIds: string[];\n      allowedIPs: string[];\n    };\n    compute: {\n      dedicated: boolean;\n      cpu: number;\n      memory: number;\n      instanceType: string;\n    };\n  };\n  compliance: {\n    certifications: string[];\n    dataResidency: string;\n    auditSchedule: string;\n    retentionPolicy: {\n      logs: number;\n      backups: number;\n      userData: number;\n    };\n  };\n}\n\nexport class MultiTenantDNSManager extends EventEmitter {\n  private logger: Logger;\n  private tenants: Map<string, Tenant> = new Map();\n  private users: Map<string, TenantUser> = new Map();\n  private resources: Map<string, TenantResource[]> = new Map();\n  private auditLogs: Map<string, TenantAuditLog[]> = new Map();\n  private quotas: Map<string, TenantQuota> = new Map();\n  private billingInfo: Map<string, TenantBilling> = new Map();\n  private isolationConfig: Map<string, TenantIsolation> = new Map();\n  private activeConnections: Map<string, Set<string>> = new Map();\n\n  constructor() {\n    super();\n    this.logger = new Logger({ context: 'MultiTenantDNSManager' });\n    this.initializeDefaultTenants();\n    this.startQuotaMonitoring();\n    this.startBillingUpdates();\n  }\n\n  /**\n   * デフォルトテナントの初期化\n   */\n  private initializeDefaultTenants(): void {\n    const defaultTenants: Tenant[] = [\n      {\n        id: 'demo-tenant',\n        name: 'Demo Organization',\n        domain: 'demo.dnsweeper.com',\n        plan: 'free',\n        status: 'active',\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date(),\n        settings: {\n          maxDNSRecords: 100,\n          maxQueriesPerMonth: 10000,\n          maxUsers: 5,\n          apiRateLimit: 100,\n          allowedFeatures: ['basic-dns', 'monitoring'],\n          retention: {\n            logs: 30,\n            metrics: 30,\n            backups: 7,\n          },\n        },\n        subscription: {\n          planId: 'free-plan',\n          status: 'active',\n          currentPeriodStart: new Date('2024-01-01'),\n          currentPeriodEnd: new Date('2024-12-31'),\n          usage: {\n            dnsRecords: 25,\n            queriesThisMonth: 1500,\n            activeUsers: 3,\n            apiCalls: 450,\n          },\n        },\n        metadata: {\n          industry: 'technology',\n          companySize: 'startup',\n          region: 'us-east-1',\n          contactEmail: 'admin@demo.dnsweeper.com',\n        },\n      },\n      {\n        id: 'enterprise-tenant',\n        name: 'Enterprise Corp',\n        domain: 'enterprise.dnsweeper.com',\n        plan: 'enterprise',\n        status: 'active',\n        createdAt: new Date('2024-03-01'),\n        updatedAt: new Date(),\n        settings: {\n          maxDNSRecords: 10000,\n          maxQueriesPerMonth: 1000000,\n          maxUsers: 100,\n          apiRateLimit: 1000,\n          allowedFeatures: [\n            'advanced-dns',\n            'monitoring',\n            'analytics',\n            'white-label',\n            'api-access',\n          ],\n          retention: {\n            logs: 365,\n            metrics: 365,\n            backups: 90,\n          },\n        },\n        subscription: {\n          planId: 'enterprise-plan',\n          status: 'active',\n          currentPeriodStart: new Date('2024-03-01'),\n          currentPeriodEnd: new Date('2025-03-01'),\n          usage: {\n            dnsRecords: 2500,\n            queriesThisMonth: 85000,\n            activeUsers: 25,\n            apiCalls: 15000,\n          },\n        },\n        metadata: {\n          industry: 'finance',\n          companySize: 'enterprise',\n          region: 'us-west-2',\n          contactEmail: 'it@enterprise.dnsweeper.com',\n          billingContact: 'billing@enterprise.dnsweeper.com',\n          technicalContact: 'devops@enterprise.dnsweeper.com',\n        },\n      },\n    ];\n\n    defaultTenants.forEach(tenant => {\n      this.tenants.set(tenant.id, tenant);\n      this.initializeTenantQuota(tenant);\n      this.initializeTenantBilling(tenant);\n      this.initializeTenantIsolation(tenant);\n    });\n\n    this.logger.info(\n      `${defaultTenants.length}個のデフォルトテナントを初期化しました`\n    );\n  }\n\n  /**\n   * テナントクォータの初期化\n   */\n  private initializeTenantQuota(tenant: Tenant): void {\n    const quota: TenantQuota = {\n      tenantId: tenant.id,\n      limits: {\n        dnsRecords: tenant.settings.maxDNSRecords,\n        queriesPerMonth: tenant.settings.maxQueriesPerMonth,\n        users: tenant.settings.maxUsers,\n        apiCallsPerHour: tenant.settings.apiRateLimit,\n        storageGB:\n          tenant.plan === 'enterprise'\n            ? 1000\n            : tenant.plan === 'professional'\n              ? 100\n              : 10,\n        bandwidthGB:\n          tenant.plan === 'enterprise'\n            ? 10000\n            : tenant.plan === 'professional'\n              ? 1000\n              : 100,\n      },\n      usage: {\n        dnsRecords: tenant.subscription.usage.dnsRecords,\n        queriesThisMonth: tenant.subscription.usage.queriesThisMonth,\n        activeUsers: tenant.subscription.usage.activeUsers,\n        apiCallsThisHour: 0,\n        storageUsedGB: Math.random() * 10,\n        bandwidthUsedGB: Math.random() * 100,\n      },\n      resetTimes: {\n        monthly: new Date(\n          new Date().getFullYear(),\n          new Date().getMonth() + 1,\n          1\n        ),\n        hourly: new Date(Date.now() + 3600000),\n      },\n    };\n\n    this.quotas.set(tenant.id, quota);\n  }\n\n  /**\n   * テナント請求情報の初期化\n   */\n  private initializeTenantBilling(tenant: Tenant): void {\n    const billing: TenantBilling = {\n      tenantId: tenant.id,\n      subscription: {\n        planId: tenant.subscription.planId,\n        status: tenant.subscription.status,\n        billingCycle: 'monthly',\n        amount:\n          tenant.plan === 'enterprise'\n            ? 500\n            : tenant.plan === 'professional'\n              ? 50\n              : 0,\n        currency: 'USD',\n        nextBillingDate: tenant.subscription.currentPeriodEnd,\n        trialEnd: tenant.subscription.trialEnd,\n      },\n      paymentMethod: {\n        type: 'credit_card',\n        lastFour: '4242',\n        brand: 'Visa',\n        expiryMonth: 12,\n        expiryYear: 2025,\n        isDefault: true,\n      },\n      invoices: [],\n      usage: {\n        current: tenant.subscription.usage.queriesThisMonth,\n        previous: Math.floor(tenant.subscription.usage.queriesThisMonth * 0.8),\n        limit: tenant.settings.maxQueriesPerMonth,\n        overage: Math.max(\n          0,\n          tenant.subscription.usage.queriesThisMonth -\n            tenant.settings.maxQueriesPerMonth\n        ),\n      },\n    };\n\n    this.billingInfo.set(tenant.id, billing);\n  }\n\n  /**\n   * テナント分離設定の初期化\n   */\n  private initializeTenantIsolation(tenant: Tenant): void {\n    const isolation: TenantIsolation = {\n      tenantId: tenant.id,\n      isolation: {\n        database: {\n          schema: `tenant_${tenant.id}`,\n          readOnlyReplicas: [\n            `replica-${tenant.id}-1`,\n            `replica-${tenant.id}-2`,\n          ],\n          backupLocation: `s3://dnsweeper-backups/${tenant.id}/`,\n        },\n        storage: {\n          bucket: `dnsweeper-${tenant.id}`,\n          region: tenant.metadata.region || 'us-east-1',\n          encryption: {\n            enabled: tenant.plan === 'enterprise',\n            keyId: `key-${tenant.id}`,\n            algorithm: 'AES-256',\n          },\n        },\n        network: {\n          vpcId: `vpc-${tenant.id}`,\n          subnetIds: [`subnet-${tenant.id}-1`, `subnet-${tenant.id}-2`],\n          securityGroupIds: [`sg-${tenant.id}`],\n          allowedIPs: [],\n        },\n        compute: {\n          dedicated: tenant.plan === 'enterprise',\n          cpu:\n            tenant.plan === 'enterprise'\n              ? 8\n              : tenant.plan === 'professional'\n                ? 4\n                : 2,\n          memory:\n            tenant.plan === 'enterprise'\n              ? 32\n              : tenant.plan === 'professional'\n                ? 16\n                : 8,\n          instanceType:\n            tenant.plan === 'enterprise' ? 'c5.2xlarge' : 'm5.large',\n        },\n      },\n      compliance: {\n        certifications:\n          tenant.plan === 'enterprise'\n            ? ['SOC2', 'ISO27001', 'GDPR']\n            : ['GDPR'],\n        dataResidency: tenant.metadata.region || 'us-east-1',\n        auditSchedule: tenant.plan === 'enterprise' ? 'quarterly' : 'annually',\n        retentionPolicy: {\n          logs: tenant.settings.retention.logs,\n          backups: tenant.settings.retention.backups,\n          userData: tenant.plan === 'enterprise' ? 2555 : 1095, // 7 years for enterprise, 3 years for others\n        },\n      },\n    };\n\n    this.isolationConfig.set(tenant.id, isolation);\n  }\n\n  /**\n   * 新しいテナントを作成\n   */\n  async createTenant(\n    tenantData: Omit<Tenant, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Tenant> {\n    const tenantId = `tenant-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const tenant: Tenant = {\n      id: tenantId,\n      ...tenantData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.tenants.set(tenantId, tenant);\n    this.initializeTenantQuota(tenant);\n    this.initializeTenantBilling(tenant);\n    this.initializeTenantIsolation(tenant);\n\n    this.logger.info(`新しいテナントを作成しました: ${tenantId}`, {\n      name: tenant.name,\n      plan: tenant.plan,\n      domain: tenant.domain,\n    });\n\n    this.emit('tenant:created', tenant);\n\n    return tenant;\n  }\n\n  /**\n   * テナントを取得\n   */\n  getTenant(tenantId: string): Tenant | undefined {\n    return this.tenants.get(tenantId);\n  }\n\n  /**\n   * テナント一覧を取得\n   */\n  getAllTenants(): Tenant[] {\n    return Array.from(this.tenants.values());\n  }\n\n  /**\n   * テナントを更新\n   */\n  async updateTenant(\n    tenantId: string,\n    updates: Partial<Tenant>\n  ): Promise<Tenant> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    const updatedTenant = {\n      ...tenant,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.tenants.set(tenantId, updatedTenant);\n\n    this.logger.info(`テナントを更新しました: ${tenantId}`, updates);\n    this.emit('tenant:updated', updatedTenant);\n\n    return updatedTenant;\n  }\n\n  /**\n   * テナントを削除\n   */\n  async deleteTenant(tenantId: string): Promise<void> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    // 関連データのクリーンアップ\n    this.tenants.delete(tenantId);\n    this.quotas.delete(tenantId);\n    this.billingInfo.delete(tenantId);\n    this.isolationConfig.delete(tenantId);\n    this.resources.delete(tenantId);\n    this.auditLogs.delete(tenantId);\n    this.activeConnections.delete(tenantId);\n\n    this.logger.info(`テナントを削除しました: ${tenantId}`, {\n      name: tenant.name,\n    });\n\n    this.emit('tenant:deleted', tenant);\n  }\n\n  /**\n   * テナントユーザーを作成\n   */\n  async createUser(\n    tenantId: string,\n    userData: Omit<TenantUser, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>\n  ): Promise<TenantUser> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    const quota = this.quotas.get(tenantId);\n    if (quota && quota.usage.activeUsers >= quota.limits.users) {\n      throw new Error('ユーザー数の上限に達しています');\n    }\n\n    const userId = `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const user: TenantUser = {\n      id: userId,\n      tenantId,\n      ...userData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(userId, user);\n\n    // クォータの更新\n    if (quota) {\n      quota.usage.activeUsers++;\n    }\n\n    this.logger.info(`新しいユーザーを作成しました: ${userId}`, {\n      tenantId,\n      email: user.email,\n      role: user.role,\n    });\n\n    this.emit('user:created', user);\n\n    return user;\n  }\n\n  /**\n   * テナントのユーザー一覧を取得\n   */\n  getTenantUsers(tenantId: string): TenantUser[] {\n    return Array.from(this.users.values()).filter(\n      user => user.tenantId === tenantId\n    );\n  }\n\n  /**\n   * テナントクォータを取得\n   */\n  getTenantQuota(tenantId: string): TenantQuota | undefined {\n    return this.quotas.get(tenantId);\n  }\n\n  /**\n   * クォータ使用量を更新\n   */\n  updateQuotaUsage(\n    tenantId: string,\n    usageType: keyof TenantQuota['usage'],\n    increment: number\n  ): void {\n    const quota = this.quotas.get(tenantId);\n    if (!quota) return;\n\n    quota.usage[usageType] = Math.max(0, quota.usage[usageType] + increment);\n\n    // 上限チェック\n    const limit = quota.limits[usageType];\n    if (quota.usage[usageType] > limit) {\n      this.logger.warn(\n        `テナント ${tenantId} のクォータ上限を超えました: ${usageType}`,\n        {\n          usage: quota.usage[usageType],\n          limit,\n        }\n      );\n\n      this.emit('quota:exceeded', {\n        tenantId,\n        usageType,\n        usage: quota.usage[usageType],\n        limit,\n      });\n    }\n  }\n\n  /**\n   * 監査ログを記録\n   */\n  logAuditEvent(auditLog: Omit<TenantAuditLog, 'id' | 'timestamp'>): void {\n    const logId = `audit-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const fullLog: TenantAuditLog = {\n      id: logId,\n      timestamp: new Date(),\n      ...auditLog,\n    };\n\n    const tenantLogs = this.auditLogs.get(auditLog.tenantId) || [];\n    tenantLogs.push(fullLog);\n    this.auditLogs.set(auditLog.tenantId, tenantLogs);\n\n    // 保持期間外のログを削除\n    const tenant = this.tenants.get(auditLog.tenantId);\n    if (tenant) {\n      const retentionDays = tenant.settings.retention.logs;\n      const cutoffDate = new Date(\n        Date.now() - retentionDays * 24 * 60 * 60 * 1000\n      );\n\n      const filteredLogs = tenantLogs.filter(log => log.timestamp > cutoffDate);\n      this.auditLogs.set(auditLog.tenantId, filteredLogs);\n    }\n\n    this.logger.info(`監査ログを記録しました: ${logId}`, {\n      tenantId: auditLog.tenantId,\n      action: auditLog.action,\n      result: auditLog.result,\n      risk: auditLog.risk,\n    });\n\n    this.emit('audit:logged', fullLog);\n  }\n\n  /**\n   * 監査ログを取得\n   */\n  getAuditLogs(\n    tenantId: string,\n    options?: {\n      limit?: number;\n      offset?: number;\n      startDate?: Date;\n      endDate?: Date;\n      action?: string;\n      userId?: string;\n      risk?: string;\n    }\n  ): TenantAuditLog[] {\n    let logs = this.auditLogs.get(tenantId) || [];\n\n    // フィルタリング\n    if (options?.startDate) {\n      logs = logs.filter(log => log.timestamp >= options.startDate!);\n    }\n    if (options?.endDate) {\n      logs = logs.filter(log => log.timestamp <= options.endDate!);\n    }\n    if (options?.action) {\n      logs = logs.filter(log => log.action === options.action);\n    }\n    if (options?.userId) {\n      logs = logs.filter(log => log.userId === options.userId);\n    }\n    if (options?.risk) {\n      logs = logs.filter(log => log.risk === options.risk);\n    }\n\n    // ソート（新しい順）\n    logs.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    // ページネーション\n    const offset = options?.offset || 0;\n    const limit = options?.limit || 100;\n\n    return logs.slice(offset, offset + limit);\n  }\n\n  /**\n   * テナントリソースを作成\n   */\n  async createResource(\n    tenantId: string,\n    resourceData: Omit<\n      TenantResource,\n      'id' | 'tenantId' | 'createdAt' | 'updatedAt'\n    >\n  ): Promise<TenantResource> {\n    const tenant = this.tenants.get(tenantId);\n    if (!tenant) {\n      throw new Error(`テナントが見つかりません: ${tenantId}`);\n    }\n\n    const resourceId = `resource-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    const resource: TenantResource = {\n      id: resourceId,\n      tenantId,\n      ...resourceData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    const tenantResources = this.resources.get(tenantId) || [];\n    tenantResources.push(resource);\n    this.resources.set(tenantId, tenantResources);\n\n    this.logger.info(`新しいリソースを作成しました: ${resourceId}`, {\n      tenantId,\n      type: resource.type,\n      name: resource.name,\n    });\n\n    this.emit('resource:created', resource);\n\n    return resource;\n  }\n\n  /**\n   * テナントリソースを取得\n   */\n  getTenantResources(tenantId: string, type?: string): TenantResource[] {\n    const resources = this.resources.get(tenantId) || [];\n    return type ? resources.filter(r => r.type === type) : resources;\n  }\n\n  /**\n   * 請求情報を取得\n   */\n  getTenantBilling(tenantId: string): TenantBilling | undefined {\n    return this.billingInfo.get(tenantId);\n  }\n\n  /**\n   * 分離設定を取得\n   */\n  getTenantIsolation(tenantId: string): TenantIsolation | undefined {\n    return this.isolationConfig.get(tenantId);\n  }\n\n  /**\n   * テナント統計を取得\n   */\n  getTenantStats(tenantId: string): {\n    overview: {\n      totalUsers: number;\n      totalResources: number;\n      totalQueries: number;\n      totalStorage: number;\n    };\n    quota: TenantQuota;\n    recent: {\n      auditLogs: TenantAuditLog[];\n      resources: TenantResource[];\n    };\n  } {\n    const users = this.getTenantUsers(tenantId);\n    const resources = this.getTenantResources(tenantId);\n    const quota = this.getTenantQuota(tenantId);\n    const recentAuditLogs = this.getAuditLogs(tenantId, { limit: 10 });\n\n    return {\n      overview: {\n        totalUsers: users.length,\n        totalResources: resources.length,\n        totalQueries: quota?.usage.queriesThisMonth || 0,\n        totalStorage: quota?.usage.storageUsedGB || 0,\n      },\n      quota: quota || ({} as TenantQuota),\n      recent: {\n        auditLogs: recentAuditLogs,\n        resources: resources.slice(0, 10),\n      },\n    };\n  }\n\n  /**\n   * クォータ監視の開始\n   */\n  private startQuotaMonitoring(): void {\n    setInterval(() => {\n      this.quotas.forEach((quota, tenantId) => {\n        // 時間単位リセット\n        if (Date.now() > quota.resetTimes.hourly.getTime()) {\n          quota.usage.apiCallsThisHour = 0;\n          quota.resetTimes.hourly = new Date(Date.now() + 3600000);\n        }\n\n        // 月単位リセット\n        const now = new Date();\n        if (now.getMonth() !== quota.resetTimes.monthly.getMonth()) {\n          quota.usage.queriesThisMonth = 0;\n          quota.resetTimes.monthly = new Date(\n            now.getFullYear(),\n            now.getMonth() + 1,\n            1\n          );\n        }\n      });\n    }, 60000); // 1分ごと\n  }\n\n  /**\n   * 請求情報の更新\n   */\n  private startBillingUpdates(): void {\n    setInterval(() => {\n      this.billingInfo.forEach((billing, tenantId) => {\n        const quota = this.quotas.get(tenantId);\n        if (quota) {\n          billing.usage.current = quota.usage.queriesThisMonth;\n          billing.usage.overage = Math.max(\n            0,\n            quota.usage.queriesThisMonth - quota.limits.queriesPerMonth\n          );\n        }\n      });\n    }, 3600000); // 1時間ごと\n  }\n\n  /**\n   * アクティブ接続の追跡\n   */\n  trackConnection(tenantId: string, userId: string): void {\n    const connections = this.activeConnections.get(tenantId) || new Set();\n    connections.add(userId);\n    this.activeConnections.set(tenantId, connections);\n  }\n\n  /**\n   * 接続の削除\n   */\n  removeConnection(tenantId: string, userId: string): void {\n    const connections = this.activeConnections.get(tenantId);\n    if (connections) {\n      connections.delete(userId);\n      if (connections.size === 0) {\n        this.activeConnections.delete(tenantId);\n      }\n    }\n  }\n\n  /**\n   * アクティブ接続数を取得\n   */\n  getActiveConnections(tenantId: string): number {\n    return this.activeConnections.get(tenantId)?.size || 0;\n  }\n\n  /**\n   * システム全体の統計を取得\n   */\n  getSystemStats(): {\n    totalTenants: number;\n    activeTenants: number;\n    totalUsers: number;\n    totalResources: number;\n    totalQueries: number;\n    planDistribution: Record<string, number>;\n    regionDistribution: Record<string, number>;\n  } {\n    const tenants = Array.from(this.tenants.values());\n    const users = Array.from(this.users.values());\n    const allResources = Array.from(this.resources.values()).flat();\n\n    const totalQueries = Array.from(this.quotas.values()).reduce(\n      (sum, quota) => sum + quota.usage.queriesThisMonth,\n      0\n    );\n\n    const planDistribution = tenants.reduce(\n      (acc, tenant) => {\n        acc[tenant.plan] = (acc[tenant.plan] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    const regionDistribution = tenants.reduce(\n      (acc, tenant) => {\n        const region = tenant.metadata.region || 'unknown';\n        acc[region] = (acc[region] || 0) + 1;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    return {\n      totalTenants: tenants.length,\n      activeTenants: tenants.filter(t => t.status === 'active').length,\n      totalUsers: users.length,\n      totalResources: allResources.length,\n      totalQueries,\n      planDistribution,\n      regionDistribution,\n    };\n  }\n\n  /**\n   * システムのシャットダウン\n   */\n  async shutdown(): Promise<void> {\n    this.logger.info('マルチテナントDNSマネージャーをシャットダウンしています');\n\n    // アクティブな接続をクリア\n    this.activeConnections.clear();\n\n    this.logger.info(\n      'マルチテナントDNSマネージャーのシャットダウンが完了しました'\n    );\n  }\n}\n\nexport default MultiTenantDNSManager;\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/multilingual-report-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":220,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5582,5585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5582,5585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6107,6110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6107,6110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6321,6324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6321,6324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":382,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9131,9134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9131,9134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 多言語レポート生成システム\n *\n * グローバル対応のためのレポート生成機能\n * - 40言語対応のレポート生成\n * - 地域別設定対応\n * - 複数形式出力 (PDF, Excel, CSV, JSON)\n * - 文化的配慮 (RTL対応, 数値形式, 日付形式)\n * - テンプレート管理\n */\n\nimport { EventEmitter } from 'events';\nimport { writeFileSync } from 'fs';\nimport { join } from 'path';\n\nimport {\n  ExcelExporter,\n  type ExcelExporterOptions,\n} from './reports/exporters/excel-exporter.js';\nimport {\n  PDFExporter,\n  type PDFExporterOptions,\n} from './reports/exporters/pdf-exporter.js';\nimport { ReportGenerator } from './reports/generators/report-generator.js';\nimport { TemplateManager } from './reports/templates/template-manager.js';\n\nimport type { I18nManager } from './i18n-manager.js';\nimport type { Logger } from './logger.js';\nimport type {\n  ReportTemplate,\n  ReportData,\n  ReportOptions,\n  GeneratedReport,\n} from './reports/core/types.js';\nimport type { TimezoneLocalizer } from './timezone-localizer.js';\n\n// Re-export types for backward compatibility\nexport type {\n  ReportTemplate,\n  ReportSection,\n  ReportStyling,\n  SectionStyling,\n  ReportCondition,\n  ReportData,\n  ReportOptions,\n  ExportFormat,\n  GeneratedReport,\n} from './reports/core/types.js';\n\nexport interface MultilingualReportGeneratorConfig {\n  defaultLanguage: string;\n  supportedFormats: string[];\n  maxConcurrentGenerations: number;\n  cacheEnabled: boolean;\n  cacheSize: number;\n  tempDirectory: string;\n}\n\nexport class MultilingualReportGenerator extends EventEmitter {\n  private logger: Logger;\n  private i18nManager: I18nManager;\n  private timezoneLocalizer: TimezoneLocalizer;\n  private templateManager: TemplateManager;\n  private reportGenerator: ReportGenerator;\n  private pdfExporter: PDFExporter;\n  private excelExporter: ExcelExporter;\n  private config: MultilingualReportGeneratorConfig;\n  private reportCache: Map<string, GeneratedReport> = new Map();\n\n  constructor(\n    logger: Logger,\n    i18nManager: I18nManager,\n    timezoneLocalizer: TimezoneLocalizer,\n    config?: Partial<MultilingualReportGeneratorConfig>\n  ) {\n    super();\n\n    this.logger = logger;\n    this.i18nManager = i18nManager;\n    this.timezoneLocalizer = timezoneLocalizer;\n\n    this.config = {\n      defaultLanguage: 'en',\n      supportedFormats: ['pdf', 'excel', 'csv', 'json'],\n      maxConcurrentGenerations: 5,\n      cacheEnabled: true,\n      cacheSize: 100,\n      tempDirectory: '/tmp/reports',\n      ...config,\n    };\n\n    // コンポーネントの初期化\n    this.templateManager = new TemplateManager();\n    this.reportGenerator = new ReportGenerator(logger, i18nManager);\n    this.pdfExporter = new PDFExporter();\n    this.excelExporter = new ExcelExporter();\n\n    this.setupEventHandlers();\n    this.logger.info('多言語レポート生成システムを初期化しました');\n  }\n\n  /**\n   * イベントハンドラーのセットアップ\n   */\n  private setupEventHandlers(): void {\n    // テンプレートマネージャーのイベント\n    this.templateManager.on('template:added', event => {\n      this.emit('template:added', event);\n    });\n\n    // レポートジェネレーターのイベント\n    this.reportGenerator.on('report:generated', report => {\n      this.emit('report:generated', report);\n    });\n\n    this.reportGenerator.on('report:queued', event => {\n      this.emit('report:queued', event);\n    });\n\n    this.reportGenerator.on('report:error', event => {\n      this.emit('report:error', event);\n    });\n  }\n\n  /**\n   * レポートの生成\n   */\n  async generateReport(\n    templateId: string,\n    data: ReportData,\n    options?: Partial<ReportOptions>\n  ): Promise<GeneratedReport> {\n    const template = this.templateManager.getTemplate(templateId);\n    if (!template) {\n      throw new Error(`テンプレートが見つかりません: ${templateId}`);\n    }\n\n    const reportOptions: ReportOptions = {\n      language: this.i18nManager.getCurrentLanguage(),\n      format: 'pdf',\n      ...options,\n    };\n\n    // キャッシュチェック\n    if (this.config.cacheEnabled) {\n      const cacheKey = this.generateCacheKey(templateId, data, reportOptions);\n      const cached = this.reportCache.get(cacheKey);\n      if (cached) {\n        this.logger.info('キャッシュからレポートを取得', { cacheKey });\n        return cached;\n      }\n    }\n\n    // レポート生成\n    const report = await this.reportGenerator.generate(\n      template,\n      data,\n      reportOptions\n    );\n\n    // フォーマット別のエクスポート\n    if (reportOptions.format !== 'json') {\n      const exportedContent = await this.exportToFormat(\n        report,\n        template,\n        reportOptions\n      );\n      report.content = exportedContent;\n    }\n\n    // キャッシュに保存\n    if (this.config.cacheEnabled) {\n      this.addToCache(report);\n    }\n\n    return report;\n  }\n\n  /**\n   * フォーマット別のエクスポート\n   */\n  private async exportToFormat(\n    report: GeneratedReport,\n    template: ReportTemplate,\n    options: ReportOptions\n  ): Promise<Buffer> {\n    const content =\n      typeof report.content === 'string'\n        ? JSON.parse(report.content)\n        : report.content;\n\n    switch (options.format) {\n      case 'pdf':\n        return this.pdfExporter.export(template, content.sections, content, {\n          watermark: options.watermark,\n          encryption: options.encryptionKey\n            ? {\n                userPassword: options.encryptionKey,\n              }\n            : undefined,\n        } as PDFExporterOptions);\n\n      case 'excel':\n        return this.excelExporter.export(template, content.sections, content, {\n          includeRawData: options.includeRawData,\n          chartSheets: options.includeCharts,\n        } as ExcelExporterOptions);\n\n      case 'csv':\n        return this.exportToCSV(content);\n\n      default:\n        throw new Error(`サポートされていないフォーマット: ${options.format}`);\n    }\n  }\n\n  /**\n   * CSV形式へのエクスポート\n   */\n  private async exportToCSV(content: any): Promise<Buffer> {\n    const csv: string[] = [];\n\n    // メタデータ\n    csv.push(`\"Title\",\"${content.title}\"`);\n    csv.push(`\"Generated\",\"${content.metadata.generated}\"`);\n    csv.push(`\"Language\",\"${content.metadata.language}\"`);\n    csv.push('');\n\n    // セクションごとのデータ\n    for (const section of content.sections) {\n      if (section.type === 'table' && section.content.rows) {\n        // セクションタイトル\n        csv.push(`\"${section.title}\"`);\n\n        // ヘッダー\n        const headers = section.content.columns\n          .map((col: any) => `\"${col.label}\"`)\n          .join(',');\n        csv.push(headers);\n\n        // データ行\n        for (const row of section.content.rows) {\n          const values = section.content.columns\n            .map((col: any) => {\n              const value = row[col.key] || '';\n              // CSVエスケープ\n              const escaped = String(value).replace(/\"/g, '\"\"');\n              return `\"${escaped}\"`;\n            })\n            .join(',');\n          csv.push(values);\n        }\n\n        csv.push('');\n      }\n    }\n\n    return Buffer.from(csv.join('\\n'), 'utf-8');\n  }\n\n  /**\n   * ファイルへの保存\n   */\n  async saveToFile(report: GeneratedReport, filePath: string): Promise<void> {\n    const directory = join(this.config.tempDirectory, 'generated');\n    const fullPath = join(directory, filePath);\n\n    if (Buffer.isBuffer(report.content)) {\n      writeFileSync(fullPath, report.content);\n    } else {\n      writeFileSync(fullPath, report.content, 'utf-8');\n    }\n\n    this.logger.info('レポートをファイルに保存しました', {\n      reportId: report.id,\n      filePath: fullPath,\n      size: report.size,\n    });\n\n    this.emit('report:saved', {\n      reportId: report.id,\n      filePath: fullPath,\n    });\n  }\n\n  /**\n   * レポートのスケジュール生成\n   */\n  async scheduleReport(\n    templateId: string,\n    data: ReportData,\n    options: ReportOptions & {\n      schedule: {\n        frequency: 'daily' | 'weekly' | 'monthly';\n        time: string;\n        timezone: string;\n      };\n      recipients?: string[];\n    }\n  ): Promise<string> {\n    // スケジュール実装は別途必要\n    const scheduleId = `schedule-${Date.now()}`;\n\n    this.logger.info('レポート生成をスケジュールしました', {\n      scheduleId,\n      templateId,\n      frequency: options.schedule.frequency,\n    });\n\n    this.emit('report:scheduled', {\n      scheduleId,\n      templateId,\n      options,\n    });\n\n    return scheduleId;\n  }\n\n  /**\n   * テンプレートの管理\n   */\n  getTemplateManager(): TemplateManager {\n    return this.templateManager;\n  }\n\n  /**\n   * テンプレートの取得\n   */\n  getTemplate(id: string): ReportTemplate | undefined {\n    return this.templateManager.getTemplate(id);\n  }\n\n  /**\n   * テンプレートの追加\n   */\n  addTemplate(template: ReportTemplate): void {\n    this.templateManager.addTemplate(template);\n  }\n\n  /**\n   * 利用可能なテンプレートの取得\n   */\n  getAvailableTemplates(\n    language?: string,\n    category?: string\n  ): ReportTemplate[] {\n    let templates = this.templateManager.getAllTemplates();\n\n    if (language) {\n      templates = templates.filter(t =>\n        t.metadata.supportedLanguages.includes(language)\n      );\n    }\n\n    if (category) {\n      templates = templates.filter(t => t.category === category);\n    }\n\n    return templates;\n  }\n\n  /**\n   * キャッシュキーの生成\n   */\n  private generateCacheKey(\n    templateId: string,\n    data: ReportData,\n    options: ReportOptions\n  ): string {\n    const key = {\n      templateId,\n      dataHash: this.hashObject(data),\n      language: options.language,\n      format: options.format,\n    };\n    return JSON.stringify(key);\n  }\n\n  /**\n   * オブジェクトのハッシュ化\n   */\n  private hashObject(obj: any): string {\n    const str = JSON.stringify(obj);\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36);\n  }\n\n  /**\n   * キャッシュへの追加\n   */\n  private addToCache(report: GeneratedReport): void {\n    if (this.reportCache.size >= this.config.cacheSize) {\n      // 最も古いエントリを削除\n      const firstKey = this.reportCache.keys().next().value;\n      this.reportCache.delete(firstKey);\n    }\n\n    const cacheKey = this.generateCacheKey(\n      report.metadata.templateId,\n      { title: report.title } as ReportData,\n      report.metadata.options\n    );\n\n    this.reportCache.set(cacheKey, report);\n  }\n\n  /**\n   * キャッシュのクリア\n   */\n  clearCache(): void {\n    this.reportCache.clear();\n    this.logger.info('レポートキャッシュをクリアしました');\n  }\n\n  /**\n   * 統計情報の取得\n   */\n  getStatistics(): {\n    templatesCount: number;\n    cacheSize: number;\n    supportedLanguages: string[];\n    supportedFormats: string[];\n  } {\n    return {\n      templatesCount: this.templateManager.getAllTemplates().length,\n      cacheSize: this.reportCache.size,\n      supportedLanguages: this.i18nManager\n        .getSupportedLanguages()\n        .filter(l => l.enabled)\n        .map(l => l.code),\n      supportedFormats: this.config.supportedFormats,\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/output-formatter.ts","messages":[],"suppressedMessages":[{"ruleId":"no-control-regex","severity":2,"message":"Unexpected control character(s) in regular expression: \\x1b.","line":407,"column":36,"nodeType":"Literal","messageId":"unexpected","endLine":407,"endColumn":55,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/path-alias-helper.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pathToFileURL' is defined but never used. Allowed unused vars must match /^_/u.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * パスエイリアスヘルパー\n *\n * TypeScriptのパスエイリアスを実行時に解決するためのヘルパー\n * Node.jsはデフォルトでTypeScriptのパスエイリアスを理解しないため、\n * このヘルパーを使用して実行時にパスを解決します。\n */\n\nimport { resolve } from 'path';\nimport { pathToFileURL } from 'url';\n\n/**\n * パスエイリアスのマッピング\n */\nconst aliasMap: Record<string, string> = {\n  '@': 'src',\n  '@commands': 'src/commands',\n  '@lib': 'src/lib',\n  '@utils': 'src/utils',\n  '@types': 'src/types',\n};\n\n/**\n * エイリアスパスを実際のパスに解決\n */\nexport function resolveAlias(importPath: string): string {\n  for (const [alias, actualPath] of Object.entries(aliasMap)) {\n    if (importPath.startsWith(alias + '/')) {\n      const relativePath = importPath.substring(alias.length + 1);\n      return resolve(process.cwd(), actualPath, relativePath);\n    }\n  }\n\n  return importPath;\n}\n\n/**\n * インポート文でパスエイリアスを使用する際の注意事項：\n *\n * 1. 開発時（ts-node）: tsconfig.jsonのpathsが自動的に解決される\n * 2. ビルド時: TypeScriptコンパイラがパスを解決\n * 3. 実行時: ビルドツール（esbuild、webpack等）でパスを解決するか、\n *    またはランタイムでモジュール解決をカスタマイズする必要がある\n *\n * 推奨される解決方法：\n * - esbuildやwebpackなどのバンドラーを使用する\n * - tsc-aliasなどのツールを使用してビルド後のパスを書き換える\n * - ts-nodeの場合は tsconfig-paths を使用する\n */\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/performance-monitor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/performance/batch-processor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/performance/memory-optimizer.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":16,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1067,1255],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/progress.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":61,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":61,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1198,1216],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[1735,1776],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2017,2056],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":121,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":121,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2297,2338],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[2579,2617],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/regional-compliance-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":172,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3884,3887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3884,3887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":837,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":837,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24323,24326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24323,24326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":883,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25484,25487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25484,25487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":955,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":955,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27394,27397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27394,27397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1082,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1082,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30778,30781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30778,30781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 地域別コンプライアンス管理システム\n *\n * グローバル展開に対応した地域別コンプライアンス要件管理\n * - GDPR (EU)\n * - CCPA (California)\n * - PIPEDA (Canada)\n * - データローカライゼーション\n * - 監査要件\n * - 暗号化要件\n * - 個人データ保護\n */\n\nimport { EventEmitter } from 'events';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\nimport { I18nManager } from './i18n-manager.js';\nimport { Logger } from './logger.js';\n\nexport interface ComplianceFramework {\n  id: string;\n  name: string;\n  region: string;\n  jurisdiction: string;\n  version: string;\n  effectiveDate: Date;\n  lastUpdated: Date;\n  status: 'active' | 'deprecated' | 'pending';\n  requirements: ComplianceRequirement[];\n  penalties: CompliancePenalty[];\n  exemptions: ComplianceExemption[];\n}\n\nexport interface ComplianceRequirement {\n  id: string;\n  frameworkId: string;\n  category:\n    | 'data-protection'\n    | 'data-localization'\n    | 'audit-logging'\n    | 'encryption'\n    | 'consent'\n    | 'notification'\n    | 'access-rights';\n  title: string;\n  description: string;\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  implementationDeadline?: Date;\n  isCompliant: boolean;\n  compliancePercentage: number;\n  evidenceRequired: string[];\n  implementationSteps: string[];\n  technicalControls: TechnicalControl[];\n  businessControls: BusinessControl[];\n  riskLevel: 'high' | 'medium' | 'low';\n  lastAssessment: Date;\n  nextAssessment: Date;\n}\n\nexport interface TechnicalControl {\n  id: string;\n  type:\n    | 'encryption'\n    | 'access-control'\n    | 'audit-logging'\n    | 'data-masking'\n    | 'backup'\n    | 'monitoring';\n  name: string;\n  description: string;\n  implementation: string;\n  isImplemented: boolean;\n  effectiveness: number; // 0-100%\n  lastVerified: Date;\n  nextVerification: Date;\n}\n\nexport interface BusinessControl {\n  id: string;\n  type:\n    | 'policy'\n    | 'training'\n    | 'process'\n    | 'contract'\n    | 'assessment'\n    | 'incident-response';\n  name: string;\n  description: string;\n  implementation: string;\n  isImplemented: boolean;\n  effectiveness: number; // 0-100%\n  lastReview: Date;\n  nextReview: Date;\n}\n\nexport interface CompliancePenalty {\n  type: 'monetary' | 'operational' | 'reputational';\n  description: string;\n  amount?: number;\n  currency?: string;\n  maxAmount?: number;\n  conditions: string[];\n}\n\nexport interface ComplianceExemption {\n  id: string;\n  title: string;\n  description: string;\n  conditions: string[];\n  validUntil?: Date;\n  applicableRequirements: string[];\n}\n\nexport interface ComplianceAssessment {\n  id: string;\n  frameworkId: string;\n  region: string;\n  assessmentDate: Date;\n  assessor: string;\n  overallScore: number;\n  requirementResults: {\n    [requirementId: string]: {\n      score: number;\n      status: 'compliant' | 'non-compliant' | 'partially-compliant';\n      evidence: string[];\n      gaps: string[];\n      recommendations: string[];\n    };\n  };\n  actionPlan: ComplianceAction[];\n  nextAssessment: Date;\n  certificationStatus?: 'certified' | 'pending' | 'rejected';\n}\n\nexport interface ComplianceAction {\n  id: string;\n  title: string;\n  description: string;\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  category: string;\n  assignedTo: string;\n  dueDate: Date;\n  status: 'pending' | 'in-progress' | 'completed' | 'overdue';\n  completedDate?: Date;\n  cost?: number;\n  effort?: number; // person-days\n  dependencies: string[];\n  progress: number; // 0-100%\n}\n\nexport interface ComplianceReport {\n  id: string;\n  type: 'assessment' | 'audit' | 'incident' | 'certification';\n  title: string;\n  framework: string;\n  region: string;\n  generatedAt: Date;\n  reportPeriod: {\n    start: Date;\n    end: Date;\n  };\n  overallCompliance: number;\n  summary: {\n    totalRequirements: number;\n    compliantRequirements: number;\n    partiallyCompliantRequirements: number;\n    nonCompliantRequirements: number;\n    criticalGaps: number;\n    highRiskItems: number;\n  };\n  details: any;\n  recommendations: string[];\n  actionPlan: ComplianceAction[];\n}\n\nexport interface DataProcessingActivity {\n  id: string;\n  name: string;\n  description: string;\n  dataController: string;\n  dataProcessor?: string;\n  purposes: string[];\n  legalBasis: string;\n  dataCategories: string[];\n  dataSubjects: string[];\n  recipients: string[];\n  transferDestinations: string[];\n  retentionPeriod: string;\n  securityMeasures: string[];\n  riskAssessment: {\n    level: 'high' | 'medium' | 'low';\n    description: string;\n    mitigations: string[];\n  };\n  isActive: boolean;\n  lastReview: Date;\n  nextReview: Date;\n}\n\nexport interface RegionalComplianceManagerOptions {\n  enableAutomaticAssessment?: boolean;\n  assessmentInterval?: number;\n  enableAlerts?: boolean;\n  alertThresholds?: {\n    complianceScore: number;\n    criticalGaps: number;\n    overdueActions: number;\n  };\n  enableReporting?: boolean;\n  reportingInterval?: number;\n  enableDataProcessingLog?: boolean;\n  enableIncidentTracking?: boolean;\n  enableCertificationManagement?: boolean;\n  auditLogPath?: string;\n  dataPath?: string;\n}\n\n/**\n * 地域別コンプライアンス管理システム\n */\nexport class RegionalComplianceManager extends EventEmitter {\n  private logger: Logger;\n  private i18nManager: I18nManager;\n  private options: RegionalComplianceManagerOptions;\n  private frameworks: Map<string, ComplianceFramework>;\n  private assessments: Map<string, ComplianceAssessment>;\n  private actions: Map<string, ComplianceAction>;\n  private reports: Map<string, ComplianceReport>;\n  private dataProcessingActivities: Map<string, DataProcessingActivity>;\n  private assessmentInterval?: NodeJS.Timeout;\n  private reportingInterval?: NodeJS.Timeout;\n\n  constructor(\n    logger?: Logger,\n    i18nManager?: I18nManager,\n    options: RegionalComplianceManagerOptions = {}\n  ) {\n    super();\n    this.logger = logger || new Logger({ level: 'info' });\n    this.i18nManager = i18nManager || new I18nManager();\n    this.options = {\n      enableAutomaticAssessment: true,\n      assessmentInterval: 86400000, // 24時間\n      enableAlerts: true,\n      alertThresholds: {\n        complianceScore: 80,\n        criticalGaps: 5,\n        overdueActions: 10,\n      },\n      enableReporting: true,\n      reportingInterval: 604800000, // 7日\n      enableDataProcessingLog: true,\n      enableIncidentTracking: true,\n      enableCertificationManagement: true,\n      auditLogPath: './audit-logs',\n      dataPath: './compliance-data',\n      ...options,\n    };\n\n    this.frameworks = new Map();\n    this.assessments = new Map();\n    this.actions = new Map();\n    this.reports = new Map();\n    this.dataProcessingActivities = new Map();\n\n    this.initializeFrameworks();\n    this.loadComplianceData();\n\n    if (this.options.enableAutomaticAssessment) {\n      this.startAutomaticAssessment();\n    }\n\n    if (this.options.enableReporting) {\n      this.startAutomaticReporting();\n    }\n  }\n\n  /**\n   * コンプライアンスフレームワークの初期化\n   */\n  private initializeFrameworks(): void {\n    const frameworks: ComplianceFramework[] = [\n      {\n        id: 'gdpr',\n        name: 'General Data Protection Regulation',\n        region: 'EU',\n        jurisdiction: 'European Union',\n        version: '2018',\n        effectiveDate: new Date('2018-05-25'),\n        lastUpdated: new Date(),\n        status: 'active',\n        requirements: [\n          {\n            id: 'gdpr-art-5',\n            frameworkId: 'gdpr',\n            category: 'data-protection',\n            title: 'データ処理の原則',\n            description: '個人データの処理は適法、公正、透明でなければならない',\n            severity: 'critical',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              'プライバシーポリシー',\n              'データ処理記録',\n              '同意管理記録',\n            ],\n            implementationSteps: [\n              'データ処理の法的根拠を明確化',\n              'プライバシーポリシーの策定',\n              '同意管理システムの実装',\n              'データ処理記録の作成',\n            ],\n            technicalControls: [\n              {\n                id: 'gdpr-art-5-encryption',\n                type: 'encryption',\n                name: 'データ暗号化',\n                description: '保存時および転送時の個人データ暗号化',\n                implementation: 'AES-256暗号化の実装',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000), // 30日後\n              },\n            ],\n            businessControls: [\n              {\n                id: 'gdpr-art-5-policy',\n                type: 'policy',\n                name: 'データ処理ポリシー',\n                description: '個人データ処理に関するポリシー',\n                implementation: 'ポリシー文書の作成と承認',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 31536000000), // 1年後\n              },\n            ],\n            riskLevel: 'high',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000), // 90日後\n          },\n          {\n            id: 'gdpr-art-17',\n            frameworkId: 'gdpr',\n            category: 'access-rights',\n            title: '削除権（忘れられる権利）',\n            description: 'データ主体の要求に応じた個人データの削除',\n            severity: 'high',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              '削除手順書',\n              '削除実行記録',\n              '削除確認システム',\n            ],\n            implementationSteps: [\n              '削除要求受付システムの構築',\n              '削除手順の標準化',\n              '削除実行システムの開発',\n              '削除確認プロセスの実装',\n            ],\n            technicalControls: [\n              {\n                id: 'gdpr-art-17-deletion',\n                type: 'data-masking',\n                name: 'データ削除システム',\n                description: '個人データの完全削除機能',\n                implementation: 'データベース削除とファイル削除の実装',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'gdpr-art-17-process',\n                type: 'process',\n                name: '削除要求処理プロセス',\n                description: '削除要求の受付から完了までのプロセス',\n                implementation: 'プロセス文書の作成と運用',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 15552000000), // 6ヶ月後\n              },\n            ],\n            riskLevel: 'medium',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n          {\n            id: 'gdpr-art-25',\n            frameworkId: 'gdpr',\n            category: 'data-protection',\n            title: 'データ保護バイデザイン',\n            description: 'システム設計段階からのデータ保護の組み込み',\n            severity: 'high',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              '設計文書',\n              'セキュリティアセスメント',\n              '実装仕様書',\n            ],\n            implementationSteps: [\n              'プライバシーバイデザインの原則策定',\n              'システム設計プロセスの見直し',\n              'セキュリティアセスメントの実施',\n              'データ保護機能の実装',\n            ],\n            technicalControls: [\n              {\n                id: 'gdpr-art-25-design',\n                type: 'access-control',\n                name: 'アクセス制御',\n                description: '個人データへのアクセス制御',\n                implementation: 'ロールベースアクセス制御の実装',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'gdpr-art-25-assessment',\n                type: 'assessment',\n                name: 'データ保護影響評価',\n                description: '新システムのデータ保護影響評価',\n                implementation: 'DPIA実施プロセスの確立',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 15552000000),\n              },\n            ],\n            riskLevel: 'medium',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n          {\n            id: 'gdpr-art-32',\n            frameworkId: 'gdpr',\n            category: 'encryption',\n            title: 'セキュリティ対策',\n            description: 'データ処理のセキュリティ確保',\n            severity: 'critical',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              '暗号化実装記録',\n              'セキュリティ監査報告',\n              'インシデント対応記録',\n            ],\n            implementationSteps: [\n              '暗号化標準の策定',\n              'セキュリティ監視の実装',\n              'インシデント対応体制の構築',\n              'セキュリティ監査の実施',\n            ],\n            technicalControls: [\n              {\n                id: 'gdpr-art-32-encryption',\n                type: 'encryption',\n                name: 'データ暗号化',\n                description: 'データの暗号化',\n                implementation: 'AES-256暗号化',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n              {\n                id: 'gdpr-art-32-monitoring',\n                type: 'monitoring',\n                name: 'セキュリティ監視',\n                description: '不正アクセスの検出と対応',\n                implementation: 'SIEM システムの導入',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'gdpr-art-32-incident',\n                type: 'incident-response',\n                name: 'インシデント対応',\n                description: 'データ漏洩インシデントの対応',\n                implementation: 'インシデント対応計画の策定',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 15552000000),\n              },\n            ],\n            riskLevel: 'high',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n          {\n            id: 'gdpr-art-33',\n            frameworkId: 'gdpr',\n            category: 'notification',\n            title: 'データ漏洩通知',\n            description: '監督当局への72時間以内の通知',\n            severity: 'critical',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: ['通知手順書', '通知実行記録', '通知システム'],\n            implementationSteps: [\n              '通知手順の策定',\n              '通知システムの構築',\n              '通知テンプレートの作成',\n              '通知訓練の実施',\n            ],\n            technicalControls: [\n              {\n                id: 'gdpr-art-33-notification',\n                type: 'monitoring',\n                name: '自動通知システム',\n                description: 'データ漏洩の自動検出と通知',\n                implementation: '通知システムの実装',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'gdpr-art-33-process',\n                type: 'process',\n                name: '通知プロセス',\n                description: 'データ漏洩通知プロセス',\n                implementation: 'プロセス文書の作成',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 15552000000),\n              },\n            ],\n            riskLevel: 'high',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n        ],\n        penalties: [\n          {\n            type: 'monetary',\n            description: '年間売上高の4%または2000万ユーロの高い方',\n            amount: 20000000,\n            currency: 'EUR',\n            maxAmount: 0, // 年間売上高の4%\n            conditions: ['重大な違反', '故意または過失による違反'],\n          },\n          {\n            type: 'operational',\n            description: '処理活動の制限または停止',\n            conditions: ['継続的な違反', '是正措置の不履行'],\n          },\n        ],\n        exemptions: [\n          {\n            id: 'gdpr-household',\n            title: '家庭用例外',\n            description: '個人的または家庭内活動における処理',\n            conditions: ['純粋に個人的な活動', '家庭内での活動'],\n            applicableRequirements: ['gdpr-art-5', 'gdpr-art-17'],\n          },\n        ],\n      },\n      {\n        id: 'ccpa',\n        name: 'California Consumer Privacy Act',\n        region: 'North America',\n        jurisdiction: 'California, USA',\n        version: '2020',\n        effectiveDate: new Date('2020-01-01'),\n        lastUpdated: new Date(),\n        status: 'active',\n        requirements: [\n          {\n            id: 'ccpa-1798-100',\n            frameworkId: 'ccpa',\n            category: 'consent',\n            title: '消費者の知る権利',\n            description: '個人情報の収集と使用に関する透明性',\n            severity: 'high',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              'プライバシーポリシー',\n              '情報収集通知',\n              '開示記録',\n            ],\n            implementationSteps: [\n              'プライバシーポリシーの更新',\n              '情報収集通知の実装',\n              '開示手順の策定',\n              '消費者向けポータルの構築',\n            ],\n            technicalControls: [\n              {\n                id: 'ccpa-1798-100-portal',\n                type: 'access-control',\n                name: '消費者ポータル',\n                description: '消費者の権利行使のためのポータル',\n                implementation: 'Webポータルの開発',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'ccpa-1798-100-policy',\n                type: 'policy',\n                name: 'プライバシーポリシー',\n                description: 'CCPA対応プライバシーポリシー',\n                implementation: 'ポリシー文書の更新',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 31536000000),\n              },\n            ],\n            riskLevel: 'medium',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n          {\n            id: 'ccpa-1798-105',\n            frameworkId: 'ccpa',\n            category: 'access-rights',\n            title: '消費者の削除権',\n            description: '個人情報の削除を要求する権利',\n            severity: 'high',\n            isCompliant: false,\n            compliancePercentage: 0,\n            evidenceRequired: [\n              '削除手順書',\n              '削除実行記録',\n              '削除確認システム',\n            ],\n            implementationSteps: [\n              '削除要求受付システムの構築',\n              '削除手順の標準化',\n              '削除実行システムの開発',\n              '削除確認プロセスの実装',\n            ],\n            technicalControls: [\n              {\n                id: 'ccpa-1798-105-deletion',\n                type: 'data-masking',\n                name: 'データ削除システム',\n                description: '個人情報の完全削除機能',\n                implementation: 'データベース削除とファイル削除の実装',\n                isImplemented: false,\n                effectiveness: 0,\n                lastVerified: new Date(),\n                nextVerification: new Date(Date.now() + 2592000000),\n              },\n            ],\n            businessControls: [\n              {\n                id: 'ccpa-1798-105-process',\n                type: 'process',\n                name: '削除要求処理プロセス',\n                description: '削除要求の受付から完了までのプロセス',\n                implementation: 'プロセス文書の作成と運用',\n                isImplemented: false,\n                effectiveness: 0,\n                lastReview: new Date(),\n                nextReview: new Date(Date.now() + 15552000000),\n              },\n            ],\n            riskLevel: 'medium',\n            lastAssessment: new Date(),\n            nextAssessment: new Date(Date.now() + 7776000000),\n          },\n        ],\n        penalties: [\n          {\n            type: 'monetary',\n            description: '消費者1人当たり最大7,500ドル（故意違反）',\n            amount: 7500,\n            currency: 'USD',\n            conditions: ['故意違反', '是正措置の不履行'],\n          },\n          {\n            type: 'monetary',\n            description: '消費者1人当たり最大2,500ドル（過失違反）',\n            amount: 2500,\n            currency: 'USD',\n            conditions: ['過失違反'],\n          },\n        ],\n        exemptions: [\n          {\n            id: 'ccpa-employee',\n            title: '従業員情報例外',\n            description: '従業員の個人情報処理',\n            conditions: ['雇用関係における処理', '人事管理目的'],\n            validUntil: new Date('2023-01-01'),\n            applicableRequirements: ['ccpa-1798-100'],\n          },\n        ],\n      },\n    ];\n\n    frameworks.forEach(framework => {\n      this.frameworks.set(framework.id, framework);\n    });\n  }\n\n  /**\n   * コンプライアンスデータの読み込み\n   */\n  private loadComplianceData(): void {\n    try {\n      const dataPath = this.options.dataPath!;\n\n      // 既存のデータファイルがある場合は読み込み\n      if (existsSync(join(dataPath, 'assessments.json'))) {\n        const assessmentsData = JSON.parse(\n          readFileSync(join(dataPath, 'assessments.json'), 'utf8')\n        );\n        Object.entries(assessmentsData).forEach(([id, data]) => {\n          this.assessments.set(id, data as ComplianceAssessment);\n        });\n      }\n\n      if (existsSync(join(dataPath, 'actions.json'))) {\n        const actionsData = JSON.parse(\n          readFileSync(join(dataPath, 'actions.json'), 'utf8')\n        );\n        Object.entries(actionsData).forEach(([id, data]) => {\n          this.actions.set(id, data as ComplianceAction);\n        });\n      }\n    } catch (error) {\n      this.logger.error('コンプライアンスデータ読み込みエラー:', error);\n    }\n  }\n\n  /**\n   * 自動アセスメントの開始\n   */\n  private startAutomaticAssessment(): void {\n    this.assessmentInterval = setInterval(() => {\n      this.performAutomaticAssessment();\n    }, this.options.assessmentInterval);\n  }\n\n  /**\n   * 自動レポートの開始\n   */\n  private startAutomaticReporting(): void {\n    this.reportingInterval = setInterval(() => {\n      this.generateAutomaticReports();\n    }, this.options.reportingInterval);\n  }\n\n  /**\n   * 自動アセスメントの実行\n   */\n  private async performAutomaticAssessment(): Promise<void> {\n    try {\n      for (const framework of this.frameworks.values()) {\n        const assessmentId = `auto-${framework.id}-${Date.now()}`;\n        const assessment = await this.assessFramework(\n          framework.id,\n          assessmentId\n        );\n\n        if (\n          assessment.overallScore <\n          this.options.alertThresholds!.complianceScore\n        ) {\n          this.emit('compliance-alert', {\n            type: 'low-compliance-score',\n            framework: framework.id,\n            score: assessment.overallScore,\n            threshold: this.options.alertThresholds!.complianceScore,\n          });\n        }\n      }\n    } catch (error) {\n      this.logger.error('自動アセスメントエラー:', error);\n    }\n  }\n\n  /**\n   * 自動レポートの生成\n   */\n  private async generateAutomaticReports(): Promise<void> {\n    try {\n      for (const framework of this.frameworks.values()) {\n        const reportId = `auto-report-${framework.id}-${Date.now()}`;\n        const report = await this.generateComplianceReport(\n          framework.id,\n          reportId\n        );\n\n        this.emit('report-generated', {\n          reportId: report.id,\n          framework: framework.id,\n          compliance: report.overallCompliance,\n        });\n      }\n    } catch (error) {\n      this.logger.error('自動レポート生成エラー:', error);\n    }\n  }\n\n  // 公開メソッド\n\n  /**\n   * フレームワークのアセスメント\n   */\n  async assessFramework(\n    frameworkId: string,\n    assessmentId?: string\n  ): Promise<ComplianceAssessment> {\n    const framework = this.frameworks.get(frameworkId);\n    if (!framework) {\n      throw new Error(`フレームワークが見つかりません: ${frameworkId}`);\n    }\n\n    const id = assessmentId || `assessment-${frameworkId}-${Date.now()}`;\n    const requirementResults: any = {};\n    let totalScore = 0;\n\n    // 各要件のアセスメント\n    for (const requirement of framework.requirements) {\n      const result = await this.assessRequirement(requirement);\n      requirementResults[requirement.id] = result;\n      totalScore += result.score;\n    }\n\n    const overallScore = totalScore / framework.requirements.length;\n\n    // アクションプランの生成\n    const actionPlan = await this.generateActionPlan(\n      framework,\n      requirementResults\n    );\n\n    const assessment: ComplianceAssessment = {\n      id,\n      frameworkId,\n      region: framework.region,\n      assessmentDate: new Date(),\n      assessor: 'DNSweeper System',\n      overallScore,\n      requirementResults,\n      actionPlan,\n      nextAssessment: new Date(Date.now() + 7776000000), // 90日後\n      certificationStatus: overallScore >= 80 ? 'certified' : 'pending',\n    };\n\n    this.assessments.set(id, assessment);\n    this.saveAssessmentData();\n\n    this.emit('assessment-completed', {\n      assessmentId: id,\n      score: overallScore,\n    });\n    return assessment;\n  }\n\n  /**\n   * 要件のアセスメント\n   */\n  private async assessRequirement(\n    requirement: ComplianceRequirement\n  ): Promise<any> {\n    let score = 0;\n    let status: 'compliant' | 'non-compliant' | 'partially-compliant' =\n      'non-compliant';\n    const evidence: string[] = [];\n    const gaps: string[] = [];\n    const recommendations: string[] = [];\n\n    // 技術的コントロールの評価\n    let technicalControlScore = 0;\n    for (const control of requirement.technicalControls) {\n      if (control.isImplemented) {\n        technicalControlScore += control.effectiveness;\n        evidence.push(\n          `${control.name}: 実装済み（効果: ${control.effectiveness}%）`\n        );\n      } else {\n        gaps.push(`${control.name}: 未実装`);\n        recommendations.push(`${control.name}の実装を推奨`);\n      }\n    }\n\n    // ビジネスコントロールの評価\n    let businessControlScore = 0;\n    for (const control of requirement.businessControls) {\n      if (control.isImplemented) {\n        businessControlScore += control.effectiveness;\n        evidence.push(\n          `${control.name}: 実装済み（効果: ${control.effectiveness}%）`\n        );\n      } else {\n        gaps.push(`${control.name}: 未実装`);\n        recommendations.push(`${control.name}の実装を推奨`);\n      }\n    }\n\n    // 総合スコアの計算\n    const totalControls =\n      requirement.technicalControls.length +\n      requirement.businessControls.length;\n    if (totalControls > 0) {\n      score = (technicalControlScore + businessControlScore) / totalControls;\n    }\n\n    // ステータスの決定\n    if (score >= 80) {\n      status = 'compliant';\n    } else if (score >= 40) {\n      status = 'partially-compliant';\n    } else {\n      status = 'non-compliant';\n    }\n\n    // 要件の更新\n    requirement.compliancePercentage = score;\n    requirement.isCompliant = status === 'compliant';\n    requirement.lastAssessment = new Date();\n\n    return {\n      score,\n      status,\n      evidence,\n      gaps,\n      recommendations,\n    };\n  }\n\n  /**\n   * アクションプランの生成\n   */\n  private async generateActionPlan(\n    framework: ComplianceFramework,\n    requirementResults: any\n  ): Promise<ComplianceAction[]> {\n    const actions: ComplianceAction[] = [];\n    let actionCounter = 1;\n\n    for (const requirement of framework.requirements) {\n      const result = requirementResults[requirement.id];\n\n      if (result.status !== 'compliant') {\n        // 各ギャップに対するアクション\n        for (const gap of result.gaps) {\n          const action: ComplianceAction = {\n            id: `action-${framework.id}-${actionCounter++}`,\n            title: `${requirement.title}: ${gap}の解決`,\n            description: `${requirement.description}の要件を満たすため、${gap}を解決する`,\n            priority:\n              requirement.severity === 'critical'\n                ? 'critical'\n                : requirement.severity === 'high'\n                  ? 'high'\n                  : requirement.severity === 'medium'\n                    ? 'medium'\n                    : 'low',\n            category: requirement.category,\n            assignedTo: 'System Administrator',\n            dueDate: new Date(\n              Date.now() +\n                (requirement.severity === 'critical' ? 604800000 : 2592000000)\n            ), // 1週間 or 30日\n            status: 'pending',\n            dependencies: [],\n            progress: 0,\n            cost: this.estimateActionCost(requirement, gap),\n            effort: this.estimateActionEffort(requirement, gap),\n          };\n\n          actions.push(action);\n          this.actions.set(action.id, action);\n        }\n      }\n    }\n\n    return actions;\n  }\n\n  /**\n   * アクションのコスト見積もり\n   */\n  private estimateActionCost(\n    requirement: ComplianceRequirement,\n    gap: string\n  ): number {\n    // 簡単な見積もりロジック\n    const baseCost =\n      requirement.severity === 'critical'\n        ? 50000\n        : requirement.severity === 'high'\n          ? 25000\n          : requirement.severity === 'medium'\n            ? 10000\n            : 5000;\n\n    const multiplier = gap.includes('システム')\n      ? 2\n      : gap.includes('プロセス')\n        ? 1.5\n        : 1;\n\n    return baseCost * multiplier;\n  }\n\n  /**\n   * アクションの工数見積もり\n   */\n  private estimateActionEffort(\n    requirement: ComplianceRequirement,\n    gap: string\n  ): number {\n    // 簡単な見積もりロジック（person-days）\n    const baseEffort =\n      requirement.severity === 'critical'\n        ? 20\n        : requirement.severity === 'high'\n          ? 10\n          : requirement.severity === 'medium'\n            ? 5\n            : 2;\n\n    const multiplier = gap.includes('システム')\n      ? 3\n      : gap.includes('プロセス')\n        ? 2\n        : 1;\n\n    return baseEffort * multiplier;\n  }\n\n  /**\n   * コンプライアンスレポートの生成\n   */\n  async generateComplianceReport(\n    frameworkId: string,\n    reportId?: string\n  ): Promise<ComplianceReport> {\n    const framework = this.frameworks.get(frameworkId);\n    if (!framework) {\n      throw new Error(`フレームワークが見つかりません: ${frameworkId}`);\n    }\n\n    const id = reportId || `report-${frameworkId}-${Date.now()}`;\n    const latestAssessment = this.getLatestAssessment(frameworkId);\n\n    if (!latestAssessment) {\n      throw new Error(`アセスメントが見つかりません: ${frameworkId}`);\n    }\n\n    // サマリーの計算\n    const summary = {\n      totalRequirements: framework.requirements.length,\n      compliantRequirements: 0,\n      partiallyCompliantRequirements: 0,\n      nonCompliantRequirements: 0,\n      criticalGaps: 0,\n      highRiskItems: 0,\n    };\n\n    Object.values(latestAssessment.requirementResults).forEach(\n      (result: any) => {\n        if (result.status === 'compliant') {\n          summary.compliantRequirements++;\n        } else if (result.status === 'partially-compliant') {\n          summary.partiallyCompliantRequirements++;\n        } else {\n          summary.nonCompliantRequirements++;\n        }\n      }\n    );\n\n    framework.requirements.forEach(req => {\n      if (req.severity === 'critical' && !req.isCompliant) {\n        summary.criticalGaps++;\n      }\n      if (req.riskLevel === 'high') {\n        summary.highRiskItems++;\n      }\n    });\n\n    const report: ComplianceReport = {\n      id,\n      type: 'assessment',\n      title: `${framework.name} コンプライアンスレポート`,\n      framework: framework.id,\n      region: framework.region,\n      generatedAt: new Date(),\n      reportPeriod: {\n        start: new Date(Date.now() - 7776000000), // 90日前\n        end: new Date(),\n      },\n      overallCompliance: latestAssessment.overallScore,\n      summary,\n      details: {\n        assessment: latestAssessment,\n        framework: framework,\n        requirements: framework.requirements,\n      },\n      recommendations: this.generateRecommendations(\n        framework,\n        latestAssessment\n      ),\n      actionPlan: latestAssessment.actionPlan,\n    };\n\n    this.reports.set(id, report);\n    this.saveReportData();\n\n    return report;\n  }\n\n  /**\n   * 推奨事項の生成\n   */\n  private generateRecommendations(\n    framework: ComplianceFramework,\n    assessment: ComplianceAssessment\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // 重要度の高い未対応要件\n    const criticalGaps = framework.requirements.filter(\n      req => req.severity === 'critical' && !req.isCompliant\n    );\n\n    if (criticalGaps.length > 0) {\n      recommendations.push(\n        `重要度「Critical」の要件 ${criticalGaps.length} 件を優先的に対応してください`\n      );\n    }\n\n    // 全体的なコンプライアンススコアが低い場合\n    if (assessment.overallScore < 60) {\n      recommendations.push(\n        '全体的なコンプライアンススコアが低いため、包括的な改善計画を策定してください'\n      );\n    }\n\n    // 期限切れのアクション\n    const overdueActions = assessment.actionPlan.filter(\n      action => action.dueDate < new Date() && action.status !== 'completed'\n    );\n\n    if (overdueActions.length > 0) {\n      recommendations.push(\n        `期限切れのアクション ${overdueActions.length} 件を早急に対応してください`\n      );\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * 最新のアセスメント取得\n   */\n  private getLatestAssessment(\n    frameworkId: string\n  ): ComplianceAssessment | null {\n    const assessments = Array.from(this.assessments.values())\n      .filter(a => a.frameworkId === frameworkId)\n      .sort((a, b) => b.assessmentDate.getTime() - a.assessmentDate.getTime());\n\n    return assessments[0] || null;\n  }\n\n  /**\n   * データ処理活動の登録\n   */\n  registerDataProcessingActivity(\n    activity: Omit<DataProcessingActivity, 'id'>\n  ): string {\n    const id = `activity-${Date.now()}`;\n    const fullActivity: DataProcessingActivity = {\n      id,\n      ...activity,\n    };\n\n    this.dataProcessingActivities.set(id, fullActivity);\n    this.saveDataProcessingActivities();\n\n    this.emit('data-processing-registered', { activityId: id });\n    return id;\n  }\n\n  /**\n   * アセスメントデータの保存\n   */\n  private saveAssessmentData(): void {\n    try {\n      const data = Object.fromEntries(this.assessments.entries());\n      writeFileSync(\n        join(this.options.dataPath!, 'assessments.json'),\n        JSON.stringify(data, null, 2)\n      );\n    } catch (error) {\n      this.logger.error('アセスメントデータ保存エラー:', error);\n    }\n  }\n\n  /**\n   * レポートデータの保存\n   */\n  private saveReportData(): void {\n    try {\n      const data = Object.fromEntries(this.reports.entries());\n      writeFileSync(\n        join(this.options.dataPath!, 'reports.json'),\n        JSON.stringify(data, null, 2)\n      );\n    } catch (error) {\n      this.logger.error('レポートデータ保存エラー:', error);\n    }\n  }\n\n  /**\n   * データ処理活動の保存\n   */\n  private saveDataProcessingActivities(): void {\n    try {\n      const data = Object.fromEntries(this.dataProcessingActivities.entries());\n      writeFileSync(\n        join(this.options.dataPath!, 'data-processing-activities.json'),\n        JSON.stringify(data, null, 2)\n      );\n    } catch (error) {\n      this.logger.error('データ処理活動保存エラー:', error);\n    }\n  }\n\n  // ゲッターメソッド\n\n  getFrameworks(): ComplianceFramework[] {\n    return Array.from(this.frameworks.values());\n  }\n\n  getAssessments(): ComplianceAssessment[] {\n    return Array.from(this.assessments.values());\n  }\n\n  getActions(): ComplianceAction[] {\n    return Array.from(this.actions.values());\n  }\n\n  getReports(): ComplianceReport[] {\n    return Array.from(this.reports.values());\n  }\n\n  getDataProcessingActivities(): DataProcessingActivity[] {\n    return Array.from(this.dataProcessingActivities.values());\n  }\n\n  /**\n   * 正常終了処理\n   */\n  async shutdown(): Promise<void> {\n    try {\n      if (this.assessmentInterval) {\n        clearInterval(this.assessmentInterval);\n      }\n\n      if (this.reportingInterval) {\n        clearInterval(this.reportingInterval);\n      }\n\n      // データの保存\n      this.saveAssessmentData();\n      this.saveReportData();\n      this.saveDataProcessingActivities();\n\n      // キャッシュのクリア\n      this.frameworks.clear();\n      this.assessments.clear();\n      this.actions.clear();\n      this.reports.clear();\n      this.dataProcessingActivities.clear();\n\n      // イベントリスナーの削除\n      this.removeAllListeners();\n\n      this.logger.info('RegionalComplianceManager正常終了');\n    } catch (error) {\n      this.logger.error('RegionalComplianceManager終了エラー:', error);\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/regional-dns-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DNSRecord' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RegionalSettings' is defined but never used. Allowed unused vars must match /^_/u.","line":14,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dnsServers' is defined but never used. Allowed unused args must match /^_/u.","line":671,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":671,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dnsServers' is defined but never used. Allowed unused args must match /^_/u.","line":679,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":679,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dnsServers' is defined but never used. Allowed unused args must match /^_/u.","line":687,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":687,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":883,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23898,23901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23898,23901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 地域別DNS設定管理システム\n *\n * グローバル展開に対応した地域別DNS最適化機能\n * - 地域別DNSサーバー設定\n * - コンプライアンス要件対応\n * - パフォーマンス最適化\n * - 規制要件対応\n */\n\nimport { EventEmitter } from 'events';\n\nimport { DNSRecord } from './dns-resolver.js';\nimport { I18nManager, RegionalSettings } from './i18n-manager.js';\nimport { Logger } from './logger.js';\n\nexport interface RegionalDNSConfig {\n  region: string;\n  name: string;\n  primaryDNS: string[];\n  secondaryDNS: string[];\n  localDNS: string[];\n  cdnPreferences: string[];\n  optimizationTargets: string[];\n  securityFeatures: string[];\n  performanceTargets: {\n    responseTime: number;\n    uptime: number;\n    throughput: number;\n  };\n  complianceRequirements: {\n    dataLocalization: boolean;\n    encryptionRequired: boolean;\n    auditLogging: boolean;\n    retentionPeriod: number;\n  };\n  businessHours: {\n    timezone: string;\n    start: string;\n    end: string;\n    days: string[];\n  };\n  supportedLanguages: string[];\n}\n\nexport interface DNSOptimizationStrategy {\n  strategy: string;\n  description: string;\n  applicableRegions: string[];\n  performanceImpact: {\n    responseTime: number;\n    uptime: number;\n    throughput: number;\n  };\n  implementationComplexity: 'low' | 'medium' | 'high';\n  estimatedCost: 'low' | 'medium' | 'high';\n  riskLevel: 'low' | 'medium' | 'high';\n  prerequisites: string[];\n}\n\nexport interface ComplianceCheck {\n  requirement: string;\n  status: 'compliant' | 'non-compliant' | 'partially-compliant';\n  details: string;\n  actionRequired: string[];\n  riskLevel: 'low' | 'medium' | 'high';\n  deadline?: Date;\n}\n\nexport interface RegionalPerformanceMetrics {\n  region: string;\n  averageResponseTime: number;\n  uptime: number;\n  throughput: number;\n  errorRate: number;\n  complianceScore: number;\n  lastUpdated: Date;\n  trends: {\n    responseTime: number[];\n    uptime: number[];\n    throughput: number[];\n  };\n}\n\nexport interface RegionalDNSManagerOptions {\n  defaultRegion?: string;\n  autoDetectRegion?: boolean;\n  enablePerformanceMonitoring?: boolean;\n  enableComplianceChecking?: boolean;\n  enableAutomaticOptimization?: boolean;\n  optimizationInterval?: number;\n  performanceThresholds?: {\n    responseTime: number;\n    uptime: number;\n    throughput: number;\n  };\n  complianceCheckInterval?: number;\n  enableAlerts?: boolean;\n  alertThresholds?: {\n    responseTime: number;\n    uptime: number;\n    complianceScore: number;\n  };\n}\n\n/**\n * 地域別DNS管理システム\n */\nexport class RegionalDNSManager extends EventEmitter {\n  private logger: Logger;\n  private i18nManager: I18nManager;\n  private regionalConfigs: Map<string, RegionalDNSConfig>;\n  private optimizationStrategies: Map<string, DNSOptimizationStrategy>;\n  private performanceMetrics: Map<string, RegionalPerformanceMetrics>;\n  private complianceChecks: Map<string, ComplianceCheck[]>;\n  private currentRegion: string;\n  private options: RegionalDNSManagerOptions;\n  private monitoringIntervals: Map<string, NodeJS.Timeout>;\n\n  constructor(\n    logger?: Logger,\n    i18nManager?: I18nManager,\n    options: RegionalDNSManagerOptions = {}\n  ) {\n    super();\n    this.logger = logger || new Logger({ level: 'info' });\n    this.i18nManager = i18nManager || new I18nManager();\n    this.options = {\n      defaultRegion: 'global',\n      autoDetectRegion: true,\n      enablePerformanceMonitoring: true,\n      enableComplianceChecking: true,\n      enableAutomaticOptimization: false,\n      optimizationInterval: 300000, // 5分\n      performanceThresholds: {\n        responseTime: 100,\n        uptime: 99.9,\n        throughput: 1000,\n      },\n      complianceCheckInterval: 3600000, // 1時間\n      enableAlerts: true,\n      alertThresholds: {\n        responseTime: 200,\n        uptime: 99.0,\n        complianceScore: 80,\n      },\n      ...options,\n    };\n\n    this.regionalConfigs = new Map();\n    this.optimizationStrategies = new Map();\n    this.performanceMetrics = new Map();\n    this.complianceChecks = new Map();\n    this.monitoringIntervals = new Map();\n\n    this.currentRegion = this.options.defaultRegion!;\n\n    this.initializeRegionalConfigs();\n    this.initializeOptimizationStrategies();\n    this.initializePerformanceMetrics();\n    this.initializeComplianceChecks();\n\n    if (this.options.autoDetectRegion) {\n      this.detectRegion();\n    }\n\n    if (this.options.enablePerformanceMonitoring) {\n      this.startPerformanceMonitoring();\n    }\n\n    if (this.options.enableComplianceChecking) {\n      this.startComplianceChecking();\n    }\n  }\n\n  /**\n   * 地域別DNS設定の初期化\n   */\n  private initializeRegionalConfigs(): void {\n    const configs: RegionalDNSConfig[] = [\n      {\n        region: 'north-america',\n        name: 'North America',\n        primaryDNS: ['8.8.8.8', '8.8.4.4'],\n        secondaryDNS: ['1.1.1.1', '1.0.0.1'],\n        localDNS: ['208.67.222.222', '208.67.220.220'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'fastly'],\n        optimizationTargets: ['performance', 'availability', 'security'],\n        securityFeatures: ['dnssec', 'doh', 'dot'],\n        performanceTargets: {\n          responseTime: 50,\n          uptime: 99.9,\n          throughput: 10000,\n        },\n        complianceRequirements: {\n          dataLocalization: false,\n          encryptionRequired: true,\n          auditLogging: true,\n          retentionPeriod: 365,\n        },\n        businessHours: {\n          timezone: 'America/New_York',\n          start: '09:00',\n          end: '17:00',\n          days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n        },\n        supportedLanguages: ['en', 'es', 'fr'],\n      },\n      {\n        region: 'europe',\n        name: 'Europe',\n        primaryDNS: ['1.1.1.1', '1.0.0.1'],\n        secondaryDNS: ['8.8.8.8', '8.8.4.4'],\n        localDNS: ['185.228.168.9', '185.228.169.9'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'azure-cdn'],\n        optimizationTargets: [\n          'gdpr-compliance',\n          'performance',\n          'data-sovereignty',\n        ],\n        securityFeatures: ['dnssec', 'doh', 'dot', 'gdpr-compliance'],\n        performanceTargets: {\n          responseTime: 30,\n          uptime: 99.95,\n          throughput: 15000,\n        },\n        complianceRequirements: {\n          dataLocalization: true,\n          encryptionRequired: true,\n          auditLogging: true,\n          retentionPeriod: 730,\n        },\n        businessHours: {\n          timezone: 'Europe/London',\n          start: '09:00',\n          end: '17:00',\n          days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n        },\n        supportedLanguages: [\n          'en',\n          'de',\n          'fr',\n          'es',\n          'it',\n          'nl',\n          'sv',\n          'da',\n          'no',\n          'fi',\n          'pl',\n          'cs',\n        ],\n      },\n      {\n        region: 'asia-pacific',\n        name: 'Asia Pacific',\n        primaryDNS: ['8.8.8.8', '8.8.4.4'],\n        secondaryDNS: ['1.1.1.1', '1.0.0.1'],\n        localDNS: ['210.2.4.8', '168.95.1.1'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'alibaba-cloud'],\n        optimizationTargets: [\n          'performance',\n          'regional-compliance',\n          'cost-optimization',\n        ],\n        securityFeatures: ['dnssec', 'doh', 'regional-filtering'],\n        performanceTargets: {\n          responseTime: 40,\n          uptime: 99.9,\n          throughput: 20000,\n        },\n        complianceRequirements: {\n          dataLocalization: true,\n          encryptionRequired: true,\n          auditLogging: true,\n          retentionPeriod: 1095,\n        },\n        businessHours: {\n          timezone: 'Asia/Tokyo',\n          start: '09:00',\n          end: '18:00',\n          days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n        },\n        supportedLanguages: [\n          'en',\n          'ja',\n          'zh',\n          'ko',\n          'hi',\n          'th',\n          'vi',\n          'id',\n          'ms',\n          'tl',\n        ],\n      },\n      {\n        region: 'middle-east',\n        name: 'Middle East',\n        primaryDNS: ['8.8.8.8', '8.8.4.4'],\n        secondaryDNS: ['1.1.1.1', '1.0.0.1'],\n        localDNS: ['8.26.56.26', '8.20.247.20'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'azure-cdn'],\n        optimizationTargets: [\n          'regional-compliance',\n          'performance',\n          'content-filtering',\n        ],\n        securityFeatures: [\n          'dnssec',\n          'content-filtering',\n          'regional-compliance',\n        ],\n        performanceTargets: {\n          responseTime: 60,\n          uptime: 99.8,\n          throughput: 8000,\n        },\n        complianceRequirements: {\n          dataLocalization: true,\n          encryptionRequired: true,\n          auditLogging: true,\n          retentionPeriod: 2190,\n        },\n        businessHours: {\n          timezone: 'Asia/Dubai',\n          start: '08:00',\n          end: '16:00',\n          days: ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday'],\n        },\n        supportedLanguages: ['ar', 'en', 'he'],\n      },\n      {\n        region: 'americas',\n        name: 'Americas',\n        primaryDNS: ['8.8.8.8', '8.8.4.4'],\n        secondaryDNS: ['1.1.1.1', '1.0.0.1'],\n        localDNS: ['200.160.7.186', '200.160.0.186'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'google-cloud-cdn'],\n        optimizationTargets: [\n          'cost-optimization',\n          'performance',\n          'regional-availability',\n        ],\n        securityFeatures: ['dnssec', 'doh'],\n        performanceTargets: {\n          responseTime: 80,\n          uptime: 99.5,\n          throughput: 5000,\n        },\n        complianceRequirements: {\n          dataLocalization: false,\n          encryptionRequired: false,\n          auditLogging: true,\n          retentionPeriod: 1095,\n        },\n        businessHours: {\n          timezone: 'America/Mexico_City',\n          start: '08:00',\n          end: '17:00',\n          days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n        },\n        supportedLanguages: ['es', 'pt', 'en'],\n      },\n      {\n        region: 'global',\n        name: 'Global',\n        primaryDNS: ['8.8.8.8', '8.8.4.4'],\n        secondaryDNS: ['1.1.1.1', '1.0.0.1'],\n        localDNS: ['8.8.8.8', '8.8.4.4'],\n        cdnPreferences: ['cloudflare', 'aws-cloudfront', 'google-cloud-cdn'],\n        optimizationTargets: [\n          'global-availability',\n          'performance',\n          'cost-optimization',\n        ],\n        securityFeatures: ['dnssec', 'doh', 'dot'],\n        performanceTargets: {\n          responseTime: 100,\n          uptime: 99.9,\n          throughput: 50000,\n        },\n        complianceRequirements: {\n          dataLocalization: false,\n          encryptionRequired: false,\n          auditLogging: false,\n          retentionPeriod: 365,\n        },\n        businessHours: {\n          timezone: 'UTC',\n          start: '00:00',\n          end: '23:59',\n          days: [\n            'monday',\n            'tuesday',\n            'wednesday',\n            'thursday',\n            'friday',\n            'saturday',\n            'sunday',\n          ],\n        },\n        supportedLanguages: ['en'],\n      },\n    ];\n\n    configs.forEach(config => {\n      this.regionalConfigs.set(config.region, config);\n    });\n  }\n\n  /**\n   * 最適化戦略の初期化\n   */\n  private initializeOptimizationStrategies(): void {\n    const strategies: DNSOptimizationStrategy[] = [\n      {\n        strategy: 'latency-optimization',\n        description: 'レイテンシー最適化による応答時間改善',\n        applicableRegions: ['all'],\n        performanceImpact: {\n          responseTime: -30,\n          uptime: 0,\n          throughput: 10,\n        },\n        implementationComplexity: 'medium',\n        estimatedCost: 'medium',\n        riskLevel: 'low',\n        prerequisites: ['regional-dns-servers', 'performance-monitoring'],\n      },\n      {\n        strategy: 'geo-dns-routing',\n        description: '地理的DNS ルーティングによる最適化',\n        applicableRegions: ['all'],\n        performanceImpact: {\n          responseTime: -50,\n          uptime: 2,\n          throughput: 25,\n        },\n        implementationComplexity: 'high',\n        estimatedCost: 'high',\n        riskLevel: 'medium',\n        prerequisites: ['multiple-regions', 'traffic-management'],\n      },\n      {\n        strategy: 'cdn-integration',\n        description: 'CDN統合による配信最適化',\n        applicableRegions: ['all'],\n        performanceImpact: {\n          responseTime: -40,\n          uptime: 5,\n          throughput: 50,\n        },\n        implementationComplexity: 'high',\n        estimatedCost: 'high',\n        riskLevel: 'low',\n        prerequisites: ['cdn-service', 'cache-management'],\n      },\n      {\n        strategy: 'dnssec-implementation',\n        description: 'DNSSEC実装によるセキュリティ強化',\n        applicableRegions: ['europe', 'north-america', 'asia-pacific'],\n        performanceImpact: {\n          responseTime: 10,\n          uptime: 1,\n          throughput: -5,\n        },\n        implementationComplexity: 'high',\n        estimatedCost: 'medium',\n        riskLevel: 'medium',\n        prerequisites: ['dns-management', 'key-management'],\n      },\n      {\n        strategy: 'anycast-deployment',\n        description: 'Anycast展開による可用性向上',\n        applicableRegions: ['all'],\n        performanceImpact: {\n          responseTime: -60,\n          uptime: 10,\n          throughput: 100,\n        },\n        implementationComplexity: 'high',\n        estimatedCost: 'high',\n        riskLevel: 'medium',\n        prerequisites: ['multiple-datacenters', 'bgp-routing'],\n      },\n    ];\n\n    strategies.forEach(strategy => {\n      this.optimizationStrategies.set(strategy.strategy, strategy);\n    });\n  }\n\n  /**\n   * パフォーマンス監視の初期化\n   */\n  private initializePerformanceMetrics(): void {\n    this.regionalConfigs.forEach((config, region) => {\n      const metrics: RegionalPerformanceMetrics = {\n        region,\n        averageResponseTime: config.performanceTargets.responseTime,\n        uptime: config.performanceTargets.uptime,\n        throughput: config.performanceTargets.throughput,\n        errorRate: 0,\n        complianceScore: 100,\n        lastUpdated: new Date(),\n        trends: {\n          responseTime: [],\n          uptime: [],\n          throughput: [],\n        },\n      };\n\n      this.performanceMetrics.set(region, metrics);\n    });\n  }\n\n  /**\n   * コンプライアンスチェックの初期化\n   */\n  private initializeComplianceChecks(): void {\n    this.regionalConfigs.forEach((config, region) => {\n      const checks: ComplianceCheck[] = [];\n\n      // GDPR対応チェック (ヨーロッパ)\n      if (region === 'europe') {\n        checks.push({\n          requirement: 'GDPR Data Localization',\n          status: config.complianceRequirements.dataLocalization\n            ? 'compliant'\n            : 'non-compliant',\n          details: 'EU内でのデータ処理・保存要件',\n          actionRequired: config.complianceRequirements.dataLocalization\n            ? []\n            : ['データ処理をEU内に移転', 'データ保護影響評価の実施'],\n          riskLevel: 'high',\n        });\n\n        checks.push({\n          requirement: 'GDPR Encryption',\n          status: config.complianceRequirements.encryptionRequired\n            ? 'compliant'\n            : 'non-compliant',\n          details: '保存時および転送時の暗号化要件',\n          actionRequired: config.complianceRequirements.encryptionRequired\n            ? []\n            : ['暗号化の実装', '暗号化ポリシーの策定'],\n          riskLevel: 'high',\n        });\n      }\n\n      // 一般的なセキュリティチェック\n      checks.push({\n        requirement: 'DNS Security',\n        status: config.securityFeatures.includes('dnssec')\n          ? 'compliant'\n          : 'partially-compliant',\n        details: 'DNS セキュリティ機能の実装状況',\n        actionRequired: config.securityFeatures.includes('dnssec')\n          ? []\n          : ['DNSSEC実装', 'DNS over HTTPS設定'],\n        riskLevel: 'medium',\n      });\n\n      checks.push({\n        requirement: 'Audit Logging',\n        status: config.complianceRequirements.auditLogging\n          ? 'compliant'\n          : 'non-compliant',\n        details: '監査ログの実装・保存要件',\n        actionRequired: config.complianceRequirements.auditLogging\n          ? []\n          : ['監査ログシステム実装', 'ログ保存ポリシー策定'],\n        riskLevel: 'medium',\n      });\n\n      this.complianceChecks.set(region, checks);\n    });\n  }\n\n  /**\n   * 地域の自動検出\n   */\n  private detectRegion(): void {\n    const detectedRegion = this.i18nManager.getCurrentRegion();\n    if (this.regionalConfigs.has(detectedRegion)) {\n      this.currentRegion = detectedRegion;\n      this.logger.info(`地域を自動検出: ${detectedRegion}`);\n    }\n  }\n\n  /**\n   * パフォーマンス監視の開始\n   */\n  private startPerformanceMonitoring(): void {\n    this.regionalConfigs.forEach((config, region) => {\n      const interval = setInterval(() => {\n        this.updatePerformanceMetrics(region);\n      }, this.options.optimizationInterval);\n\n      this.monitoringIntervals.set(region, interval);\n    });\n  }\n\n  /**\n   * コンプライアンスチェックの開始\n   */\n  private startComplianceChecking(): void {\n    const interval = setInterval(() => {\n      this.performComplianceChecks();\n    }, this.options.complianceCheckInterval);\n\n    this.monitoringIntervals.set('compliance', interval);\n  }\n\n  /**\n   * パフォーマンスメトリクスの更新\n   */\n  private async updatePerformanceMetrics(region: string): Promise<void> {\n    try {\n      const config = this.regionalConfigs.get(region);\n      if (!config) return;\n\n      const metrics = this.performanceMetrics.get(region);\n      if (!metrics) return;\n\n      // 実際のDNSパフォーマンス測定 (シミュレーション)\n      const responseTime = this.measureResponseTime(config.primaryDNS);\n      const uptime = this.measureUptime(config.primaryDNS);\n      const throughput = this.measureThroughput(config.primaryDNS);\n\n      // メトリクスの更新\n      metrics.averageResponseTime = responseTime;\n      metrics.uptime = uptime;\n      metrics.throughput = throughput;\n      metrics.lastUpdated = new Date();\n\n      // トレンドデータの更新\n      metrics.trends.responseTime.push(responseTime);\n      metrics.trends.uptime.push(uptime);\n      metrics.trends.throughput.push(throughput);\n\n      // 履歴データの制限 (最新100件)\n      if (metrics.trends.responseTime.length > 100) {\n        metrics.trends.responseTime.shift();\n      }\n      if (metrics.trends.uptime.length > 100) {\n        metrics.trends.uptime.shift();\n      }\n      if (metrics.trends.throughput.length > 100) {\n        metrics.trends.throughput.shift();\n      }\n\n      this.performanceMetrics.set(region, metrics);\n\n      // アラートチェック\n      this.checkPerformanceAlerts(region, metrics);\n\n      this.emit('performance-updated', { region, metrics });\n    } catch (error) {\n      this.logger.error(\n        `パフォーマンスメトリクス更新エラー (${region}):`,\n        error\n      );\n    }\n  }\n\n  /**\n   * 応答時間測定 (シミュレーション)\n   */\n  private measureResponseTime(dnsServers: string[]): number {\n    // 実際の実装では、DNSクエリの応答時間を測定\n    return Math.random() * 100 + 20;\n  }\n\n  /**\n   * 稼働時間測定 (シミュレーション)\n   */\n  private measureUptime(dnsServers: string[]): number {\n    // 実際の実装では、DNSサーバーの稼働状況を確認\n    return Math.random() * 1 + 99;\n  }\n\n  /**\n   * スループット測定 (シミュレーション)\n   */\n  private measureThroughput(dnsServers: string[]): number {\n    // 実際の実装では、DNSクエリのスループットを測定\n    return Math.random() * 1000 + 5000;\n  }\n\n  /**\n   * パフォーマンスアラートのチェック\n   */\n  private checkPerformanceAlerts(\n    region: string,\n    metrics: RegionalPerformanceMetrics\n  ): void {\n    const thresholds = this.options.alertThresholds!;\n\n    if (metrics.averageResponseTime > thresholds.responseTime) {\n      this.emit('performance-alert', {\n        region,\n        type: 'response-time',\n        value: metrics.averageResponseTime,\n        threshold: thresholds.responseTime,\n        severity: 'warning',\n      });\n    }\n\n    if (metrics.uptime < thresholds.uptime) {\n      this.emit('performance-alert', {\n        region,\n        type: 'uptime',\n        value: metrics.uptime,\n        threshold: thresholds.uptime,\n        severity: 'critical',\n      });\n    }\n\n    if (metrics.complianceScore < thresholds.complianceScore) {\n      this.emit('performance-alert', {\n        region,\n        type: 'compliance',\n        value: metrics.complianceScore,\n        threshold: thresholds.complianceScore,\n        severity: 'warning',\n      });\n    }\n  }\n\n  /**\n   * コンプライアンスチェックの実行\n   */\n  private performComplianceChecks(): void {\n    this.complianceChecks.forEach((checks, region) => {\n      const config = this.regionalConfigs.get(region);\n      if (!config) return;\n\n      checks.forEach(check => {\n        // 動的なコンプライアンスチェック\n        this.updateComplianceStatus(region, check);\n      });\n\n      // コンプライアンススコアの計算\n      const totalChecks = checks.length;\n      const compliantChecks = checks.filter(\n        c => c.status === 'compliant'\n      ).length;\n      const partiallyCompliantChecks = checks.filter(\n        c => c.status === 'partially-compliant'\n      ).length;\n\n      const complianceScore =\n        ((compliantChecks + partiallyCompliantChecks * 0.5) / totalChecks) *\n        100;\n\n      const metrics = this.performanceMetrics.get(region);\n      if (metrics) {\n        metrics.complianceScore = complianceScore;\n        this.performanceMetrics.set(region, metrics);\n      }\n\n      this.emit('compliance-updated', {\n        region,\n        score: complianceScore,\n        checks,\n      });\n    });\n  }\n\n  /**\n   * コンプライアンス状態の更新\n   */\n  private updateComplianceStatus(region: string, check: ComplianceCheck): void {\n    const config = this.regionalConfigs.get(region);\n    if (!config) return;\n\n    // 実際の実装では、各要件の実装状況を動的にチェック\n    switch (check.requirement) {\n      case 'GDPR Data Localization':\n        check.status = config.complianceRequirements.dataLocalization\n          ? 'compliant'\n          : 'non-compliant';\n        break;\n      case 'GDPR Encryption':\n        check.status = config.complianceRequirements.encryptionRequired\n          ? 'compliant'\n          : 'non-compliant';\n        break;\n      case 'DNS Security':\n        check.status = config.securityFeatures.includes('dnssec')\n          ? 'compliant'\n          : 'partially-compliant';\n        break;\n      case 'Audit Logging':\n        check.status = config.complianceRequirements.auditLogging\n          ? 'compliant'\n          : 'non-compliant';\n        break;\n    }\n  }\n\n  // 公開メソッド\n\n  /**\n   * 地域の設定\n   */\n  setRegion(region: string): void {\n    if (!this.regionalConfigs.has(region)) {\n      throw new Error(`サポートされていない地域: ${region}`);\n    }\n\n    const oldRegion = this.currentRegion;\n    this.currentRegion = region;\n\n    this.logger.info(`地域変更: ${oldRegion} → ${region}`);\n    this.emit('region-changed', { from: oldRegion, to: region });\n  }\n\n  /**\n   * 現在の地域の取得\n   */\n  getCurrentRegion(): string {\n    return this.currentRegion;\n  }\n\n  /**\n   * 地域設定の取得\n   */\n  getRegionalConfig(region?: string): RegionalDNSConfig | undefined {\n    return this.regionalConfigs.get(region || this.currentRegion);\n  }\n\n  /**\n   * 全地域設定の取得\n   */\n  getAllRegionalConfigs(): RegionalDNSConfig[] {\n    return Array.from(this.regionalConfigs.values());\n  }\n\n  /**\n   * 最適化戦略の取得\n   */\n  getOptimizationStrategies(region?: string): DNSOptimizationStrategy[] {\n    const targetRegion = region || this.currentRegion;\n    return Array.from(this.optimizationStrategies.values()).filter(\n      strategy =>\n        strategy.applicableRegions.includes('all') ||\n        strategy.applicableRegions.includes(targetRegion)\n    );\n  }\n\n  /**\n   * パフォーマンスメトリクスの取得\n   */\n  getPerformanceMetrics(\n    region?: string\n  ): RegionalPerformanceMetrics | undefined {\n    return this.performanceMetrics.get(region || this.currentRegion);\n  }\n\n  /**\n   * 全地域のパフォーマンスメトリクスの取得\n   */\n  getAllPerformanceMetrics(): RegionalPerformanceMetrics[] {\n    return Array.from(this.performanceMetrics.values());\n  }\n\n  /**\n   * コンプライアンスチェック結果の取得\n   */\n  getComplianceChecks(region?: string): ComplianceCheck[] {\n    return this.complianceChecks.get(region || this.currentRegion) || [];\n  }\n\n  /**\n   * 地域別DNS最適化の実行\n   */\n  async optimizeRegionalDNS(region?: string): Promise<{\n    region: string;\n    appliedStrategies: string[];\n    expectedImpact: any;\n    recommendations: string[];\n  }> {\n    const targetRegion = region || this.currentRegion;\n    const config = this.regionalConfigs.get(targetRegion);\n\n    if (!config) {\n      throw new Error(`地域設定が見つかりません: ${targetRegion}`);\n    }\n\n    const strategies = this.getOptimizationStrategies(targetRegion);\n    const metrics = this.performanceMetrics.get(targetRegion);\n\n    if (!metrics) {\n      throw new Error(\n        `パフォーマンスメトリクスが見つかりません: ${targetRegion}`\n      );\n    }\n\n    const appliedStrategies: string[] = [];\n    const expectedImpact = {\n      responseTime: 0,\n      uptime: 0,\n      throughput: 0,\n    };\n    const recommendations: string[] = [];\n\n    // 最適化戦略の適用\n    for (const strategy of strategies) {\n      if (this.shouldApplyStrategy(strategy, metrics, config)) {\n        appliedStrategies.push(strategy.strategy);\n\n        expectedImpact.responseTime += strategy.performanceImpact.responseTime;\n        expectedImpact.uptime += strategy.performanceImpact.uptime;\n        expectedImpact.throughput += strategy.performanceImpact.throughput;\n\n        recommendations.push(strategy.description);\n      }\n    }\n\n    this.logger.info(`地域別DNS最適化実行: ${targetRegion}`, {\n      appliedStrategies,\n      expectedImpact,\n    });\n\n    this.emit('optimization-completed', {\n      region: targetRegion,\n      appliedStrategies,\n      expectedImpact,\n      recommendations,\n    });\n\n    return {\n      region: targetRegion,\n      appliedStrategies,\n      expectedImpact,\n      recommendations,\n    };\n  }\n\n  /**\n   * 最適化戦略の適用判定\n   */\n  private shouldApplyStrategy(\n    strategy: DNSOptimizationStrategy,\n    metrics: RegionalPerformanceMetrics,\n    config: RegionalDNSConfig\n  ): boolean {\n    // パフォーマンスしきい値のチェック\n    if (metrics.averageResponseTime > config.performanceTargets.responseTime) {\n      return strategy.performanceImpact.responseTime < 0; // 応答時間改善\n    }\n\n    if (metrics.uptime < config.performanceTargets.uptime) {\n      return strategy.performanceImpact.uptime > 0; // 稼働時間改善\n    }\n\n    if (metrics.throughput < config.performanceTargets.throughput) {\n      return strategy.performanceImpact.throughput > 0; // スループット改善\n    }\n\n    return false;\n  }\n\n  /**\n   * 地域別コンプライアンスレポートの生成\n   */\n  generateComplianceReport(region?: string): {\n    region: string;\n    overallScore: number;\n    checks: ComplianceCheck[];\n    recommendations: string[];\n    riskAssessment: string;\n  } {\n    const targetRegion = region || this.currentRegion;\n    const checks = this.getComplianceChecks(targetRegion);\n    const metrics = this.getPerformanceMetrics(targetRegion);\n\n    const overallScore = metrics?.complianceScore || 0;\n    const highRiskChecks = checks.filter(\n      c => c.riskLevel === 'high' && c.status !== 'compliant'\n    );\n\n    const recommendations: string[] = [];\n    checks.forEach(check => {\n      if (check.status !== 'compliant') {\n        recommendations.push(...check.actionRequired);\n      }\n    });\n\n    const riskAssessment =\n      highRiskChecks.length > 0\n        ? 'High Risk: 重要なコンプライアンス要件が未対応です'\n        : overallScore < 80\n          ? 'Medium Risk: 一部のコンプライアンス要件の改善が必要です'\n          : 'Low Risk: コンプライアンス要件をおおむね満たしています';\n\n    return {\n      region: targetRegion,\n      overallScore,\n      checks,\n      recommendations,\n      riskAssessment,\n    };\n  }\n\n  /**\n   * 正常終了処理\n   */\n  async shutdown(): Promise<void> {\n    try {\n      // 監視インターバルの停止\n      this.monitoringIntervals.forEach((interval, key) => {\n        clearInterval(interval);\n        this.logger.info(`監視停止: ${key}`);\n      });\n      this.monitoringIntervals.clear();\n\n      // イベントリスナーの削除\n      this.removeAllListeners();\n\n      this.logger.info('RegionalDNSManager正常終了');\n    } catch (error) {\n      this.logger.error('RegionalDNSManager終了エラー:', error);\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/core/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[594,597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[594,597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2022,2025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2022,2025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2314,2317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2314,2317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * レポートシステム - 型定義\n */\n\nexport interface ReportTemplate {\n  id: string;\n  name: string;\n  description: string;\n  language: string;\n  category: 'security' | 'performance' | 'compliance' | 'summary' | 'custom';\n  sections: ReportSection[];\n  styling: ReportStyling;\n  metadata: {\n    version: string;\n    author: string;\n    created: Date;\n    lastModified: Date;\n    supportedLanguages: string[];\n    supportedFormats: string[];\n  };\n}\n\nexport interface ReportSection {\n  id: string;\n  title: string;\n  type: 'header' | 'text' | 'table' | 'chart' | 'list' | 'metrics' | 'summary';\n  content: any;\n  styling?: SectionStyling;\n  conditions?: ReportCondition[];\n  localization?: {\n    rtlSupport: boolean;\n    numberFormat: string;\n    dateFormat: string;\n    currencyFormat?: string;\n  };\n}\n\nexport interface ReportStyling {\n  theme: 'light' | 'dark' | 'corporate' | 'minimal';\n  colors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n    success: string;\n    warning: string;\n    error: string;\n    text: string;\n    background: string;\n  };\n  fonts: {\n    primary: string;\n    secondary: string;\n    monospace: string;\n    sizes: {\n      small: number;\n      medium: number;\n      large: number;\n      xlarge: number;\n    };\n  };\n  layout: {\n    pageSize: 'A4' | 'A3' | 'Letter' | 'Legal';\n    orientation: 'portrait' | 'landscape';\n    margins: {\n      top: number;\n      right: number;\n      bottom: number;\n      left: number;\n    };\n  };\n}\n\nexport interface SectionStyling {\n  alignment: 'left' | 'center' | 'right';\n  fontSize: number;\n  fontWeight: 'normal' | 'bold';\n  textColor: string;\n  backgroundColor?: string;\n  border?: {\n    width: number;\n    style: 'solid' | 'dashed' | 'dotted';\n    color: string;\n  };\n  spacing: {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n  };\n}\n\nexport interface ReportCondition {\n  field: string;\n  operator:\n    | 'equals'\n    | 'not_equals'\n    | 'contains'\n    | 'not_contains'\n    | 'greater_than'\n    | 'less_than';\n  value: any;\n  action: 'show' | 'hide' | 'highlight';\n}\n\nexport interface ReportData {\n  title: string;\n  subtitle?: string;\n  metadata: {\n    generated: Date;\n    generatedBy: string;\n    language: string;\n    region: string;\n    timezone: string;\n  };\n  sections: Array<{\n    id: string;\n    data: any;\n  }>;\n  summary?: {\n    totalItems: number;\n    highlights: string[];\n    recommendations: string[];\n  };\n}\n\nexport interface ReportOptions {\n  language: string;\n  format: 'pdf' | 'excel' | 'csv' | 'json' | 'html';\n  template?: string;\n  includeCharts?: boolean;\n  includeRawData?: boolean;\n  compressionLevel?: 'none' | 'low' | 'medium' | 'high';\n  encryptionKey?: string;\n  watermark?: {\n    text: string;\n    opacity: number;\n    position: 'center' | 'diagonal';\n  };\n  customHeaders?: { [key: string]: string };\n  customFooters?: { [key: string]: string };\n}\n\nexport interface ExportFormat {\n  format: 'pdf' | 'excel' | 'csv' | 'json' | 'html';\n  mimeType: string;\n  extension: string;\n  binary: boolean;\n  supportedFeatures: {\n    charts: boolean;\n    styling: boolean;\n    multipleSheets: boolean;\n    encryption: boolean;\n    compression: boolean;\n  };\n}\n\nexport interface GeneratedReport {\n  id: string;\n  title: string;\n  format: string;\n  language: string;\n  size: number;\n  path?: string;\n  content?: Buffer | string;\n  metadata: {\n    generated: Date;\n    generatedBy: string;\n    duration: number;\n    templateId: string;\n    options: ReportOptions;\n  };\n  checksum: string;\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/exporters/excel-exporter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GeneratedReport' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[350,353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[350,353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1390,1393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1390,1393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1396,1399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1396,1399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1730,1733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1730,1733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2948,2951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2948,2951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4619,4622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4619,4622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'template' is defined but never used. Allowed unused args must match /^_/u.","line":192,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4980,4983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4980,4983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":208,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5078,5081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5078,5081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5279,5282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5279,5282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5358,5361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5358,5361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5735,5738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5735,5738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5926,5929],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5926,5929],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'template' is defined but never used. Allowed unused args must match /^_/u.","line":242,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":242,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6555,6558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6555,6558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":266,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6566,6569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6566,6569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6999,7002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6999,7002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7041,7044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7041,7044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7084,7087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7084,7087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":319,"column":24,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":319,"endColumn":25,"suggestions":[{"messageId":"removeEscape","fix":{"range":[7811,7812],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[7811,7811],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Excelエクスポーター\n */\n\nimport type {\n  ReportTemplate,\n  ReportSection,\n  GeneratedReport,\n} from '../core/types.js';\n\nexport interface ExcelExporterOptions {\n  includeRawData?: boolean;\n  autoFilter?: boolean;\n  freezePanes?: boolean;\n  conditionalFormatting?: Array<{\n    range: string;\n    type: 'dataBar' | 'colorScale' | 'iconSet';\n    rules: any;\n  }>;\n  chartSheets?: boolean;\n}\n\nexport class ExcelExporter {\n  /**\n   * Excelへのエクスポート\n   */\n  async export(\n    template: ReportTemplate,\n    sections: ReportSection[],\n    data: any,\n    options?: ExcelExporterOptions\n  ): Promise<Buffer> {\n    // 実際の実装では、ExcelJSなどのライブラリを使用\n    const workbook = this.createWorkbook(template, data);\n\n    // サマリーシートの作成\n    this.createSummarySheet(workbook, template, sections, data);\n\n    // セクション別シートの作成\n    for (const section of sections) {\n      if (section.type === 'table' || section.type === 'metrics') {\n        this.createDataSheet(workbook, section, template);\n      }\n    }\n\n    // チャートシートの作成\n    if (options?.chartSheets) {\n      this.createChartSheets(workbook, sections, template);\n    }\n\n    // 生データシートの作成\n    if (options?.includeRawData) {\n      this.createRawDataSheet(workbook, data);\n    }\n\n    // Buffer.from は実際のExcelバイナリデータに置き換える\n    return Buffer.from(JSON.stringify(workbook), 'utf-8');\n  }\n\n  /**\n   * ワークブックの作成\n   */\n  private createWorkbook(template: ReportTemplate, data: any): any {\n    return {\n      properties: {\n        title: data.title,\n        subject: template.description,\n        author: data.metadata.generatedBy,\n        created: new Date(),\n      },\n      sheets: [],\n      styles: this.createStyles(template),\n    };\n  }\n\n  /**\n   * スタイルの作成\n   */\n  private createStyles(template: ReportTemplate): any {\n    return {\n      header: {\n        font: {\n          name: template.styling.fonts.primary,\n          size: template.styling.fonts.sizes.large,\n          bold: true,\n          color: { argb: this.colorToARGB(template.styling.colors.primary) },\n        },\n        fill: {\n          type: 'pattern',\n          pattern: 'solid',\n          fgColor: { argb: 'FFFFFFFF' },\n        },\n        alignment: {\n          horizontal: 'center',\n          vertical: 'middle',\n        },\n      },\n      subheader: {\n        font: {\n          name: template.styling.fonts.primary,\n          size: template.styling.fonts.sizes.medium,\n          bold: true,\n          color: { argb: this.colorToARGB(template.styling.colors.text) },\n        },\n      },\n      data: {\n        font: {\n          name: template.styling.fonts.primary,\n          size: template.styling.fonts.sizes.small,\n          color: { argb: this.colorToARGB(template.styling.colors.text) },\n        },\n        alignment: {\n          horizontal: 'left',\n          vertical: 'middle',\n        },\n      },\n    };\n  }\n\n  /**\n   * サマリーシートの作成\n   */\n  private createSummarySheet(\n    workbook: any,\n    template: ReportTemplate,\n    sections: ReportSection[],\n    data: any\n  ): void {\n    const sheet = {\n      name: 'Summary',\n      data: [],\n      merges: [],\n      styles: [],\n    };\n\n    // タイトル\n    sheet.data.push([data.title]);\n    sheet.merges.push({ start: 'A1', end: 'F1' });\n    sheet.styles.push({ cell: 'A1', style: 'header' });\n\n    // サブタイトル\n    if (data.subtitle) {\n      sheet.data.push([data.subtitle]);\n      sheet.merges.push({ start: 'A2', end: 'F2' });\n      sheet.styles.push({ cell: 'A2', style: 'subheader' });\n    }\n\n    // メタデータ\n    sheet.data.push([]);\n    sheet.data.push(['Generated:', data.metadata.generated]);\n    sheet.data.push(['Generated By:', data.metadata.generatedBy]);\n    sheet.data.push(['Language:', data.metadata.language]);\n    sheet.data.push(['Region:', data.metadata.region]);\n\n    // サマリー情報\n    if (data.summary) {\n      sheet.data.push([]);\n      sheet.data.push(['Summary']);\n      sheet.styles.push({\n        cell: `A${sheet.data.length}`,\n        style: 'subheader',\n      });\n\n      sheet.data.push(['Total Items:', data.summary.totalItems]);\n\n      if (data.summary.highlights.length > 0) {\n        sheet.data.push([]);\n        sheet.data.push(['Highlights:']);\n        data.summary.highlights.forEach((highlight: string) => {\n          sheet.data.push(['', highlight]);\n        });\n      }\n\n      if (data.summary.recommendations.length > 0) {\n        sheet.data.push([]);\n        sheet.data.push(['Recommendations:']);\n        data.summary.recommendations.forEach((rec: string, index: number) => {\n          sheet.data.push([`${index + 1}.`, rec]);\n        });\n      }\n    }\n\n    workbook.sheets.push(sheet);\n  }\n\n  /**\n   * データシートの作成\n   */\n  private createDataSheet(\n    workbook: any,\n    section: ReportSection,\n    template: ReportTemplate\n  ): void {\n    const sheet = {\n      name: this.sanitizeSheetName(section.title),\n      data: [],\n      styles: [],\n      autoFilter: false,\n      freezePanes: { row: 2, column: 0 },\n    };\n\n    if (section.type === 'table') {\n      // ヘッダー行\n      const headers = section.content.columns.map((col: any) => col.label);\n      sheet.data.push(headers);\n\n      // ヘッダーのスタイル\n      headers.forEach((_: any, index: number) => {\n        const cell = this.getColumnLetter(index) + '1';\n        sheet.styles.push({ cell, style: 'header' });\n      });\n\n      // データ行\n      section.content.rows.forEach((row: any) => {\n        const rowData = section.content.columns.map(\n          (col: any) => row[col.key] || ''\n        );\n        sheet.data.push(rowData);\n      });\n\n      sheet.autoFilter = true;\n    } else if (section.type === 'metrics') {\n      // メトリクスの場合\n      sheet.data.push(['Metric', 'Value']);\n      sheet.styles.push({ cell: 'A1', style: 'header' });\n      sheet.styles.push({ cell: 'B1', style: 'header' });\n\n      section.content.forEach((metric: any) => {\n        sheet.data.push([metric.label, metric.value]);\n      });\n    }\n\n    workbook.sheets.push(sheet);\n  }\n\n  /**\n   * チャートシートの作成\n   */\n  private createChartSheets(\n    workbook: any,\n    sections: ReportSection[],\n    template: ReportTemplate\n  ): void {\n    const chartSections = sections.filter(s => s.type === 'chart');\n\n    for (const section of chartSections) {\n      const sheet = {\n        name: this.sanitizeSheetName(`Chart - ${section.title}`),\n        charts: [\n          {\n            type: section.content.type,\n            data: section.content.data,\n            options: section.content.options,\n            position: { from: 'A1', to: 'M20' },\n          },\n        ],\n      };\n\n      workbook.sheets.push(sheet);\n    }\n  }\n\n  /**\n   * 生データシートの作成\n   */\n  private createRawDataSheet(workbook: any, data: any): void {\n    const sheet = {\n      name: 'Raw Data',\n      data: [],\n    };\n\n    // JSONデータを行列形式に変換\n    const flattenedData = this.flattenObject(data);\n\n    // ヘッダー\n    sheet.data.push(['Key', 'Value']);\n\n    // データ\n    for (const [key, value] of Object.entries(flattenedData)) {\n      sheet.data.push([key, String(value)]);\n    }\n\n    workbook.sheets.push(sheet);\n  }\n\n  /**\n   * オブジェクトのフラット化\n   */\n  private flattenObject(obj: any, prefix: string = ''): Record<string, any> {\n    const flattened: Record<string, any> = {};\n\n    for (const [key, value] of Object.entries(obj)) {\n      const newKey = prefix ? `${prefix}.${key}` : key;\n\n      if (value === null || value === undefined) {\n        flattened[newKey] = '';\n      } else if (\n        typeof value === 'object' &&\n        !Array.isArray(value) &&\n        !(value instanceof Date)\n      ) {\n        Object.assign(flattened, this.flattenObject(value, newKey));\n      } else if (Array.isArray(value)) {\n        flattened[newKey] = value.join(', ');\n      } else {\n        flattened[newKey] = value;\n      }\n    }\n\n    return flattened;\n  }\n\n  /**\n   * シート名のサニタイズ\n   */\n  private sanitizeSheetName(name: string): string {\n    // Excelのシート名制限に対応\n    return name\n      .replace(/[\\\\/:*?\\[\\]]/g, '') // 禁止文字を削除\n      .substring(0, 31); // 最大31文字\n  }\n\n  /**\n   * 列番号を列文字に変換\n   */\n  private getColumnLetter(index: number): string {\n    let letter = '';\n    while (index >= 0) {\n      letter = String.fromCharCode(65 + (index % 26)) + letter;\n      index = Math.floor(index / 26) - 1;\n    }\n    return letter;\n  }\n\n  /**\n   * 色をARGB形式に変換\n   */\n  private colorToARGB(hex: string): string {\n    // #RRGGBBをFFRRGGBBに変換\n    return 'FF' + hex.replace('#', '').toUpperCase();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/exporters/pdf-exporter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GeneratedReport' is defined but never used. Allowed unused vars must match /^_/u.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[628,631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[628,631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1251,1254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1251,1254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":64,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1260,1263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1260,1263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2288,2291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2288,2291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2499,2502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2499,2502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2837,2840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2837,2840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3211,3214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3211,3214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3237,3240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3237,3240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4907,4910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4907,4910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5423,5426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5423,5426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'content' is defined but never used. Allowed unused args must match /^_/u.","line":249,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5437,5440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5437,5440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5585,5588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5585,5588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6016,6019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6016,6019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":276,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":276,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6033,6036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6033,6036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * PDFエクスポーター\n */\n\nimport type {\n  ReportTemplate,\n  ReportSection,\n  GeneratedReport,\n} from '../core/types.js';\n\nexport interface PDFExporterOptions {\n  watermark?: {\n    text: string;\n    opacity: number;\n    position: 'center' | 'diagonal';\n  };\n  encryption?: {\n    userPassword?: string;\n    ownerPassword?: string;\n    permissions?: {\n      printing: boolean;\n      copying: boolean;\n      modifying: boolean;\n    };\n  };\n  compression?: boolean;\n  embedFonts?: boolean;\n}\n\nexport class PDFExporter {\n  /**\n   * PDFへのエクスポート\n   */\n  async export(\n    template: ReportTemplate,\n    sections: ReportSection[],\n    data: any,\n    options?: PDFExporterOptions\n  ): Promise<Buffer> {\n    // 実際の実装では、PDFライブラリ（例：PDFKit、jsPDF）を使用\n    // ここでは簡易的な実装を示す\n\n    const pdfContent = this.generatePDFContent(template, sections, data);\n\n    if (options?.watermark) {\n      this.addWatermark(pdfContent, options.watermark);\n    }\n\n    if (options?.encryption) {\n      this.encryptPDF(pdfContent, options.encryption);\n    }\n\n    // Buffer.from は実際のPDFバイナリデータに置き換える\n    return Buffer.from(JSON.stringify(pdfContent), 'utf-8');\n  }\n\n  /**\n   * PDFコンテンツの生成\n   */\n  private generatePDFContent(\n    template: ReportTemplate,\n    sections: ReportSection[],\n    data: any\n  ): any {\n    // PDFドキュメントの構造を作成\n    const pdf = {\n      metadata: {\n        title: data.title,\n        author: data.metadata.generatedBy,\n        subject: template.description,\n        creator: 'DNSweeper',\n        creationDate: new Date(),\n      },\n      pageSize: template.styling.layout.pageSize,\n      orientation: template.styling.layout.orientation,\n      margins: template.styling.layout.margins,\n      pages: [],\n    };\n\n    // セクションをページに変換\n    let currentPage: any = this.createPage(template);\n\n    for (const section of sections) {\n      const sectionContent = this.renderSection(section, template);\n\n      // ページに収まるかチェック（簡易版）\n      if (this.shouldStartNewPage(currentPage, sectionContent)) {\n        pdf.pages.push(currentPage);\n        currentPage = this.createPage(template);\n      }\n\n      currentPage.content.push(sectionContent);\n    }\n\n    if (currentPage.content.length > 0) {\n      pdf.pages.push(currentPage);\n    }\n\n    return pdf;\n  }\n\n  /**\n   * ページの作成\n   */\n  private createPage(template: ReportTemplate): any {\n    return {\n      content: [],\n      header: this.createHeader(template),\n      footer: this.createFooter(template),\n    };\n  }\n\n  /**\n   * ヘッダーの作成\n   */\n  private createHeader(template: ReportTemplate): any {\n    return {\n      height: 50,\n      content: [\n        {\n          type: 'text',\n          text: template.name,\n          style: {\n            fontSize: 12,\n            color: template.styling.colors.secondary,\n          },\n        },\n      ],\n    };\n  }\n\n  /**\n   * フッターの作成\n   */\n  private createFooter(template: ReportTemplate): any {\n    return {\n      height: 30,\n      content: [\n        {\n          type: 'pageNumber',\n          alignment: 'center',\n          style: {\n            fontSize: 10,\n            color: template.styling.colors.secondary,\n          },\n        },\n      ],\n    };\n  }\n\n  /**\n   * セクションのレンダリング\n   */\n  private renderSection(section: ReportSection, template: ReportTemplate): any {\n    const rendered: any = {\n      type: section.type,\n      content: [],\n    };\n\n    // タイトルの追加\n    if (section.title) {\n      rendered.content.push({\n        type: 'heading',\n        text: section.title,\n        level: section.type === 'header' ? 1 : 2,\n        style: this.getSectionStyle(section, template),\n      });\n    }\n\n    // コンテンツタイプ別のレンダリング\n    switch (section.type) {\n      case 'text':\n        rendered.content.push({\n          type: 'paragraph',\n          text: section.content,\n          style: this.getSectionStyle(section, template),\n        });\n        break;\n\n      case 'table':\n        rendered.content.push({\n          type: 'table',\n          data: section.content,\n          style: {\n            ...this.getSectionStyle(section, template),\n            headerBackground: template.styling.colors.primary,\n            headerColor: '#ffffff',\n          },\n        });\n        break;\n\n      case 'list':\n        rendered.content.push({\n          type: section.content.ordered ? 'ol' : 'ul',\n          items: section.content.items,\n          style: this.getSectionStyle(section, template),\n        });\n        break;\n\n      case 'metrics':\n        rendered.content.push({\n          type: 'metrics',\n          data: section.content,\n          style: this.getSectionStyle(section, template),\n        });\n        break;\n\n      case 'chart':\n        rendered.content.push({\n          type: 'image',\n          src: 'chart-placeholder', // 実際はチャートを画像に変換\n          width: 500,\n          height: 300,\n        });\n        break;\n    }\n\n    return rendered;\n  }\n\n  /**\n   * セクションスタイルの取得\n   */\n  private getSectionStyle(\n    section: ReportSection,\n    template: ReportTemplate\n  ): any {\n    const baseStyle = {\n      fontSize: template.styling.fonts.sizes.medium,\n      color: template.styling.colors.text,\n      fontFamily: template.styling.fonts.primary,\n    };\n\n    if (section.styling) {\n      return {\n        ...baseStyle,\n        ...section.styling,\n        fontSize: section.styling.fontSize || baseStyle.fontSize,\n        color: section.styling.textColor || baseStyle.color,\n      };\n    }\n\n    return baseStyle;\n  }\n\n  /**\n   * 新しいページを開始すべきかチェック\n   */\n  private shouldStartNewPage(page: any, content: any): boolean {\n    // 簡易的な実装 - 実際は内容の高さを計算\n    return page.content.length > 10;\n  }\n\n  /**\n   * ウォーターマークの追加\n   */\n  private addWatermark(\n    pdf: any,\n    watermark: { text: string; opacity: number; position: string }\n  ): void {\n    for (const page of pdf.pages) {\n      page.watermark = {\n        text: watermark.text,\n        opacity: watermark.opacity,\n        position: watermark.position,\n        fontSize: 48,\n        color: '#cccccc',\n        rotation: watermark.position === 'diagonal' ? -45 : 0,\n      };\n    }\n  }\n\n  /**\n   * PDFの暗号化\n   */\n  private encryptPDF(pdf: any, encryption: any): void {\n    pdf.security = {\n      userPassword: encryption.userPassword,\n      ownerPassword: encryption.ownerPassword,\n      permissions: encryption.permissions || {\n        printing: true,\n        copying: false,\n        modifying: false,\n      },\n    };\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/generators/report-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4150,4153],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4150,4153],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":169,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4174,4177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4174,4177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4798,4801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4798,4801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5991,5994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5991,5994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6544,6547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6544,6547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6569,6572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6569,6572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":292,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6884,6887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6884,6887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6929,6932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6929,6932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7571,7574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7571,7574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7778,7781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7778,7781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7815,7818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7815,7818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8354,8357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8354,8357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8360,8363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8360,8363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":358,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8668,8671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8668,8671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8706,8709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8706,8709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8971,8974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8971,8974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8977,8980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8977,8980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9250,9253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9250,9253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":385,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":385,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9256,9259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9256,9259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":387,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":387,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9341,9344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9341,9344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9793,9796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9793,9796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9799,9802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9799,9802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":411,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9963,9966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9963,9966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":420,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":420,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10121,10124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10121,10124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":445,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":445,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10818,10821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10818,10821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":468,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":468,"endColumn":12}],"suppressedMessages":[],"errorCount":26,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * レポート生成エンジン\n */\n\nimport { createHash } from 'crypto';\nimport { EventEmitter } from 'events';\n\nimport type { I18nManager } from '../../i18n-manager.js';\nimport type { Logger } from '../../logger.js';\nimport type {\n  ReportTemplate,\n  ReportData,\n  ReportOptions,\n  GeneratedReport,\n  ReportSection,\n} from '../core/types.js';\n\nexport class ReportGenerator extends EventEmitter {\n  private logger: Logger;\n  private i18nManager: I18nManager;\n  private generationQueue: Array<{\n    id: string;\n    template: ReportTemplate;\n    data: ReportData;\n    options: ReportOptions;\n  }> = [];\n  private isGenerating = false;\n\n  constructor(logger: Logger, i18nManager: I18nManager) {\n    super();\n    this.logger = logger;\n    this.i18nManager = i18nManager;\n  }\n\n  /**\n   * レポートの生成\n   */\n  async generate(\n    template: ReportTemplate,\n    data: ReportData,\n    options: ReportOptions\n  ): Promise<GeneratedReport> {\n    const startTime = Date.now();\n    const reportId = this.generateReportId();\n\n    this.logger.info('レポート生成を開始', {\n      reportId,\n      templateId: template.id,\n      language: options.language,\n      format: options.format,\n    });\n\n    try {\n      // 言語の検証\n      if (!template.metadata.supportedLanguages.includes(options.language)) {\n        throw new Error(`Unsupported language: ${options.language}`);\n      }\n\n      // フォーマットの検証\n      if (!template.metadata.supportedFormats.includes(options.format)) {\n        throw new Error(`Unsupported format: ${options.format}`);\n      }\n\n      // データのローカライズ\n      const localizedData = await this.localizeData(data, options.language);\n\n      // セクションの処理\n      const processedSections = await this.processSections(\n        template.sections,\n        localizedData,\n        options\n      );\n\n      // コンテンツの生成\n      const content = await this.generateContent(\n        template,\n        processedSections,\n        localizedData,\n        options\n      );\n\n      // レポートオブジェクトの作成\n      const report: GeneratedReport = {\n        id: reportId,\n        title: localizedData.title,\n        format: options.format,\n        language: options.language,\n        size: this.calculateSize(content),\n        content,\n        metadata: {\n          generated: new Date(),\n          generatedBy: data.metadata.generatedBy,\n          duration: Date.now() - startTime,\n          templateId: template.id,\n          options,\n        },\n        checksum: this.generateChecksum(content),\n      };\n\n      this.logger.info('レポート生成完了', {\n        reportId,\n        duration: report.metadata.duration,\n        size: report.size,\n      });\n\n      this.emit('report:generated', report);\n      return report;\n    } catch (error) {\n      this.logger.error('レポート生成エラー', {\n        reportId,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * データのローカライズ\n   */\n  private async localizeData(\n    data: ReportData,\n    language: string\n  ): Promise<ReportData> {\n    // 言語を切り替え\n    const previousLanguage = this.i18nManager.getCurrentLanguage();\n    if (language !== previousLanguage) {\n      await this.i18nManager.changeLanguage(language);\n    }\n\n    // タイトルとサブタイトルの翻訳\n    const localizedData: ReportData = {\n      ...data,\n      title: this.i18nManager.translate(data.title, 'reports'),\n      subtitle: data.subtitle\n        ? this.i18nManager.translate(data.subtitle, 'reports')\n        : undefined,\n    };\n\n    // セクションデータのローカライズ\n    localizedData.sections = data.sections.map(section => ({\n      ...section,\n      data: this.localizeObject(section.data, language),\n    }));\n\n    // サマリーのローカライズ\n    if (data.summary) {\n      localizedData.summary = {\n        ...data.summary,\n        highlights: data.summary.highlights.map(h =>\n          this.i18nManager.translate(h, 'reports')\n        ),\n        recommendations: data.summary.recommendations.map(r =>\n          this.i18nManager.translate(r, 'reports')\n        ),\n      };\n    }\n\n    // 言語を元に戻す\n    if (language !== previousLanguage) {\n      await this.i18nManager.changeLanguage(previousLanguage);\n    }\n\n    return localizedData;\n  }\n\n  /**\n   * オブジェクトのローカライズ\n   */\n  private localizeObject(obj: any, language: string): any {\n    if (typeof obj === 'string') {\n      // 翻訳キーの場合は翻訳\n      if (obj.startsWith('i18n:')) {\n        const key = obj.substring(5);\n        return this.i18nManager.translate(key, 'reports');\n      }\n      return obj;\n    }\n\n    if (typeof obj === 'number') {\n      // 数値のフォーマット\n      return this.i18nManager.formatNumber(obj);\n    }\n\n    if (obj instanceof Date) {\n      // 日付のフォーマット\n      return this.i18nManager.formatDateTime(obj);\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.localizeObject(item, language));\n    }\n\n    if (typeof obj === 'object' && obj !== null) {\n      const localized: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        localized[key] = this.localizeObject(value, language);\n      }\n      return localized;\n    }\n\n    return obj;\n  }\n\n  /**\n   * セクションの処理\n   */\n  private async processSections(\n    sections: ReportSection[],\n    data: ReportData,\n    options: ReportOptions\n  ): Promise<ReportSection[]> {\n    const processedSections: ReportSection[] = [];\n\n    for (const section of sections) {\n      // 条件の評価\n      if (section.conditions) {\n        const shouldInclude = this.evaluateConditions(section.conditions, data);\n        if (!shouldInclude) {\n          continue;\n        }\n      }\n\n      // セクションデータの取得\n      const sectionData = this.getSectionData(section, data);\n\n      // ローカライズ設定の適用\n      const processedSection: ReportSection = {\n        ...section,\n        title: this.i18nManager.translate(section.title, 'reports'),\n        content: this.processContent(section, sectionData, options),\n      };\n\n      processedSections.push(processedSection);\n    }\n\n    return processedSections;\n  }\n\n  /**\n   * 条件の評価\n   */\n  private evaluateConditions(\n    conditions: Array<{\n      field: string;\n      operator: string;\n      value: any;\n      action: string;\n    }>,\n    data: ReportData\n  ): boolean {\n    for (const condition of conditions) {\n      const fieldValue = this.getFieldValue(data, condition.field);\n      const result = this.compareValues(\n        fieldValue,\n        condition.operator,\n        condition.value\n      );\n\n      if (!result && condition.action === 'show') {\n        return false;\n      }\n      if (result && condition.action === 'hide') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * フィールド値の取得\n   */\n  private getFieldValue(data: any, fieldPath: string): any {\n    const parts = fieldPath.split('.');\n    let value = data;\n\n    for (const part of parts) {\n      if (value && typeof value === 'object') {\n        value = value[part];\n      } else {\n        return undefined;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * 値の比較\n   */\n  private compareValues(\n    value: any,\n    operator: string,\n    compareValue: any\n  ): boolean {\n    switch (operator) {\n      case 'equals':\n        return value === compareValue;\n      case 'not_equals':\n        return value !== compareValue;\n      case 'contains':\n        return String(value).includes(String(compareValue));\n      case 'not_contains':\n        return !String(value).includes(String(compareValue));\n      case 'greater_than':\n        return Number(value) > Number(compareValue);\n      case 'less_than':\n        return Number(value) < Number(compareValue);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * セクションデータの取得\n   */\n  private getSectionData(section: ReportSection, data: ReportData): any {\n    const sectionData = data.sections.find(s => s.id === section.id);\n    return sectionData?.data || {};\n  }\n\n  /**\n   * コンテンツの処理\n   */\n  private processContent(\n    section: ReportSection,\n    data: any,\n    options: ReportOptions\n  ): any {\n    switch (section.type) {\n      case 'table':\n        return this.processTableContent(section, data);\n      case 'chart':\n        return options.includeCharts\n          ? this.processChartContent(section, data)\n          : null;\n      case 'metrics':\n        return this.processMetricsContent(section, data);\n      case 'list':\n        return this.processListContent(section, data);\n      default:\n        return section.content;\n    }\n  }\n\n  /**\n   * テーブルコンテンツの処理\n   */\n  private processTableContent(section: ReportSection, data: any): any {\n    const columns = section.content.columns || [];\n    const rows = Array.isArray(data) ? data : data.rows || [];\n\n    return {\n      columns: columns.map((col: string) => ({\n        key: col,\n        label: this.i18nManager.translate(`column.${col}`, 'reports'),\n      })),\n      rows: rows.map((row: any) => {\n        const processedRow: any = {};\n        for (const col of columns) {\n          processedRow[col] = this.formatCellValue(row[col], col);\n        }\n        return processedRow;\n      }),\n    };\n  }\n\n  /**\n   * チャートコンテンツの処理\n   */\n  private processChartContent(section: ReportSection, data: any): any {\n    return {\n      type: section.content.chartType,\n      data: data,\n      options: {\n        title: section.title,\n        ...section.content.options,\n      },\n    };\n  }\n\n  /**\n   * メトリクスコンテンツの処理\n   */\n  private processMetricsContent(section: ReportSection, data: any): any {\n    const metrics = section.content.metrics || [];\n    const processedMetrics: any[] = [];\n\n    for (const metric of metrics) {\n      const value = data[metric];\n      if (value !== undefined) {\n        processedMetrics.push({\n          key: metric,\n          label: this.i18nManager.translate(`metric.${metric}`, 'reports'),\n          value: this.formatMetricValue(value, metric),\n        });\n      }\n    }\n\n    return processedMetrics;\n  }\n\n  /**\n   * リストコンテンツの処理\n   */\n  private processListContent(section: ReportSection, data: any): any {\n    const items = Array.isArray(data) ? data : data.items || [];\n\n    return {\n      ordered: section.content.ordered || false,\n      items: items.map((item: any) =>\n        typeof item === 'string' ? item : item.text || String(item)\n      ),\n    };\n  }\n\n  /**\n   * セル値のフォーマット\n   */\n  private formatCellValue(value: any, column: string): string {\n    if (value === null || value === undefined) {\n      return '-';\n    }\n\n    // 特定の列に対する特別なフォーマット\n    if (column.includes('time') || column.includes('date')) {\n      return this.i18nManager.formatDateTime(value);\n    }\n    if (column.includes('size') || column.includes('bytes')) {\n      return this.i18nManager.formatFileSize(value);\n    }\n    if (column.includes('percent') || column.includes('rate')) {\n      return this.i18nManager.formatPercentage(value / 100);\n    }\n    if (typeof value === 'number') {\n      return this.i18nManager.formatNumber(value);\n    }\n\n    return String(value);\n  }\n\n  /**\n   * メトリクス値のフォーマット\n   */\n  private formatMetricValue(value: any, metric: string): string {\n    if (metric.includes('time')) {\n      return `${this.i18nManager.formatNumber(value)} ms`;\n    }\n    if (metric.includes('rate') || metric.includes('percent')) {\n      return this.i18nManager.formatPercentage(value / 100);\n    }\n    if (metric.includes('size') || metric.includes('bytes')) {\n      return this.i18nManager.formatFileSize(value);\n    }\n    if (typeof value === 'number') {\n      return this.i18nManager.formatNumber(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * コンテンツの生成（フォーマット別）\n   */\n  private async generateContent(\n    template: ReportTemplate,\n    sections: ReportSection[],\n    data: ReportData,\n    options: ReportOptions\n  ): Promise<Buffer | string> {\n    // この例では簡単なJSON形式を返す\n    // 実際の実装では、フォーマット別のエクスポーターを使用\n    const content = {\n      template: template.id,\n      metadata: data.metadata,\n      title: data.title,\n      subtitle: data.subtitle,\n      sections: sections,\n      summary: data.summary,\n      generated: new Date(),\n    };\n\n    return JSON.stringify(content, null, 2);\n  }\n\n  /**\n   * レポートIDの生成\n   */\n  private generateReportId(): string {\n    return `report-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * サイズの計算\n   */\n  private calculateSize(content: Buffer | string): number {\n    return Buffer.isBuffer(content)\n      ? content.length\n      : Buffer.byteLength(content, 'utf-8');\n  }\n\n  /**\n   * チェックサムの生成\n   */\n  private generateChecksum(content: Buffer | string): string {\n    const hash = createHash('sha256');\n    hash.update(content);\n    return hash.digest('hex');\n  }\n\n  /**\n   * レポート生成のキューイング\n   */\n  async queueGeneration(\n    template: ReportTemplate,\n    data: ReportData,\n    options: ReportOptions\n  ): Promise<string> {\n    const id = this.generateReportId();\n\n    this.generationQueue.push({\n      id,\n      template,\n      data,\n      options,\n    });\n\n    this.emit('report:queued', { id, position: this.generationQueue.length });\n\n    // キューの処理を開始\n    if (!this.isGenerating) {\n      this.processQueue();\n    }\n\n    return id;\n  }\n\n  /**\n   * キューの処理\n   */\n  private async processQueue(): Promise<void> {\n    if (this.isGenerating || this.generationQueue.length === 0) {\n      return;\n    }\n\n    this.isGenerating = true;\n\n    while (this.generationQueue.length > 0) {\n      const job = this.generationQueue.shift()!;\n\n      try {\n        await this.generate(job.template, job.data, job.options);\n      } catch (error) {\n        this.emit('report:error', {\n          id: job.id,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    this.isGenerating = false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/reports/templates/template-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'join' is defined but never used. Allowed unused vars must match /^_/u.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ReportSection' is defined but never used. Allowed unused vars must match /^_/u.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * レポートテンプレート管理\n */\n\nimport { EventEmitter } from 'events';\nimport { readFileSync, writeFileSync, existsSync } from 'fs';\nimport { join } from 'path';\n\nimport type {\n  ReportTemplate,\n  ReportSection,\n  ReportStyling,\n} from '../core/types.js';\n\nexport class TemplateManager extends EventEmitter {\n  private templates: Map<string, ReportTemplate> = new Map();\n  private defaultTemplates: Map<string, ReportTemplate>;\n\n  constructor() {\n    super();\n    this.defaultTemplates = this.initializeDefaultTemplates();\n    this.loadTemplates();\n  }\n\n  /**\n   * デフォルトテンプレートの初期化\n   */\n  private initializeDefaultTemplates(): Map<string, ReportTemplate> {\n    const templates = new Map<string, ReportTemplate>();\n\n    // セキュリティレポートテンプレート\n    templates.set('security-basic', {\n      id: 'security-basic',\n      name: 'Basic Security Report',\n      description: 'Standard security analysis report',\n      language: 'en',\n      category: 'security',\n      sections: [\n        {\n          id: 'header',\n          title: 'Security Analysis Report',\n          type: 'header',\n          content: {\n            level: 1,\n            showDate: true,\n            showLogo: true,\n          },\n        },\n        {\n          id: 'summary',\n          title: 'Executive Summary',\n          type: 'summary',\n          content: {\n            fields: ['totalThreats', 'criticalIssues', 'recommendations'],\n          },\n        },\n        {\n          id: 'threats',\n          title: 'Detected Threats',\n          type: 'table',\n          content: {\n            columns: [\n              'domain',\n              'threatType',\n              'severity',\n              'confidence',\n              'action',\n            ],\n          },\n        },\n        {\n          id: 'recommendations',\n          title: 'Recommendations',\n          type: 'list',\n          content: {\n            ordered: true,\n            prioritized: true,\n          },\n        },\n      ],\n      styling: this.getDefaultStyling('corporate'),\n      metadata: {\n        version: '1.0.0',\n        author: 'DNSweeper',\n        created: new Date(),\n        lastModified: new Date(),\n        supportedLanguages: ['en', 'ja', 'zh', 'es', 'fr', 'de'],\n        supportedFormats: ['pdf', 'excel', 'html'],\n      },\n    });\n\n    // パフォーマンスレポートテンプレート\n    templates.set('performance-basic', {\n      id: 'performance-basic',\n      name: 'Basic Performance Report',\n      description: 'DNS performance analysis report',\n      language: 'en',\n      category: 'performance',\n      sections: [\n        {\n          id: 'header',\n          title: 'Performance Analysis Report',\n          type: 'header',\n          content: {\n            level: 1,\n            showDate: true,\n            showLogo: true,\n          },\n        },\n        {\n          id: 'metrics',\n          title: 'Key Metrics',\n          type: 'metrics',\n          content: {\n            metrics: [\n              'avgResponseTime',\n              'successRate',\n              'errorRate',\n              'throughput',\n            ],\n          },\n        },\n        {\n          id: 'chart',\n          title: 'Response Time Trends',\n          type: 'chart',\n          content: {\n            chartType: 'line',\n            dataSource: 'responseTimes',\n            timeRange: '24h',\n          },\n        },\n        {\n          id: 'details',\n          title: 'Detailed Analysis',\n          type: 'table',\n          content: {\n            columns: ['domain', 'avgTime', 'minTime', 'maxTime', 'successRate'],\n          },\n        },\n      ],\n      styling: this.getDefaultStyling('minimal'),\n      metadata: {\n        version: '1.0.0',\n        author: 'DNSweeper',\n        created: new Date(),\n        lastModified: new Date(),\n        supportedLanguages: ['en', 'ja', 'zh', 'es', 'fr', 'de'],\n        supportedFormats: ['pdf', 'excel', 'html', 'json'],\n      },\n    });\n\n    // コンプライアンスレポートテンプレート\n    templates.set('compliance-gdpr', {\n      id: 'compliance-gdpr',\n      name: 'GDPR Compliance Report',\n      description: 'GDPR compliance audit report',\n      language: 'en',\n      category: 'compliance',\n      sections: [\n        {\n          id: 'header',\n          title: 'GDPR Compliance Audit Report',\n          type: 'header',\n          content: {\n            level: 1,\n            showDate: true,\n            showLogo: true,\n            disclaimer: true,\n          },\n        },\n        {\n          id: 'summary',\n          title: 'Compliance Summary',\n          type: 'summary',\n          content: {\n            fields: ['complianceScore', 'violations', 'recommendations'],\n          },\n        },\n        {\n          id: 'dataMapping',\n          title: 'Data Processing Activities',\n          type: 'table',\n          content: {\n            columns: [\n              'domain',\n              'dataType',\n              'purpose',\n              'legalBasis',\n              'retention',\n            ],\n          },\n        },\n        {\n          id: 'violations',\n          title: 'Identified Violations',\n          type: 'table',\n          content: {\n            columns: ['issue', 'severity', 'gdprArticle', 'recommendation'],\n          },\n          conditions: [\n            {\n              field: 'violations',\n              operator: 'greater_than',\n              value: 0,\n              action: 'show',\n            },\n          ],\n        },\n      ],\n      styling: this.getDefaultStyling('corporate'),\n      metadata: {\n        version: '1.0.0',\n        author: 'DNSweeper',\n        created: new Date(),\n        lastModified: new Date(),\n        supportedLanguages: ['en', 'de', 'fr', 'es', 'it'],\n        supportedFormats: ['pdf', 'excel'],\n      },\n    });\n\n    return templates;\n  }\n\n  /**\n   * デフォルトスタイリングの取得\n   */\n  private getDefaultStyling(\n    theme: 'light' | 'dark' | 'corporate' | 'minimal'\n  ): ReportStyling {\n    const styles: Record<string, ReportStyling> = {\n      corporate: {\n        theme: 'corporate',\n        colors: {\n          primary: '#1e3a8a',\n          secondary: '#3730a3',\n          accent: '#10b981',\n          success: '#10b981',\n          warning: '#f59e0b',\n          error: '#ef4444',\n          text: '#1f2937',\n          background: '#ffffff',\n        },\n        fonts: {\n          primary: 'Arial, sans-serif',\n          secondary: 'Georgia, serif',\n          monospace: 'Courier New, monospace',\n          sizes: {\n            small: 10,\n            medium: 12,\n            large: 16,\n            xlarge: 20,\n          },\n        },\n        layout: {\n          pageSize: 'A4',\n          orientation: 'portrait',\n          margins: {\n            top: 25,\n            right: 25,\n            bottom: 25,\n            left: 25,\n          },\n        },\n      },\n      minimal: {\n        theme: 'minimal',\n        colors: {\n          primary: '#000000',\n          secondary: '#6b7280',\n          accent: '#3b82f6',\n          success: '#10b981',\n          warning: '#f59e0b',\n          error: '#ef4444',\n          text: '#111827',\n          background: '#ffffff',\n        },\n        fonts: {\n          primary: 'Helvetica, Arial, sans-serif',\n          secondary: 'Helvetica, Arial, sans-serif',\n          monospace: 'Monaco, Consolas, monospace',\n          sizes: {\n            small: 9,\n            medium: 11,\n            large: 14,\n            xlarge: 18,\n          },\n        },\n        layout: {\n          pageSize: 'A4',\n          orientation: 'portrait',\n          margins: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          },\n        },\n      },\n    };\n\n    return styles[theme] || styles.corporate;\n  }\n\n  /**\n   * テンプレートの読み込み\n   */\n  private loadTemplates(): void {\n    // デフォルトテンプレートをロード\n    for (const [id, template] of this.defaultTemplates) {\n      this.templates.set(id, template);\n    }\n\n    // TODO: カスタムテンプレートをファイルから読み込む\n  }\n\n  /**\n   * テンプレートの取得\n   */\n  getTemplate(id: string): ReportTemplate | undefined {\n    return this.templates.get(id);\n  }\n\n  /**\n   * カテゴリ別テンプレートの取得\n   */\n  getTemplatesByCategory(category: string): ReportTemplate[] {\n    return Array.from(this.templates.values()).filter(\n      t => t.category === category\n    );\n  }\n\n  /**\n   * 言語別テンプレートの取得\n   */\n  getTemplatesByLanguage(language: string): ReportTemplate[] {\n    return Array.from(this.templates.values()).filter(t =>\n      t.metadata.supportedLanguages.includes(language)\n    );\n  }\n\n  /**\n   * テンプレートの追加\n   */\n  addTemplate(template: ReportTemplate): void {\n    this.templates.set(template.id, template);\n    this.emit('template:added', { id: template.id, template });\n  }\n\n  /**\n   * テンプレートの更新\n   */\n  updateTemplate(id: string, updates: Partial<ReportTemplate>): void {\n    const template = this.templates.get(id);\n    if (!template) {\n      throw new Error(`Template not found: ${id}`);\n    }\n\n    const updated = {\n      ...template,\n      ...updates,\n      metadata: {\n        ...template.metadata,\n        lastModified: new Date(),\n      },\n    };\n\n    this.templates.set(id, updated);\n    this.emit('template:updated', { id, template: updated });\n  }\n\n  /**\n   * テンプレートの削除\n   */\n  deleteTemplate(id: string): void {\n    if (this.defaultTemplates.has(id)) {\n      throw new Error(`Cannot delete default template: ${id}`);\n    }\n\n    const deleted = this.templates.delete(id);\n    if (deleted) {\n      this.emit('template:deleted', { id });\n    }\n  }\n\n  /**\n   * テンプレートのエクスポート\n   */\n  exportTemplate(id: string, filePath: string): void {\n    const template = this.templates.get(id);\n    if (!template) {\n      throw new Error(`Template not found: ${id}`);\n    }\n\n    writeFileSync(filePath, JSON.stringify(template, null, 2));\n    this.emit('template:exported', { id, filePath });\n  }\n\n  /**\n   * テンプレートのインポート\n   */\n  importTemplate(filePath: string): void {\n    if (!existsSync(filePath)) {\n      throw new Error(`File not found: ${filePath}`);\n    }\n\n    const content = readFileSync(filePath, 'utf-8');\n    const template = JSON.parse(content) as ReportTemplate;\n\n    // 日付を復元\n    template.metadata.created = new Date(template.metadata.created);\n    template.metadata.lastModified = new Date(template.metadata.lastModified);\n\n    this.addTemplate(template);\n    this.emit('template:imported', { id: template.id, filePath });\n  }\n\n  /**\n   * すべてのテンプレートを取得\n   */\n  getAllTemplates(): ReportTemplate[] {\n    return Array.from(this.templates.values());\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/risk-calculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/batch.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/parser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/route53/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/structured-logger-backup.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":18,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[3672,3695],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/structured-logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/timezone-localizer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatString' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":937,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":937,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":971,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":971,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * タイムゾーン・日付形式ローカライザー\n *\n * グローバル対応のためのタイムゾーン・日付・時刻処理機能\n * - 地域別タイムゾーン自動検出\n * - 文化的な日付・時刻形式対応\n * - 業務時間・営業日管理\n * - 相対時間表示\n * - 多言語対応\n */\n\nimport { EventEmitter } from 'events';\n\nimport { I18nManager } from './i18n-manager.js';\nimport { Logger } from './logger.js';\n\nexport interface TimezoneInfo {\n  timezone: string;\n  offset: number;\n  abbreviation: string;\n  isDST: boolean;\n  dstOffset?: number;\n  region: string;\n  country: string;\n  city: string;\n  utcOffset: string;\n}\n\nexport interface LocaleDateTimeFormat {\n  dateFormat: string;\n  timeFormat: string;\n  dateTimeFormat: string;\n  shortDateFormat: string;\n  longDateFormat: string;\n  timeFormat12: string;\n  timeFormat24: string;\n  weekStartsOn: 0 | 1; // 0 = Sunday, 1 = Monday\n  firstWeekContainsDate: 1 | 4; // 1 = Jan 1st, 4 = First Thursday\n}\n\nexport interface BusinessHours {\n  timezone: string;\n  regularHours: {\n    [day: string]: {\n      open: string;\n      close: string;\n      isOpen: boolean;\n    };\n  };\n  specialHours: {\n    date: string;\n    open?: string;\n    close?: string;\n    isOpen: boolean;\n    reason?: string;\n  }[];\n  holidays: {\n    date: string;\n    name: string;\n    isRecurring: boolean;\n    region?: string;\n  }[];\n}\n\nexport interface RelativeTimeOptions {\n  style: 'long' | 'short' | 'narrow';\n  numeric: 'always' | 'auto';\n  unit?: 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year';\n}\n\nexport interface DateTimeLocalizerOptions {\n  defaultTimezone?: string;\n  autoDetectTimezone?: boolean;\n  enableDST?: boolean;\n  defaultLocale?: string;\n  fallbackLocale?: string;\n  enableBusinessHours?: boolean;\n  enableHolidays?: boolean;\n  enableRelativeTime?: boolean;\n  cacheSize?: number;\n  updateInterval?: number;\n}\n\n/**\n * タイムゾーン・日付形式ローカライザー\n */\nexport class TimezoneLocalizer extends EventEmitter {\n  private logger: Logger;\n  private i18nManager: I18nManager;\n  private options: DateTimeLocalizerOptions;\n  private timezoneCache: Map<string, TimezoneInfo>;\n  private formatCache: Map<string, LocaleDateTimeFormat>;\n  private businessHoursCache: Map<string, BusinessHours>;\n  private currentTimezone: string;\n  private currentLocale: string;\n  private updateInterval?: NodeJS.Timeout;\n\n  constructor(\n    logger?: Logger,\n    i18nManager?: I18nManager,\n    options: DateTimeLocalizerOptions = {}\n  ) {\n    super();\n    this.logger = logger || new Logger({ logLevel: 'info' });\n    this.i18nManager = i18nManager || new I18nManager();\n    this.options = {\n      defaultTimezone: 'UTC',\n      autoDetectTimezone: true,\n      enableDST: true,\n      defaultLocale: 'en-US',\n      fallbackLocale: 'en-US',\n      enableBusinessHours: true,\n      enableHolidays: true,\n      enableRelativeTime: true,\n      cacheSize: 100,\n      updateInterval: 3600000, // 1時間\n      ...options,\n    };\n\n    this.timezoneCache = new Map();\n    this.formatCache = new Map();\n    this.businessHoursCache = new Map();\n\n    this.currentTimezone = this.options.defaultTimezone!;\n    this.currentLocale = this.options.defaultLocale!;\n\n    this.initializeTimezones();\n    this.initializeDateFormats();\n    this.initializeBusinessHours();\n\n    if (this.options.autoDetectTimezone) {\n      this.detectTimezone();\n    }\n\n    if (this.options.updateInterval) {\n      this.startPeriodicUpdate();\n    }\n  }\n\n  /**\n   * タイムゾーン情報の初期化\n   */\n  private initializeTimezones(): void {\n    const timezones: TimezoneInfo[] = [\n      // 北アメリカ\n      {\n        timezone: 'America/New_York',\n        offset: -5,\n        abbreviation: 'EST',\n        isDST: false,\n        dstOffset: -4,\n        region: 'North America',\n        country: 'United States',\n        city: 'New York',\n        utcOffset: 'UTC-5',\n      },\n      {\n        timezone: 'America/Chicago',\n        offset: -6,\n        abbreviation: 'CST',\n        isDST: false,\n        dstOffset: -5,\n        region: 'North America',\n        country: 'United States',\n        city: 'Chicago',\n        utcOffset: 'UTC-6',\n      },\n      {\n        timezone: 'America/Denver',\n        offset: -7,\n        abbreviation: 'MST',\n        isDST: false,\n        dstOffset: -6,\n        region: 'North America',\n        country: 'United States',\n        city: 'Denver',\n        utcOffset: 'UTC-7',\n      },\n      {\n        timezone: 'America/Los_Angeles',\n        offset: -8,\n        abbreviation: 'PST',\n        isDST: false,\n        dstOffset: -7,\n        region: 'North America',\n        country: 'United States',\n        city: 'Los Angeles',\n        utcOffset: 'UTC-8',\n      },\n      {\n        timezone: 'America/Toronto',\n        offset: -5,\n        abbreviation: 'EST',\n        isDST: false,\n        dstOffset: -4,\n        region: 'North America',\n        country: 'Canada',\n        city: 'Toronto',\n        utcOffset: 'UTC-5',\n      },\n\n      // ヨーロッパ\n      {\n        timezone: 'Europe/London',\n        offset: 0,\n        abbreviation: 'GMT',\n        isDST: false,\n        dstOffset: 1,\n        region: 'Europe',\n        country: 'United Kingdom',\n        city: 'London',\n        utcOffset: 'UTC+0',\n      },\n      {\n        timezone: 'Europe/Paris',\n        offset: 1,\n        abbreviation: 'CET',\n        isDST: false,\n        dstOffset: 2,\n        region: 'Europe',\n        country: 'France',\n        city: 'Paris',\n        utcOffset: 'UTC+1',\n      },\n      {\n        timezone: 'Europe/Berlin',\n        offset: 1,\n        abbreviation: 'CET',\n        isDST: false,\n        dstOffset: 2,\n        region: 'Europe',\n        country: 'Germany',\n        city: 'Berlin',\n        utcOffset: 'UTC+1',\n      },\n      {\n        timezone: 'Europe/Rome',\n        offset: 1,\n        abbreviation: 'CET',\n        isDST: false,\n        dstOffset: 2,\n        region: 'Europe',\n        country: 'Italy',\n        city: 'Rome',\n        utcOffset: 'UTC+1',\n      },\n      {\n        timezone: 'Europe/Stockholm',\n        offset: 1,\n        abbreviation: 'CET',\n        isDST: false,\n        dstOffset: 2,\n        region: 'Europe',\n        country: 'Sweden',\n        city: 'Stockholm',\n        utcOffset: 'UTC+1',\n      },\n\n      // アジア太平洋\n      {\n        timezone: 'Asia/Tokyo',\n        offset: 9,\n        abbreviation: 'JST',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Japan',\n        city: 'Tokyo',\n        utcOffset: 'UTC+9',\n      },\n      {\n        timezone: 'Asia/Shanghai',\n        offset: 8,\n        abbreviation: 'CST',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'China',\n        city: 'Shanghai',\n        utcOffset: 'UTC+8',\n      },\n      {\n        timezone: 'Asia/Hong_Kong',\n        offset: 8,\n        abbreviation: 'HKT',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Hong Kong',\n        city: 'Hong Kong',\n        utcOffset: 'UTC+8',\n      },\n      {\n        timezone: 'Asia/Singapore',\n        offset: 8,\n        abbreviation: 'SGT',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Singapore',\n        city: 'Singapore',\n        utcOffset: 'UTC+8',\n      },\n      {\n        timezone: 'Asia/Seoul',\n        offset: 9,\n        abbreviation: 'KST',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'South Korea',\n        city: 'Seoul',\n        utcOffset: 'UTC+9',\n      },\n      {\n        timezone: 'Asia/Kolkata',\n        offset: 5.5,\n        abbreviation: 'IST',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'India',\n        city: 'Kolkata',\n        utcOffset: 'UTC+5:30',\n      },\n      {\n        timezone: 'Asia/Bangkok',\n        offset: 7,\n        abbreviation: 'ICT',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Thailand',\n        city: 'Bangkok',\n        utcOffset: 'UTC+7',\n      },\n      {\n        timezone: 'Asia/Manila',\n        offset: 8,\n        abbreviation: 'PST',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Philippines',\n        city: 'Manila',\n        utcOffset: 'UTC+8',\n      },\n      {\n        timezone: 'Asia/Jakarta',\n        offset: 7,\n        abbreviation: 'WIB',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Indonesia',\n        city: 'Jakarta',\n        utcOffset: 'UTC+7',\n      },\n      {\n        timezone: 'Asia/Kuala_Lumpur',\n        offset: 8,\n        abbreviation: 'MYT',\n        isDST: false,\n        region: 'Asia Pacific',\n        country: 'Malaysia',\n        city: 'Kuala Lumpur',\n        utcOffset: 'UTC+8',\n      },\n      {\n        timezone: 'Australia/Sydney',\n        offset: 10,\n        abbreviation: 'AEST',\n        isDST: false,\n        dstOffset: 11,\n        region: 'Asia Pacific',\n        country: 'Australia',\n        city: 'Sydney',\n        utcOffset: 'UTC+10',\n      },\n\n      // 中東・アフリカ\n      {\n        timezone: 'Asia/Dubai',\n        offset: 4,\n        abbreviation: 'GST',\n        isDST: false,\n        region: 'Middle East',\n        country: 'UAE',\n        city: 'Dubai',\n        utcOffset: 'UTC+4',\n      },\n      {\n        timezone: 'Asia/Riyadh',\n        offset: 3,\n        abbreviation: 'AST',\n        isDST: false,\n        region: 'Middle East',\n        country: 'Saudi Arabia',\n        city: 'Riyadh',\n        utcOffset: 'UTC+3',\n      },\n      {\n        timezone: 'Asia/Jerusalem',\n        offset: 2,\n        abbreviation: 'IST',\n        isDST: false,\n        dstOffset: 3,\n        region: 'Middle East',\n        country: 'Israel',\n        city: 'Jerusalem',\n        utcOffset: 'UTC+2',\n      },\n\n      // 南米\n      {\n        timezone: 'America/Sao_Paulo',\n        offset: -3,\n        abbreviation: 'BRT',\n        isDST: false,\n        dstOffset: -2,\n        region: 'South America',\n        country: 'Brazil',\n        city: 'São Paulo',\n        utcOffset: 'UTC-3',\n      },\n      {\n        timezone: 'America/Argentina/Buenos_Aires',\n        offset: -3,\n        abbreviation: 'ART',\n        isDST: false,\n        region: 'South America',\n        country: 'Argentina',\n        city: 'Buenos Aires',\n        utcOffset: 'UTC-3',\n      },\n      {\n        timezone: 'America/Mexico_City',\n        offset: -6,\n        abbreviation: 'CST',\n        isDST: false,\n        dstOffset: -5,\n        region: 'North America',\n        country: 'Mexico',\n        city: 'Mexico City',\n        utcOffset: 'UTC-6',\n      },\n\n      // グローバル\n      {\n        timezone: 'UTC',\n        offset: 0,\n        abbreviation: 'UTC',\n        isDST: false,\n        region: 'Global',\n        country: 'Global',\n        city: 'UTC',\n        utcOffset: 'UTC+0',\n      },\n    ];\n\n    timezones.forEach(timezone => {\n      this.timezoneCache.set(timezone.timezone, timezone);\n    });\n  }\n\n  /**\n   * 日付形式の初期化\n   */\n  private initializeDateFormats(): void {\n    const formats: { [locale: string]: LocaleDateTimeFormat } = {\n      'en-US': {\n        dateFormat: 'MM/dd/yyyy',\n        timeFormat: 'h:mm a',\n        dateTimeFormat: 'MM/dd/yyyy h:mm a',\n        shortDateFormat: 'MM/dd/yy',\n        longDateFormat: 'MMMM dd, yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n      'en-GB': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'ja-JP': {\n        dateFormat: 'yyyy/MM/dd',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'yyyy/MM/dd HH:mm',\n        shortDateFormat: 'yy/MM/dd',\n        longDateFormat: 'yyyy年MM月dd日',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n      'de-DE': {\n        dateFormat: 'dd.MM.yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd.MM.yyyy HH:mm',\n        shortDateFormat: 'dd.MM.yy',\n        longDateFormat: 'dd. MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'fr-FR': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'es-ES': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd de MMMM de yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'it-IT': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'pt-BR': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd de MMMM de yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n      'ru-RU': {\n        dateFormat: 'dd.MM.yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd.MM.yyyy HH:mm',\n        shortDateFormat: 'dd.MM.yy',\n        longDateFormat: 'dd MMMM yyyy г.',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'ko-KR': {\n        dateFormat: 'yyyy. MM. dd.',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'yyyy. MM. dd. HH:mm',\n        shortDateFormat: 'yy. MM. dd.',\n        longDateFormat: 'yyyy년 MM월 dd일',\n        timeFormat12: 'a h:mm',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n      'zh-CN': {\n        dateFormat: 'yyyy-MM-dd',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'yyyy-MM-dd HH:mm',\n        shortDateFormat: 'yy-MM-dd',\n        longDateFormat: 'yyyy年MM月dd日',\n        timeFormat12: 'a h:mm',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 1,\n        firstWeekContainsDate: 4,\n      },\n      'ar-SA': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n      'hi-IN': {\n        dateFormat: 'dd/MM/yyyy',\n        timeFormat: 'HH:mm',\n        dateTimeFormat: 'dd/MM/yyyy HH:mm',\n        shortDateFormat: 'dd/MM/yy',\n        longDateFormat: 'dd MMMM yyyy',\n        timeFormat12: 'h:mm a',\n        timeFormat24: 'HH:mm',\n        weekStartsOn: 0,\n        firstWeekContainsDate: 1,\n      },\n    };\n\n    Object.entries(formats).forEach(([locale, format]) => {\n      this.formatCache.set(locale, format);\n    });\n  }\n\n  /**\n   * 業務時間の初期化\n   */\n  private initializeBusinessHours(): void {\n    const businessHours: { [region: string]: BusinessHours } = {\n      'America/New_York': {\n        timezone: 'America/New_York',\n        regularHours: {\n          sunday: { open: '', close: '', isOpen: false },\n          monday: { open: '09:00', close: '17:00', isOpen: true },\n          tuesday: { open: '09:00', close: '17:00', isOpen: true },\n          wednesday: { open: '09:00', close: '17:00', isOpen: true },\n          thursday: { open: '09:00', close: '17:00', isOpen: true },\n          friday: { open: '09:00', close: '17:00', isOpen: true },\n          saturday: { open: '', close: '', isOpen: false },\n        },\n        specialHours: [],\n        holidays: [\n          {\n            date: '2024-01-01',\n            name: \"New Year's Day\",\n            isRecurring: true,\n            region: 'US',\n          },\n          {\n            date: '2024-07-04',\n            name: 'Independence Day',\n            isRecurring: true,\n            region: 'US',\n          },\n          {\n            date: '2024-12-25',\n            name: 'Christmas Day',\n            isRecurring: true,\n            region: 'US',\n          },\n        ],\n      },\n      'Europe/London': {\n        timezone: 'Europe/London',\n        regularHours: {\n          sunday: { open: '', close: '', isOpen: false },\n          monday: { open: '09:00', close: '17:00', isOpen: true },\n          tuesday: { open: '09:00', close: '17:00', isOpen: true },\n          wednesday: { open: '09:00', close: '17:00', isOpen: true },\n          thursday: { open: '09:00', close: '17:00', isOpen: true },\n          friday: { open: '09:00', close: '17:00', isOpen: true },\n          saturday: { open: '', close: '', isOpen: false },\n        },\n        specialHours: [],\n        holidays: [\n          {\n            date: '2024-01-01',\n            name: \"New Year's Day\",\n            isRecurring: true,\n            region: 'UK',\n          },\n          {\n            date: '2024-12-25',\n            name: 'Christmas Day',\n            isRecurring: true,\n            region: 'UK',\n          },\n          {\n            date: '2024-12-26',\n            name: 'Boxing Day',\n            isRecurring: true,\n            region: 'UK',\n          },\n        ],\n      },\n      'Asia/Tokyo': {\n        timezone: 'Asia/Tokyo',\n        regularHours: {\n          sunday: { open: '', close: '', isOpen: false },\n          monday: { open: '09:00', close: '18:00', isOpen: true },\n          tuesday: { open: '09:00', close: '18:00', isOpen: true },\n          wednesday: { open: '09:00', close: '18:00', isOpen: true },\n          thursday: { open: '09:00', close: '18:00', isOpen: true },\n          friday: { open: '09:00', close: '18:00', isOpen: true },\n          saturday: { open: '', close: '', isOpen: false },\n        },\n        specialHours: [],\n        holidays: [\n          { date: '2024-01-01', name: '元日', isRecurring: true, region: 'JP' },\n          {\n            date: '2024-12-29',\n            name: '年末年始',\n            isRecurring: true,\n            region: 'JP',\n          },\n          {\n            date: '2024-12-30',\n            name: '年末年始',\n            isRecurring: true,\n            region: 'JP',\n          },\n          {\n            date: '2024-12-31',\n            name: '年末年始',\n            isRecurring: true,\n            region: 'JP',\n          },\n        ],\n      },\n    };\n\n    Object.entries(businessHours).forEach(([timezone, hours]) => {\n      this.businessHoursCache.set(timezone, hours);\n    });\n  }\n\n  /**\n   * タイムゾーンの自動検出\n   */\n  private detectTimezone(): void {\n    try {\n      // ブラウザ環境での検出\n      if (typeof globalThis !== 'undefined' && globalThis.Intl) {\n        const detectedTimezone =\n          Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (this.timezoneCache.has(detectedTimezone)) {\n          this.currentTimezone = detectedTimezone;\n          this.logger.info(`タイムゾーン自動検出: ${detectedTimezone}`);\n        }\n      }\n\n      // Node.js環境での検出\n      if (typeof process !== 'undefined' && process.env.TZ) {\n        const envTimezone = process.env.TZ;\n        if (this.timezoneCache.has(envTimezone)) {\n          this.currentTimezone = envTimezone;\n          this.logger.info(`環境変数からタイムゾーン検出: ${envTimezone}`);\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        'タイムゾーン検出エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * 定期更新の開始\n   */\n  private startPeriodicUpdate(): void {\n    this.updateInterval = setInterval(() => {\n      this.updateTimezoneInfo();\n    }, this.options.updateInterval);\n  }\n\n  /**\n   * タイムゾーン情報の更新\n   */\n  private updateTimezoneInfo(): void {\n    try {\n      // DST状態の更新\n      if (this.options.enableDST) {\n        this.updateDSTStatus();\n      }\n\n      // キャッシュのクリーンアップ\n      this.cleanupCache();\n\n      this.emit('timezone-updated', {\n        currentTimezone: this.currentTimezone,\n        timestamp: new Date(),\n      });\n    } catch (error) {\n      this.logger.error(\n        'タイムゾーン情報更新エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n    }\n  }\n\n  /**\n   * DST状態の更新\n   */\n  private updateDSTStatus(): void {\n    this.timezoneCache.forEach((timezoneInfo, timezone) => {\n      if (timezoneInfo.dstOffset !== undefined) {\n        const now = new Date();\n        const isDST = this.isDSTActive(now, timezone);\n\n        if (timezoneInfo.isDST !== isDST) {\n          timezoneInfo.isDST = isDST;\n          this.timezoneCache.set(timezone, timezoneInfo);\n\n          this.emit('dst-changed', {\n            timezone,\n            isDST,\n            timestamp: now,\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * DST有効状態の判定\n   */\n  private isDSTActive(date: Date, timezone: string): boolean {\n    try {\n      const january = new Date(date.getFullYear(), 0, 1);\n      const july = new Date(date.getFullYear(), 6, 1);\n\n      const januaryOffset = this.getTimezoneOffset(january, timezone);\n      const julyOffset = this.getTimezoneOffset(july, timezone);\n      const currentOffset = this.getTimezoneOffset(date, timezone);\n\n      return currentOffset !== Math.max(januaryOffset, julyOffset);\n    } catch (error) {\n      this.logger.error(\n        'DST判定エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return false;\n    }\n  }\n\n  /**\n   * タイムゾーンオフセットの取得\n   */\n  private getTimezoneOffset(date: Date, timezone: string): number {\n    try {\n      const utcDate = new Date(\n        date.toLocaleString('en-US', { timeZone: 'UTC' })\n      );\n      const localDate = new Date(\n        date.toLocaleString('en-US', { timeZone: timezone })\n      );\n      return (utcDate.getTime() - localDate.getTime()) / (1000 * 60);\n    } catch (error) {\n      this.logger.error(\n        'タイムゾーンオフセット取得エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return 0;\n    }\n  }\n\n  /**\n   * キャッシュのクリーンアップ\n   */\n  private cleanupCache(): void {\n    // 必要に応じてキャッシュサイズを制限\n    if (this.formatCache.size > this.options.cacheSize!) {\n      const entries = Array.from(this.formatCache.entries());\n      entries\n        .slice(0, entries.length - this.options.cacheSize!)\n        .forEach(([key]) => {\n          this.formatCache.delete(key);\n        });\n    }\n  }\n\n  // 公開メソッド\n\n  /**\n   * タイムゾーンの設定\n   */\n  setTimezone(timezone: string): void {\n    if (!this.timezoneCache.has(timezone)) {\n      throw new Error(`サポートされていないタイムゾーン: ${timezone}`);\n    }\n\n    const oldTimezone = this.currentTimezone;\n    this.currentTimezone = timezone;\n\n    this.logger.info(`タイムゾーン変更: ${oldTimezone} → ${timezone}`);\n    this.emit('timezone-changed', { from: oldTimezone, to: timezone });\n  }\n\n  /**\n   * ロケールの設定\n   */\n  setLocale(locale: string): void {\n    if (!this.formatCache.has(locale)) {\n      // フォールバック処理\n      this.logger.warn(\n        `未対応のロケール: ${locale}、フォールバック: ${this.options.fallbackLocale}`\n      );\n      locale = this.options.fallbackLocale!;\n    }\n\n    const oldLocale = this.currentLocale;\n    this.currentLocale = locale;\n\n    this.logger.info(`ロケール変更: ${oldLocale} → ${locale}`);\n    this.emit('locale-changed', { from: oldLocale, to: locale });\n  }\n\n  /**\n   * 日付のフォーマット\n   */\n  formatDate(\n    date: Date,\n    options: {\n      timezone?: string;\n      locale?: string;\n      format?: 'short' | 'long' | 'custom';\n      customFormat?: string;\n    } = {}\n  ): string {\n    try {\n      const timezone = options.timezone || this.currentTimezone;\n      const locale = options.locale || this.currentLocale;\n      const format =\n        this.formatCache.get(locale) ||\n        this.formatCache.get(this.options.fallbackLocale!)!;\n\n      let formatString: string;\n      switch (options.format) {\n        case 'short':\n          formatString = format.shortDateFormat;\n          break;\n        case 'long':\n          formatString = format.longDateFormat;\n          break;\n        case 'custom':\n          formatString = options.customFormat || format.dateFormat;\n          break;\n        default:\n          formatString = format.dateFormat;\n      }\n\n      // 実際の実装では、date-fns や moment.js などを使用\n      return date.toLocaleDateString(locale, {\n        timeZone: timezone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n      });\n    } catch (error) {\n      this.logger.error(\n        '日付フォーマットエラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return date.toLocaleDateString();\n    }\n  }\n\n  /**\n   * 時刻のフォーマット\n   */\n  formatTime(\n    time: Date,\n    options: {\n      timezone?: string;\n      locale?: string;\n      format?: '12' | '24';\n      showSeconds?: boolean;\n    } = {}\n  ): string {\n    try {\n      const timezone = options.timezone || this.currentTimezone;\n      const locale = options.locale || this.currentLocale;\n      const format =\n        this.formatCache.get(locale) ||\n        this.formatCache.get(this.options.fallbackLocale!)!;\n\n      const hour12 = options.format === '12';\n\n      return time.toLocaleTimeString(locale, {\n        timeZone: timezone,\n        hour12,\n        hour: '2-digit',\n        minute: '2-digit',\n        second: options.showSeconds ? '2-digit' : undefined,\n      });\n    } catch (error) {\n      this.logger.error(\n        '時刻フォーマットエラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return time.toLocaleTimeString();\n    }\n  }\n\n  /**\n   * 日時のフォーマット\n   */\n  formatDateTime(\n    dateTime: Date,\n    options: {\n      timezone?: string;\n      locale?: string;\n      dateFormat?: 'short' | 'long' | 'custom';\n      timeFormat?: '12' | '24';\n      showSeconds?: boolean;\n    } = {}\n  ): string {\n    try {\n      const dateStr = this.formatDate(dateTime, {\n        timezone: options.timezone,\n        locale: options.locale,\n        format: options.dateFormat,\n      });\n\n      const timeStr = this.formatTime(dateTime, {\n        timezone: options.timezone,\n        locale: options.locale,\n        format: options.timeFormat,\n        showSeconds: options.showSeconds,\n      });\n\n      return `${dateStr} ${timeStr}`;\n    } catch (error) {\n      this.logger.error(\n        '日時フォーマットエラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return dateTime.toLocaleString();\n    }\n  }\n\n  /**\n   * 相対時間の表示\n   */\n  formatRelativeTime(\n    date: Date,\n    options: RelativeTimeOptions = { style: 'long', numeric: 'auto' }\n  ): string {\n    try {\n      const now = new Date();\n      const diffMs = now.getTime() - date.getTime();\n      const diffSeconds = Math.floor(diffMs / 1000);\n      const diffMinutes = Math.floor(diffSeconds / 60);\n      const diffHours = Math.floor(diffMinutes / 60);\n      const diffDays = Math.floor(diffHours / 24);\n\n      if (Math.abs(diffDays) >= 7) {\n        return this.formatDate(date);\n      }\n\n      if (typeof Intl !== 'undefined' && Intl.RelativeTimeFormat) {\n        const rtf = new Intl.RelativeTimeFormat(this.currentLocale, {\n          numeric: options.numeric || 'auto',\n          style: options.style || 'long',\n        });\n\n        if (Math.abs(diffDays) > 0) {\n          return rtf.format(-diffDays, 'day');\n        } else if (Math.abs(diffHours) > 0) {\n          return rtf.format(-diffHours, 'hour');\n        } else if (Math.abs(diffMinutes) > 0) {\n          return rtf.format(-diffMinutes, 'minute');\n        } else {\n          return rtf.format(-diffSeconds, 'second');\n        }\n      }\n\n      // フォールバック実装\n      if (Math.abs(diffDays) > 0) {\n        return diffDays > 0\n          ? `${diffDays} days ago`\n          : `in ${Math.abs(diffDays)} days`;\n      } else if (Math.abs(diffHours) > 0) {\n        return diffHours > 0\n          ? `${diffHours} hours ago`\n          : `in ${Math.abs(diffHours)} hours`;\n      } else if (Math.abs(diffMinutes) > 0) {\n        return diffMinutes > 0\n          ? `${diffMinutes} minutes ago`\n          : `in ${Math.abs(diffMinutes)} minutes`;\n      } else {\n        return 'just now';\n      }\n    } catch (error) {\n      this.logger.error(\n        '相対時間フォーマットエラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return this.formatDateTime(date);\n    }\n  }\n\n  /**\n   * 業務時間の判定\n   */\n  isBusinessHours(date: Date = new Date(), timezone?: string): boolean {\n    try {\n      const tz = timezone || this.currentTimezone;\n      const businessHours = this.businessHoursCache.get(tz);\n\n      if (!businessHours) {\n        this.logger.warn(`業務時間設定が見つかりません: ${tz}`);\n        return false;\n      }\n\n      // 祝日チェック\n      if (this.isHoliday(date, businessHours)) {\n        return false;\n      }\n\n      // 曜日の取得\n      const dayOfWeek = date\n        .toLocaleDateString('en-US', {\n          weekday: 'long',\n          timeZone: tz,\n        })\n        .toLowerCase();\n\n      const dayHours = businessHours.regularHours[dayOfWeek];\n      if (!dayHours || !dayHours.isOpen) {\n        return false;\n      }\n\n      // 時刻の判定\n      const timeStr = date.toLocaleTimeString('en-US', {\n        timeZone: tz,\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n\n      return timeStr >= dayHours.open && timeStr <= dayHours.close;\n    } catch (error) {\n      this.logger.error(\n        '業務時間判定エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return false;\n    }\n  }\n\n  /**\n   * 祝日の判定\n   */\n  private isHoliday(date: Date, businessHours: BusinessHours): boolean {\n    const dateStr = date.toISOString().split('T')[0];\n    return businessHours.holidays.some(holiday => holiday.date === dateStr);\n  }\n\n  /**\n   * 次の営業日の取得\n   */\n  getNextBusinessDay(date: Date = new Date(), timezone?: string): Date {\n    const nextDay = new Date(date);\n    nextDay.setDate(nextDay.getDate() + 1);\n\n    while (!this.isBusinessHours(nextDay, timezone)) {\n      nextDay.setDate(nextDay.getDate() + 1);\n    }\n\n    return nextDay;\n  }\n\n  /**\n   * タイムゾーン変換\n   */\n  convertTimezone(date: Date, fromTimezone: string, toTimezone: string): Date {\n    try {\n      // 元のタイムゾーンでの時刻文字列を取得\n      const dateStr = date.toLocaleString('en-US', { timeZone: fromTimezone });\n\n      // 対象タイムゾーンでのDateオブジェクトを作成\n      const convertedDate = new Date(dateStr);\n\n      // タイムゾーンオフセットを調整\n      const fromOffset = this.getTimezoneOffset(date, fromTimezone);\n      const toOffset = this.getTimezoneOffset(date, toTimezone);\n      const offsetDiff = (toOffset - fromOffset) * 60 * 1000;\n\n      return new Date(convertedDate.getTime() + offsetDiff);\n    } catch (error) {\n      this.logger.error(\n        'タイムゾーン変換エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      return date;\n    }\n  }\n\n  // ゲッターメソッド\n\n  getCurrentTimezone(): string {\n    return this.currentTimezone;\n  }\n\n  getCurrentLocale(): string {\n    return this.currentLocale;\n  }\n\n  getTimezoneInfo(timezone?: string): TimezoneInfo | undefined {\n    return this.timezoneCache.get(timezone || this.currentTimezone);\n  }\n\n  getAllTimezones(): TimezoneInfo[] {\n    return Array.from(this.timezoneCache.values());\n  }\n\n  getDateTimeFormat(locale?: string): LocaleDateTimeFormat | undefined {\n    return this.formatCache.get(locale || this.currentLocale);\n  }\n\n  getBusinessHours(timezone?: string): BusinessHours | undefined {\n    return this.businessHoursCache.get(timezone || this.currentTimezone);\n  }\n\n  /**\n   * 正常終了処理\n   */\n  async shutdown(): Promise<void> {\n    try {\n      if (this.updateInterval) {\n        clearInterval(this.updateInterval);\n      }\n\n      // キャッシュのクリア\n      this.timezoneCache.clear();\n      this.formatCache.clear();\n      this.businessHoursCache.clear();\n\n      // イベントリスナーの削除\n      this.removeAllListeners();\n\n      this.logger.info('TimezoneLocalizer正常終了');\n    } catch (error) {\n      this.logger.error(\n        'TimezoneLocalizer終了エラー:',\n        error instanceof Error ? error : new Error(String(error))\n      );\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/lib/validators.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/test/setup.ts","messages":[],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[152,203],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":14,"suggestions":[{"messageId":"removeConsole","data":{"propertyName":"log"},"fix":{"range":[269,317],"text":""},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/types/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2394,2397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2394,2397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface IDNSRecord {\n  id: string;\n  name: string;\n  type: DNSRecordType;\n  value: string;\n  ttl: number;\n  priority?: number;\n  weight?: number;\n  port?: number;\n  created: Date;\n  updated: Date;\n}\n\nexport type DNSRecordType =\n  | 'A'\n  | 'AAAA'\n  | 'CNAME'\n  | 'MX'\n  | 'TXT'\n  | 'NS'\n  | 'SOA'\n  | 'SRV'\n  | 'PTR'\n  | 'CAA'\n  | 'NAPTR'\n  | 'DS'\n  | 'DNSKEY'\n  | 'RRSIG'\n  | 'NSEC'\n  | 'NSEC3'\n  | 'TLSA'\n  | 'SSHFP'\n  | 'SPF'\n  | 'ANY';\n\nexport interface ICommandOptions {\n  verbose?: boolean;\n  json?: boolean;\n  quiet?: boolean;\n}\n\nexport interface IListOptions extends ICommandOptions {\n  type?: DNSRecordType;\n  name?: string;\n  limit?: string;\n}\n\nexport interface IAddOptions extends ICommandOptions {\n  ttl?: string;\n  priority?: string;\n  weight?: string;\n  port?: string;\n}\n\nexport interface IDeleteOptions extends ICommandOptions {\n  force?: boolean;\n  confirm?: boolean;\n}\n\nexport interface IImportOptions extends ICommandOptions {\n  format?: string;\n  resolve?: boolean;\n  streaming?: boolean;\n  limit?: string;\n}\n\nexport interface IAnalyzeOptions extends ICommandOptions {\n  format?: string;\n  level?: 'low' | 'medium' | 'high' | 'critical';\n  checkDns?: boolean;\n  output?: string;\n}\n\nexport interface IConfig {\n  apiKey?: string;\n  apiUrl?: string;\n  defaultTTL: number;\n  outputFormat: 'table' | 'json' | 'yaml';\n}\n\nexport interface IDNSResolverOptions {\n  timeout?: number;\n  servers?: string[];\n}\n\nexport interface IDNSQuery {\n  domain: string;\n  type: DNSRecordType;\n  server?: string;\n}\n\nexport interface IDNSResolveResult {\n  type: DNSRecordType;\n  value: string;\n  ttl?: number;\n  priority?: number;\n  weight?: number;\n  port?: number;\n  exchange?: string;\n  target?: string;\n}\n\nexport interface ICSVRecord {\n  id: string;\n  name: string;\n  type: DNSRecordType;\n  value: string;\n  ttl: number;\n  priority?: number;\n  weight?: number;\n  port?: number;\n  created: Date;\n  updated: Date;\n  setIdentifier?: string;\n}\n\nexport type RiskLevel = 'low' | 'medium' | 'high' | 'critical';\n\nexport type OutputFormat = 'table' | 'json' | 'yaml' | 'csv';\n\nexport interface AnalysisResult {\n  summary: {\n    totalRecords: number;\n    highRiskCount: number;\n    mediumRiskCount: number;\n    lowRiskCount: number;\n    averageRiskScore: number;\n  };\n  records: Array<{\n    domain: string;\n    riskScore: number;\n    riskLevel: RiskLevel;\n    riskFactors: string[];\n    details?: any;\n  }>;\n  metadata?: {\n    analyzedAt: string;\n    analyzerVersion: string;\n    duration?: number;\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/cname-chain.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/concurrent.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/encoding-detector.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/ipv6.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/runner/work/dnsweeper-cli-web/dnsweeper-cli-web/src/utils/retry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
