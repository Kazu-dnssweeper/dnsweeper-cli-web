/**\n * AI駆動DNS最適化ページ\n */\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Typography,\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  TextField,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Chip,\n  Alert,\n  CircularProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  LinearProgress,\n  Divider,\n  Avatar,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent\n} from '@mui/material';\nimport {\n  ExpandMore as ExpandMoreIcon,\n  PlayArrow as PlayArrowIcon,\n  Speed as SpeedIcon,\n  Security as SecurityIcon,\n  Shield as ShieldIcon,\n  AttachMoney as MoneyIcon,\n  AutoAwesome as AutoAwesomeIcon,\n  TrendingUp as TrendingUpIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Info as InfoIcon,\n  Refresh as RefreshIcon,\n  Download as DownloadIcon,\n  Build as BuildIcon\n} from '@mui/icons-material';\nimport { useAuth } from '../contexts/AuthContext';\nimport { optimizationApi } from '../api/optimization';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorAlert } from '../components/ErrorAlert';\n\ninterface OptimizationSuggestion {\n  id: string;\n  type: 'performance' | 'security' | 'reliability' | 'cost' | 'best_practice';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  impact: {\n    performance: number;\n    security: number;\n    reliability: number;\n    cost: number;\n  };\n  implementation: {\n    difficulty: 'easy' | 'medium' | 'hard';\n    estimatedTime: string;\n    steps: string[];\n    risks: string[];\n  };\n  affectedRecords: string[];\n  evidence: {\n    metrics: any[];\n    riskFactors: string[];\n    benchmarks: Record<string, number>;\n  };\n}\n\ninterface BusinessContext {\n  industry: string;\n  scale: 'startup' | 'small' | 'medium' | 'enterprise';\n  compliance: string[];\n  budget: 'low' | 'medium' | 'high';\n  priorities: string[];\n}\n\ninterface AnalysisResults {\n  suggestions: OptimizationSuggestion[];\n  summary: {\n    totalSuggestions: number;\n    criticalSuggestions: number;\n    expectedImpact: {\n      performance: number;\n      security: number;\n      reliability: number;\n      cost: number;\n    };\n  };\n  analysisTime: number;\n}\n\nconst AIOptimization: React.FC = () => {\n  const { user } = useAuth();\n  const [domain, setDomain] = useState('');\n  const [businessContext, setBusinessContext] = useState<BusinessContext>({\n    industry: 'technology',\n    scale: 'medium',\n    compliance: [],\n    budget: 'medium',\n    priorities: ['performance', 'security', 'reliability', 'cost']\n  });\n  const [analysisResults, setAnalysisResults] = useState<AnalysisResults | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedSuggestion, setSelectedSuggestion] = useState<OptimizationSuggestion | null>(null);\n  const [implementationStatus, setImplementationStatus] = useState<Record<string, 'pending' | 'running' | 'completed' | 'failed'>>({});\n\n  // AI最適化分析の実行\n  const runOptimizationAnalysis = async () => {\n    if (!domain.trim()) {\n      setError('ドメインを入力してください');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const startTime = Date.now();\n      const results = await optimizationApi.analyzeOptimization(domain, businessContext);\n      const analysisTime = Date.now() - startTime;\n\n      setAnalysisResults({\n        suggestions: results.suggestions,\n        summary: {\n          totalSuggestions: results.suggestions.length,\n          criticalSuggestions: results.suggestions.filter(s => s.priority === 'critical').length,\n          expectedImpact: results.suggestions.reduce((acc, s) => ({\n            performance: acc.performance + s.impact.performance,\n            security: acc.security + s.impact.security,\n            reliability: acc.reliability + s.impact.reliability,\n            cost: acc.cost + s.impact.cost\n          }), { performance: 0, security: 0, reliability: 0, cost: 0 })\n        },\n        analysisTime\n      });\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'AI最適化分析でエラーが発生しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 提案の実装\n  const implementSuggestion = async (suggestion: OptimizationSuggestion) => {\n    setImplementationStatus(prev => ({ ...prev, [suggestion.id]: 'running' }));\n\n    try {\n      await optimizationApi.implementSuggestion(suggestion.id);\n      setImplementationStatus(prev => ({ ...prev, [suggestion.id]: 'completed' }));\n    } catch (err) {\n      setImplementationStatus(prev => ({ ...prev, [suggestion.id]: 'failed' }));\n      setError(err instanceof Error ? err.message : '提案の実装でエラーが発生しました');\n    }\n  };\n\n  // 提案タイプのアイコン\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'performance': return <SpeedIcon />;\n      case 'security': return <SecurityIcon />;\n      case 'reliability': return <ShieldIcon />;\n      case 'cost': return <MoneyIcon />;\n      case 'best_practice': return <AutoAwesomeIcon />;\n      default: return <InfoIcon />;\n    }\n  };\n\n  // 優先度の色\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'critical': return 'error';\n      case 'high': return 'warning';\n      case 'medium': return 'info';\n      case 'low': return 'success';\n      default: return 'default';\n    }\n  };\n\n  // 影響度の可視化\n  const renderImpactBars = (impact: OptimizationSuggestion['impact']) => {\n    const impacts = [\n      { key: 'performance', label: 'パフォーマンス', value: impact.performance, color: '#2196F3' },\n      { key: 'security', label: 'セキュリティ', value: impact.security, color: '#4CAF50' },\n      { key: 'reliability', label: '信頼性', value: impact.reliability, color: '#FF9800' },\n      { key: 'cost', label: 'コスト', value: impact.cost, color: '#9C27B0' }\n    ];\n\n    return (\n      <Box sx={{ mt: 2 }}>\n        {impacts.map(({ key, label, value, color }) => (\n          <Box key={key} sx={{ mb: 1 }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {label}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {value > 0 ? '+' : ''}{value}\n              </Typography>\n            </Box>\n            <LinearProgress\n              variant=\"determinate\"\n              value={Math.abs(value) * 10}\n              sx={{\n                height: 6,\n                borderRadius: 3,\n                backgroundColor: 'rgba(0,0,0,0.1)',\n                '& .MuiLinearProgress-bar': {\n                  backgroundColor: color\n                }\n              }}\n            />\n          </Box>\n        ))}\n      </Box>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <AutoAwesomeIcon color=\"primary\" />\n        AI駆動DNS最適化\n      </Typography>\n\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 4 }}>\n        機械学習とヒューリスティックを活用した包括的DNS最適化分析\n      </Typography>\n\n      {/* 分析設定 */}\n      <Card sx={{ mb: 4 }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            分析設定\n          </Typography>\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"ドメイン\"\n                value={domain}\n                onChange={(e) => setDomain(e.target.value)}\n                fullWidth\n                placeholder=\"example.com\"\n                helperText=\"分析対象のドメインを入力してください\"\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <FormControl fullWidth>\n                <InputLabel>業界</InputLabel>\n                <Select\n                  value={businessContext.industry}\n                  onChange={(e) => setBusinessContext(prev => ({ ...prev, industry: e.target.value }))}\n                >\n                  <MenuItem value=\"technology\">テクノロジー</MenuItem>\n                  <MenuItem value=\"finance\">金融</MenuItem>\n                  <MenuItem value=\"healthcare\">ヘルスケア</MenuItem>\n                  <MenuItem value=\"retail\">小売</MenuItem>\n                  <MenuItem value=\"manufacturing\">製造業</MenuItem>\n                  <MenuItem value=\"other\">その他</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth>\n                <InputLabel>企業規模</InputLabel>\n                <Select\n                  value={businessContext.scale}\n                  onChange={(e) => setBusinessContext(prev => ({ ...prev, scale: e.target.value as BusinessContext['scale'] }))}\n                >\n                  <MenuItem value=\"startup\">スタートアップ</MenuItem>\n                  <MenuItem value=\"small\">小企業</MenuItem>\n                  <MenuItem value=\"medium\">中企業</MenuItem>\n                  <MenuItem value=\"enterprise\">大企業</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <FormControl fullWidth>\n                <InputLabel>予算規模</InputLabel>\n                <Select\n                  value={businessContext.budget}\n                  onChange={(e) => setBusinessContext(prev => ({ ...prev, budget: e.target.value as BusinessContext['budget'] }))}\n                >\n                  <MenuItem value=\"low\">低予算</MenuItem>\n                  <MenuItem value=\"medium\">中予算</MenuItem>\n                  <MenuItem value=\"high\">高予算</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n              <Button\n                variant=\"contained\"\n                onClick={runOptimizationAnalysis}\n                disabled={loading}\n                fullWidth\n                sx={{ height: 56 }}\n                startIcon={loading ? <CircularProgress size={20} /> : <PlayArrowIcon />}\n              >\n                {loading ? 'AI分析中...' : 'AI分析開始'}\n              </Button>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      {/* エラー表示 */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 4 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      {/* 分析結果 */}\n      {analysisResults && (\n        <>\n          {/* サマリー */}\n          <Card sx={{ mb: 4 }}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                <TrendingUpIcon sx={{ mr: 1, verticalAlign: 'middle' }} />\n                分析結果サマリー\n              </Typography>\n\n              <Grid container spacing={2}>\n                <Grid item xs={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Typography variant=\"h4\" color=\"primary\">\n                      {analysisResults.summary.totalSuggestions}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      総提案数\n                    </Typography>\n                  </Box>\n                </Grid>\n\n                <Grid item xs={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Typography variant=\"h4\" color=\"error\">\n                      {analysisResults.summary.criticalSuggestions}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      重要提案\n                    </Typography>\n                  </Box>\n                </Grid>\n\n                <Grid item xs={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Typography variant=\"h4\" color=\"success\">\n                      +{analysisResults.summary.expectedImpact.performance}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      パフォーマンス向上\n                    </Typography>\n                  </Box>\n                </Grid>\n\n                <Grid item xs={6} md={3}>\n                  <Box sx={{ textAlign: 'center', p: 2 }}>\n                    <Typography variant=\"h4\" color=\"info\">\n                      {(analysisResults.analysisTime / 1000).toFixed(1)}s\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      分析時間\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          {/* 最適化提案リスト */}\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                AI最適化提案\n              </Typography>\n\n              {analysisResults.suggestions.map((suggestion) => (\n                <Accordion key={suggestion.id} sx={{ mb: 2 }}>\n                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                      <Avatar sx={{ bgcolor: 'primary.main' }}>\n                        {getTypeIcon(suggestion.type)}\n                      </Avatar>\n                      \n                      <Box sx={{ flex: 1 }}>\n                        <Typography variant=\"h6\">\n                          {suggestion.title}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {suggestion.description}\n                        </Typography>\n                      </Box>\n                      \n                      <Box sx={{ display: 'flex', gap: 1 }}>\n                        <Chip\n                          label={suggestion.priority.toUpperCase()}\n                          color={getPriorityColor(suggestion.priority) as any}\n                          size=\"small\"\n                        />\n                        <Chip\n                          label={suggestion.implementation.difficulty}\n                          variant=\"outlined\"\n                          size=\"small\"\n                        />\n                      </Box>\n                    </Box>\n                  </AccordionSummary>\n                  \n                  <AccordionDetails>\n                    <Grid container spacing={3}>\n                      <Grid item xs={12} md={6}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          📊 影響度分析\n                        </Typography>\n                        {renderImpactBars(suggestion.impact)}\n                      </Grid>\n                      \n                      <Grid item xs={12} md={6}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          🔧 実装ガイド\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                          予想時間: {suggestion.implementation.estimatedTime}\n                        </Typography>\n                        \n                        <Stepper orientation=\"vertical\" sx={{ pl: 0 }}>\n                          {suggestion.implementation.steps.map((step, index) => (\n                            <Step key={index} active={true}>\n                              <StepLabel>\n                                <Typography variant=\"body2\">{step}</Typography>\n                              </StepLabel>\n                            </Step>\n                          ))}\n                        </Stepper>\n                      </Grid>\n                      \n                      <Grid item xs={12}>\n                        <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                          <Button\n                            variant=\"outlined\"\n                            onClick={() => setSelectedSuggestion(suggestion)}\n                            startIcon={<InfoIcon />}\n                          >\n                            詳細を見る\n                          </Button>\n                          \n                          <Button\n                            variant=\"contained\"\n                            onClick={() => implementSuggestion(suggestion)}\n                            disabled={implementationStatus[suggestion.id] === 'running'}\n                            startIcon={\n                              implementationStatus[suggestion.id] === 'running' ? (\n                                <CircularProgress size={20} />\n                              ) : implementationStatus[suggestion.id] === 'completed' ? (\n                                <CheckCircleIcon />\n                              ) : (\n                                <BuildIcon />\n                              )\n                            }\n                          >\n                            {implementationStatus[suggestion.id] === 'running' ? '実装中...' :\n                             implementationStatus[suggestion.id] === 'completed' ? '完了' :\n                             '実装する'}\n                          </Button>\n                        </Box>\n                      </Grid>\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n              ))}\n            </CardContent>\n          </Card>\n        </>\n      )}\n\n      {/* 詳細モーダル */}\n      <Dialog\n        open={!!selectedSuggestion}\n        onClose={() => setSelectedSuggestion(null)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          {selectedSuggestion?.title}\n        </DialogTitle>\n        <DialogContent>\n          {selectedSuggestion && (\n            <Box sx={{ pt: 2 }}>\n              <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                {selectedSuggestion.description}\n              </Typography>\n              \n              <Typography variant=\"h6\" gutterBottom>\n                🎯 対象レコード\n              </Typography>\n              <List dense>\n                {selectedSuggestion.affectedRecords.map((record, index) => (\n                  <ListItem key={index}>\n                    <ListItemText primary={record} />\n                  </ListItem>\n                ))}\n              </List>\n              \n              {selectedSuggestion.implementation.risks.length > 0 && (\n                <>\n                  <Typography variant=\"h6\" gutterBottom sx={{ mt: 3 }}>\n                    ⚠️ リスクと注意事項\n                  </Typography>\n                  <List dense>\n                    {selectedSuggestion.implementation.risks.map((risk, index) => (\n                      <ListItem key={index}>\n                        <ListItemAvatar>\n                          <Avatar sx={{ bgcolor: 'warning.main' }}>\n                            <WarningIcon />\n                          </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText primary={risk} />\n                      </ListItem>\n                    ))}\n                  </List>\n                </>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSelectedSuggestion(null)}>\n            閉じる\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default AIOptimization;"