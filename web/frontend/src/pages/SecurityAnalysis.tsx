/**
 * DNS セキュリティ分析ページ
 */

import React, { useState, useEffect } from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Card,
  CardContent,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  Alert,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Badge,
  Avatar,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Paper,
  Tabs,
  Tab,
  Switch,
  FormControlLabel,
  LinearProgress,
  Tooltip,
  Divider
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  Security as SecurityIcon,
  Warning as WarningIcon,
  Shield as ShieldIcon,
  BugReport as BugReportIcon,
  Phishing as PhishingIcon,
  Computer as ComputerIcon,
  Speed as SpeedIcon,
  Lock as LockIcon,
  Link as LinkIcon,
  Refresh as RefreshIcon,
  PlayArrow as PlayArrowIcon,
  Stop as StopIcon,
  Download as DownloadIcon,
  Visibility as VisibilityIcon,
  Report as ReportIcon,
  Timeline as TimelineIcon,
  Dashboard as DashboardIcon,
  FilterList as FilterListIcon,
  Search as SearchIcon
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';\nimport { LoadingSpinner } from '../components/LoadingSpinner';\nimport { ErrorAlert } from '../components/ErrorAlert';\n\ninterface SecurityThreat {\n  id: string;\n  type: 'malware' | 'phishing' | 'typosquatting' | 'dga' | 'fastflux' | 'dns_hijacking' | 'cache_poisoning' | 'subdomain_takeover';\n  severity: 'critical' | 'high' | 'medium' | 'low';\n  confidence: number;\n  domain: string;\n  timestamp: number;\n  description: string;\n  indicators: {\n    technicalIndicators: string[];\n    behavioralIndicators: string[];\n    reputationIndicators: string[];\n  };\n  mitigation: {\n    immediateActions: string[];\n    longTermActions: string[];\n    preventionMeasures: string[];\n  };\n  evidence: {\n    dnsRecords: any[];\n    networkAnalysis: {\n      ipReputationScore: number;\n      geoLocationRisk: number;\n      domainAge: number;\n      certificateStatus: string;\n    };\n  };\n}\n\ninterface SecurityAnalysisResults {\n  threats: SecurityThreat[];\n  statistics: {\n    totalThreats: number;\n    threatsByType: Record<string, number>;\n    threatsBySeverity: Record<string, number>;\n  };\n  analysisTime: number;\n}\n\nconst SecurityAnalysis: React.FC = () => {\n  const { user } = useAuth();\n  const [domains, setDomains] = useState<string>('');\n  const [analysisResults, setAnalysisResults] = useState<SecurityAnalysisResults | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedThreat, setSelectedThreat] = useState<SecurityThreat | null>(null);\n  const [realTimeMonitoring, setRealTimeMonitoring] = useState(false);\n  const [severityFilter, setSeverityFilter] = useState<string>('all');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [confidenceThreshold, setConfidenceThreshold] = useState<number>(70);\n  const [activeTab, setActiveTab] = useState(0);\n  const [monitoringInterval, setMonitoringInterval] = useState<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    return () => {\n      if (monitoringInterval) {\n        clearInterval(monitoringInterval);\n      }\n    };\n  }, [monitoringInterval]);\n\n  // セキュリティ分析の実行\n  const runSecurityAnalysis = async () => {\n    if (!domains.trim()) {\n      setError('ドメインを入力してください');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const startTime = Date.now();\n      \n      // 実際の実装では、セキュリティ分析APIを呼び出す\n      const mockThreats: SecurityThreat[] = [\n        {\n          id: 'threat-1',\n          type: 'malware',\n          severity: 'critical',\n          confidence: 95,\n          domain: 'malicious-example.com',\n          timestamp: Date.now(),\n          description: 'このドメインは既知のマルウェア配布サイトです',\n          indicators: {\n            technicalIndicators: ['既知のマルウェアドメイン', '多数の悪意のあるファイル'],\n            behavioralIndicators: ['短期間での大量アクセス', '異常なトラフィックパターン'],\n            reputationIndicators: ['複数のブラックリストに登録', 'セキュリティベンダーによる検出']\n          },\n          mitigation: {\n            immediateActions: ['ドメインへのアクセス遮断', '関連IPアドレスのブロック'],\n            longTermActions: ['継続的な監視', 'インシデント対応計画の実行'],\n            preventionMeasures: ['DNSフィルタリング強化', '従業員教育']\n          },\n          evidence: {\n            dnsRecords: [],\n            networkAnalysis: {\n              ipReputationScore: 15,\n              geoLocationRisk: 85,\n              domainAge: 30,\n              certificateStatus: 'invalid'\n            }\n          }\n        },\n        {\n          id: 'threat-2',\n          type: 'phishing',\n          severity: 'high',\n          confidence: 88,\n          domain: 'paypa1-security.com',\n          timestamp: Date.now() - 3600000,\n          description: 'PayPalを模倣したフィッシングサイトの可能性があります',\n          indicators: {\n            technicalIndicators: ['ブランド名の類似性', '偽装されたSSL証明書'],\n            behavioralIndicators: ['認証情報の収集', '金融サービスの偽装'],\n            reputationIndicators: ['新規登録ドメイン', '不審なメール配信']\n          },\n          mitigation: {\n            immediateActions: ['ユーザー警告の実施', 'ドメインの報告'],\n            longTermActions: ['フィッシング対策強化', '監視継続'],\n            preventionMeasures: ['メールフィルタリング', 'ユーザー教育']\n          },\n          evidence: {\n            dnsRecords: [],\n            networkAnalysis: {\n              ipReputationScore: 25,\n              geoLocationRisk: 70,\n              domainAge: 7,\n              certificateStatus: 'self_signed'\n            }\n          }\n        }\n      ];\n\n      const analysisTime = Date.now() - startTime;\n      \n      const results: SecurityAnalysisResults = {\n        threats: mockThreats,\n        statistics: {\n          totalThreats: mockThreats.length,\n          threatsByType: mockThreats.reduce((acc, threat) => {\n            acc[threat.type] = (acc[threat.type] || 0) + 1;\n            return acc;\n          }, {} as Record<string, number>),\n          threatsBySeverity: mockThreats.reduce((acc, threat) => {\n            acc[threat.severity] = (acc[threat.severity] || 0) + 1;\n            return acc;\n          }, {} as Record<string, number>)\n        },\n        analysisTime\n      };\n\n      setAnalysisResults(results);\n\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'セキュリティ分析でエラーが発生しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // リアルタイム監視の開始/停止\n  const toggleRealTimeMonitoring = () => {\n    if (realTimeMonitoring) {\n      if (monitoringInterval) {\n        clearInterval(monitoringInterval);\n        setMonitoringInterval(null);\n      }\n      setRealTimeMonitoring(false);\n    } else {\n      const interval = setInterval(() => {\n        runSecurityAnalysis();\n      }, 60000); // 1分間隔\n      setMonitoringInterval(interval);\n      setRealTimeMonitoring(true);\n    }\n  };\n\n  // 脅威のフィルタリング\n  const filteredThreats = analysisResults?.threats.filter(threat => {\n    if (severityFilter !== 'all' && threat.severity !== severityFilter) return false;\n    if (typeFilter !== 'all' && threat.type !== typeFilter) return false;\n    if (threat.confidence < confidenceThreshold) return false;\n    return true;\n  }) || [];\n\n  // 脅威タイプのアイコン\n  const getThreatIcon = (type: string) => {\n    switch (type) {\n      case 'malware': return <BugReportIcon />;\n      case 'phishing': return <PhishingIcon />;\n      case 'typosquatting': return <ComputerIcon />;\n      case 'dga': return <ComputerIcon />;\n      case 'fastflux': return <SpeedIcon />;\n      case 'dns_hijacking': return <LockIcon />;\n      case 'cache_poisoning': return <WarningIcon />;\n      case 'subdomain_takeover': return <LinkIcon />;\n      default: return <WarningIcon />;\n    }\n  };\n\n  // 重要度の色\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'error';\n      case 'high': return 'warning';\n      case 'medium': return 'info';\n      case 'low': return 'success';\n      default: return 'default';\n    }\n  };\n\n  // 脅威統計の可視化\n  const renderThreatStatistics = () => {\n    if (!analysisResults) return null;\n\n    return (\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"primary\">\n                {analysisResults.statistics.totalThreats}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                総脅威数\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"error\">\n                {analysisResults.statistics.threatsBySeverity.critical || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                重要脅威\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"warning\">\n                {analysisResults.statistics.threatsBySeverity.high || 0}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                高脅威\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h4\" color=\"info\">\n                {(analysisResults.analysisTime / 1000).toFixed(1)}s\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                分析時間\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <SecurityIcon color=\"primary\" />\n        DNS セキュリティ分析\n      </Typography>\n\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 4 }}>\n        高度な脅威検出・分析によるDNSセキュリティ監視\n      </Typography>\n\n      {/* 分析設定 */}\n      <Card sx={{ mb: 4 }}>\n        <CardContent>\n          <Typography variant=\"h6\" gutterBottom>\n            分析設定\n          </Typography>\n\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={6}>\n              <TextField\n                label=\"ドメイン\"\n                value={domains}\n                onChange={(e) => setDomains(e.target.value)}\n                fullWidth\n                multiline\n                rows={3}\n                placeholder=\"example.com\\nsuspicious.com\\nmalicious.com\"\n                helperText=\"分析対象のドメインを入力してください（複数行可）\"\n              />\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <InputLabel>重要度フィルタ</InputLabel>\n                    <Select\n                      value={severityFilter}\n                      onChange={(e) => setSeverityFilter(e.target.value)}\n                    >\n                      <MenuItem value=\"all\">すべて</MenuItem>\n                      <MenuItem value=\"critical\">重要</MenuItem>\n                      <MenuItem value=\"high\">高</MenuItem>\n                      <MenuItem value=\"medium\">中</MenuItem>\n                      <MenuItem value=\"low\">低</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <InputLabel>脅威タイプフィルタ</InputLabel>\n                    <Select\n                      value={typeFilter}\n                      onChange={(e) => setTypeFilter(e.target.value)}\n                    >\n                      <MenuItem value=\"all\">すべて</MenuItem>\n                      <MenuItem value=\"malware\">マルウェア</MenuItem>\n                      <MenuItem value=\"phishing\">フィッシング</MenuItem>\n                      <MenuItem value=\"typosquatting\">タイポスクワッティング</MenuItem>\n                      <MenuItem value=\"dga\">DGA</MenuItem>\n                      <MenuItem value=\"fastflux\">Fast Flux</MenuItem>\n                      <MenuItem value=\"dns_hijacking\">DNS ハイジャック</MenuItem>\n                      <MenuItem value=\"cache_poisoning\">キャッシュポイズニング</MenuItem>\n                      <MenuItem value=\"subdomain_takeover\">サブドメイン乗っ取り</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Box sx={{ mt: 3, display: 'flex', gap: 2, alignItems: 'center' }}>\n            <Button\n              variant=\"contained\"\n              onClick={runSecurityAnalysis}\n              disabled={loading}\n              startIcon={loading ? <CircularProgress size={20} /> : <PlayArrowIcon />}\n            >\n              {loading ? '分析中...' : 'セキュリティ分析開始'}\n            </Button>\n            \n            <FormControlLabel\n              control={\n                <Switch\n                  checked={realTimeMonitoring}\n                  onChange={toggleRealTimeMonitoring}\n                  disabled={loading}\n                />\n              }\n              label=\"リアルタイム監視\"\n            />\n            \n            <TextField\n              label=\"信頼度閾値\"\n              type=\"number\"\n              value={confidenceThreshold}\n              onChange={(e) => setConfidenceThreshold(parseInt(e.target.value))}\n              inputProps={{ min: 0, max: 100 }}\n              sx={{ width: 150 }}\n            />\n          </Box>\n        </CardContent>\n      </Card>\n\n      {/* エラー表示 */}\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 4 }} onClose={() => setError(null)}>\n          {error}\n        </Alert>\n      )}\n\n      {/* 分析結果 */}\n      {analysisResults && (\n        <>\n          {/* 統計情報 */}\n          {renderThreatStatistics()}\n\n          {/* タブナビゲーション */}\n          <Paper sx={{ mb: 3 }}>\n            <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\n              <Tab icon={<ReportIcon />} label=\"脅威レポート\" />\n              <Tab icon={<TimelineIcon />} label=\"分析統計\" />\n              <Tab icon={<DashboardIcon />} label=\"監視ダッシュボード\" />\n            </Tabs>\n          </Paper>\n\n          {/* 脅威レポート */}\n          {activeTab === 0 && (\n            <Card>\n              <CardContent>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\">\n                    脅威検出結果 ({filteredThreats.length}件)\n                  </Typography>\n                  <Box>\n                    <IconButton onClick={runSecurityAnalysis} disabled={loading}>\n                      <RefreshIcon />\n                    </IconButton>\n                    <IconButton>\n                      <DownloadIcon />\n                    </IconButton>\n                  </Box>\n                </Box>\n\n                {filteredThreats.length === 0 ? (\n                  <Alert severity=\"success\">\n                    ✅ 指定された条件で脅威は検出されませんでした\n                  </Alert>\n                ) : (\n                  filteredThreats.map((threat) => (\n                    <Accordion key={threat.id} sx={{ mb: 2 }}>\n                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>\n                          <Avatar sx={{ bgcolor: `${getSeverityColor(threat.severity)}.main` }}>\n                            {getThreatIcon(threat.type)}\n                          </Avatar>\n                          \n                          <Box sx={{ flex: 1 }}>\n                            <Typography variant=\"h6\">\n                              {threat.domain}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              {threat.description}\n                            </Typography>\n                          </Box>\n                          \n                          <Box sx={{ display: 'flex', gap: 1 }}>\n                            <Chip\n                              label={threat.severity.toUpperCase()}\n                              color={getSeverityColor(threat.severity) as any}\n                              size=\"small\"\n                            />\n                            <Chip\n                              label={`${threat.confidence}%`}\n                              variant=\"outlined\"\n                              size=\"small\"\n                            />\n                          </Box>\n                        </Box>\n                      </AccordionSummary>\n                      \n                      <AccordionDetails>\n                        <Grid container spacing={3}>\n                          <Grid item xs={12} md={6}>\n                            <Typography variant=\"subtitle2\" gutterBottom>\n                              🔍 脅威指標\n                            </Typography>\n                            \n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                              技術的指標:\n                            </Typography>\n                            <List dense>\n                              {threat.indicators.technicalIndicators.map((indicator, index) => (\n                                <ListItem key={index}>\n                                  <ListItemText primary={`• ${indicator}`} />\n                                </ListItem>\n                              ))}\n                            </List>\n                            \n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                              行動的指標:\n                            </Typography>\n                            <List dense>\n                              {threat.indicators.behavioralIndicators.map((indicator, index) => (\n                                <ListItem key={index}>\n                                  <ListItemText primary={`• ${indicator}`} />\n                                </ListItem>\n                              ))}\n                            </List>\n                          </Grid>\n                          \n                          <Grid item xs={12} md={6}>\n                            <Typography variant=\"subtitle2\" gutterBottom>\n                              🛡️ 対策\n                            </Typography>\n                            \n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                              即座の対策:\n                            </Typography>\n                            <List dense>\n                              {threat.mitigation.immediateActions.map((action, index) => (\n                                <ListItem key={index}>\n                                  <ListItemText primary={`• ${action}`} />\n                                </ListItem>\n                              ))}\n                            </List>\n                            \n                            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                              長期的対策:\n                            </Typography>\n                            <List dense>\n                              {threat.mitigation.longTermActions.map((action, index) => (\n                                <ListItem key={index}>\n                                  <ListItemText primary={`• ${action}`} />\n                                </ListItem>\n                              ))}\n                            </List>\n                          </Grid>\n                          \n                          <Grid item xs={12}>\n                            <Typography variant=\"subtitle2\" gutterBottom>\n                              📊 ネットワーク分析\n                            </Typography>\n                            \n                            <Grid container spacing={2}>\n                              <Grid item xs={6} md={3}>\n                                <Paper sx={{ p: 2, textAlign: 'center' }}>\n                                  <Typography variant=\"h6\" color=\"primary\">\n                                    {threat.evidence.networkAnalysis.ipReputationScore}\n                                  </Typography>\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    IP レピュテーション\n                                  </Typography>\n                                </Paper>\n                              </Grid>\n                              \n                              <Grid item xs={6} md={3}>\n                                <Paper sx={{ p: 2, textAlign: 'center' }}>\n                                  <Typography variant=\"h6\" color=\"warning\">\n                                    {threat.evidence.networkAnalysis.geoLocationRisk}\n                                  </Typography>\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    地理的リスク\n                                  </Typography>\n                                </Paper>\n                              </Grid>\n                              \n                              <Grid item xs={6} md={3}>\n                                <Paper sx={{ p: 2, textAlign: 'center' }}>\n                                  <Typography variant=\"h6\" color=\"info\">\n                                    {threat.evidence.networkAnalysis.domainAge}\n                                  </Typography>\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    ドメイン年数\n                                  </Typography>\n                                </Paper>\n                              </Grid>\n                              \n                              <Grid item xs={6} md={3}>\n                                <Paper sx={{ p: 2, textAlign: 'center' }}>\n                                  <Typography variant=\"h6\" color=\"error\">\n                                    {threat.evidence.networkAnalysis.certificateStatus}\n                                  </Typography>\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    証明書状態\n                                  </Typography>\n                                </Paper>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                          \n                          <Grid item xs={12}>\n                            <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                              <Button\n                                variant=\"outlined\"\n                                onClick={() => setSelectedThreat(threat)}\n                                startIcon={<VisibilityIcon />}\n                              >\n                                詳細を見る\n                              </Button>\n                              \n                              <Button\n                                variant=\"contained\"\n                                color=\"warning\"\n                                startIcon={<ShieldIcon />}\n                              >\n                                対策を実行\n                              </Button>\n                            </Box>\n                          </Grid>\n                        </Grid>\n                      </AccordionDetails>\n                    </Accordion>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* 分析統計 */}\n          {activeTab === 1 && (\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  分析統計\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      脅威タイプ別分布\n                    </Typography>\n                    {Object.entries(analysisResults.statistics.threatsByType).map(([type, count]) => (\n                      <Box key={type} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {getThreatIcon(type)}\n                          <Typography variant=\"body2\">{type}</Typography>\n                        </Box>\n                        <Typography variant=\"body2\" color=\"text.secondary\">{count}件</Typography>\n                      </Box>\n                    ))}\n                  </Grid>\n                  \n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      重要度別分布\n                    </Typography>\n                    {Object.entries(analysisResults.statistics.threatsBySeverity).map(([severity, count]) => (\n                      <Box key={severity} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Chip\n                          label={severity.toUpperCase()}\n                          color={getSeverityColor(severity) as any}\n                          size=\"small\"\n                        />\n                        <Typography variant=\"body2\" color=\"text.secondary\">{count}件</Typography>\n                      </Box>\n                    ))}\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* 監視ダッシュボード */}\n          {activeTab === 2 && (\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  監視ダッシュボード\n                </Typography>\n                \n                <Alert severity={realTimeMonitoring ? 'success' : 'info'} sx={{ mb: 3 }}>\n                  {realTimeMonitoring ? '🔄 リアルタイム監視が有効です' : '⏸️ リアルタイム監視は無効です'}\n                </Alert>\n                \n                <Grid container spacing={3}>\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      監視設定\n                    </Typography>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                      <FormControlLabel\n                        control={<Switch checked={realTimeMonitoring} onChange={toggleRealTimeMonitoring} />}\n                        label=\"リアルタイム監視\"\n                      />\n                      <TextField\n                        label=\"監視間隔（秒）\"\n                        type=\"number\"\n                        defaultValue={60}\n                        InputProps={{ readOnly: realTimeMonitoring }}\n                        size=\"small\"\n                      />\n                    </Box>\n                  </Grid>\n                  \n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      最近の活動\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      最終分析: {new Date().toLocaleString()}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      検出された脅威: {filteredThreats.length}件\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          )}\n        </>\n      )}\n\n      {/* 詳細モーダル */}\n      <Dialog\n        open={!!selectedThreat}\n        onClose={() => setSelectedThreat(null)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          🚨 脅威詳細: {selectedThreat?.domain}\n        </DialogTitle>\n        <DialogContent>\n          {selectedThreat && (\n            <Box sx={{ pt: 2 }}>\n              <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                {selectedThreat.description}\n              </Typography>\n              \n              <Divider sx={{ mb: 2 }} />\n              \n              <Typography variant=\"h6\" gutterBottom>\n                🔍 全指標\n              </Typography>\n              \n              <Typography variant=\"subtitle2\" gutterBottom>\n                レピュテーション指標:\n              </Typography>\n              <List dense>\n                {selectedThreat.indicators.reputationIndicators.map((indicator, index) => (\n                  <ListItem key={index}>\n                    <ListItemText primary={`• ${indicator}`} />\n                  </ListItem>\n                ))}\n              </List>\n              \n              <Typography variant=\"subtitle2\" gutterBottom>\n                予防策:\n              </Typography>\n              <List dense>\n                {selectedThreat.mitigation.preventionMeasures.map((measure, index) => (\n                  <ListItem key={index}>\n                    <ListItemText primary={`• ${measure}`} />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSelectedThreat(null)}>\n            閉じる\n          </Button>\n          <Button variant=\"contained\" color=\"warning\">\n            対策を実行\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n};\n\nexport default SecurityAnalysis;"